{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6b61\u8fce\u4f86\u5230 Rust \u5b78\u7fd2\u8def\u5f91\u8207\u4e3b\u984c\u5927\u7db1","text":"<p>Rust \u662f\u4e00\u9580\u4ee5\u6027\u80fd\u3001\u5b89\u5168\u6027\u548c\u4e26\u767c\u6027\u70ba\u6838\u5fc3\u8a2d\u8a08\u7406\u5ff5\u7684\u73fe\u4ee3\u7cfb\u7d71\u7a0b\u5f0f\u8a9e\u8a00\u3002\u672c\u9805\u76ee\u65e8\u5728\u70ba\u5b78\u7fd2\u8005\u63d0\u4f9b\u4e00\u500b\u57fa\u65bc\u7b2c\u4e00\u6027\u539f\u7406\u8207\u8a2d\u8a08\u7406\u5ff5\u7684\u7cfb\u7d71\u5316\u5b78\u7fd2\u8def\u5f91\uff0c\u5e6b\u52a9\u60a8\u5f9e\u57fa\u790e\u5230\u9032\u968e\uff0c\u9010\u6b65\u638c\u63e1 Rust \u7684\u6838\u5fc3\u6982\u5ff5\u8207\u6280\u8853\u7d30\u7bc0\u3002</p> <p>\u7121\u8ad6\u60a8\u662f\u521d\u5b78\u8005\u9084\u662f\u5e0c\u671b\u6df1\u5165\u7406\u89e3 Rust \u7684\u8a2d\u8a08\u54f2\u5b78\uff0c\u672c\u6587\u4ef6\u90fd\u5c07\u70ba\u60a8\u63d0\u4f9b\u6e05\u6670\u7684\u6307\u5f15\u8207\u8c50\u5bcc\u7684\u8cc7\u6e90\uff0c\u52a9\u60a8\u6210\u70ba\u4e00\u540d\u9ad8\u6548\u7684 Rust \u958b\u767c\u8005\u3002</p>"},{"location":"#rust_1","title":"\u4ec0\u9ebc\u662f Rust\uff1f","text":"<p>Rust \u662f\u4e00\u9580\u89e3\u6c7a\u7cfb\u7d71\u7a0b\u5f0f\u8a9e\u8a00\u4e2d\u5e38\u898b\u554f\u984c\u7684\u8a9e\u8a00\uff0c\u7279\u5225\u662f\u5728\u8a18\u61b6\u9ad4\u5b89\u5168\u8207\u4e26\u767c\u6027\u65b9\u9762\u6709\u7368\u7279\u7684\u512a\u52e2\u3002\u4ee5\u4e0b\u662f Rust \u7684\u6838\u5fc3\u8a2d\u8a08\u7406\u5ff5\u8207\u7279\u9ede\uff1a</p> <ul> <li>\u8a18\u61b6\u9ad4\u5b89\u5168\uff1a\u901a\u904e\u7de8\u8b6f\u671f\u7684\u6240\u6709\u6b0a\u7cfb\u7d71\uff0c\u9632\u6b62\u5167\u5b58\u6d29\u6f0f\u8207\u61f8\u5782\u6307\u91dd\uff0c\u7121\u9700\u5783\u573e\u56de\u6536\u3002</li> <li>\u578b\u5225\u5b89\u5168\uff1a\u975c\u614b\u5f37\u578b\u5225\u8207\u578b\u5225\u63a8\u65b7\uff0c\u63d0\u5347\u4ee3\u78bc\u5b89\u5168\u6027\u8207\u8868\u9054\u529b\u3002</li> <li>\u932f\u8aa4\u8655\u7406\uff1a\u986f\u5f0f\u932f\u8aa4\u8655\u7406\u6a5f\u5236\uff0c\u6e1b\u5c11\u904b\u884c\u6642\u7570\u5e38\u3002</li> <li>\u4e26\u884c\u5b89\u5168\uff1a\u6240\u6709\u6b0a\u8207\u501f\u7528\u898f\u5247\u78ba\u4fdd\u7de8\u8b6f\u671f\u9632\u6b62\u6578\u64da\u7af6\u722d\u3002</li> <li>\u96f6\u6210\u672c\u62bd\u8c61\uff1a\u9ad8\u7d1a\u62bd\u8c61\u529f\u80fd\u7121\u904b\u884c\u6642\u958b\u92b7\u3002</li> <li>\u4e92\u64cd\u4f5c\u6027\uff1a\u6613\u65bc\u8207\u5176\u4ed6\u8a9e\u8a00\uff08\u5982 C/C++\uff09\u6574\u5408\uff0c\u9069\u7528\u65bc\u5d4c\u5165\u5f0f\u7cfb\u7d71\u8207 WebAssembly\u3002</li> </ul> <p>Rust \u7684\u9019\u4e9b\u8a2d\u8a08\u7406\u5ff5\u4f7f\u5176\u6210\u70ba\u958b\u767c\u9ad8\u6548\u3001\u5b89\u5168\u8207\u53ef\u9760\u8edf\u9ad4\u7684\u7406\u60f3\u9078\u64c7\uff0c\u5ee3\u6cdb\u61c9\u7528\u65bc\u7cfb\u7d71\u7de8\u7a0b\u3001Web \u5f8c\u7aef\u3001\u5d4c\u5165\u5f0f\u8a2d\u5099\u8207\u5340\u584a\u93c8\u7b49\u9818\u57df\u3002</p>"},{"location":"#_1","title":"\u5b78\u7fd2\u8def\u5f91\u6982\u8ff0","text":"<p>\u672c\u6587\u4ef6\u5c07 Rust \u7684\u5b78\u7fd2\u904e\u7a0b\u5206\u70ba\u4e94\u500b\u968e\u6bb5\uff0c\u5f9e\u5165\u9580\u5230\u5c08\u5bb6\u7d1a\uff0c\u5faa\u5e8f\u6f38\u9032\u5730\u5e6b\u52a9\u60a8\u638c\u63e1\u9019\u9580\u8a9e\u8a00\u3002\u6bcf\u500b\u968e\u6bb5\u805a\u7126\u65bc\u7279\u5b9a\u7684\u4e3b\u984c\u8207\u6280\u80fd\uff0c\u4e26\u7d50\u5408 Rust \u7684\u8a2d\u8a08\u7406\u5ff5\u9032\u884c\u8b1b\u89e3\uff1a</p> <ol> <li>\u968e\u6bb5 1\uff1a\u5165\u9580 (1-3 \u9031) - \u7406\u89e3 Rust \u7684\u6838\u5fc3\u8a2d\u8a08\u7406\u5ff5\uff0c\u638c\u63e1\u57fa\u672c\u8a9e\u6cd5\u8207\u6240\u6709\u6b0a\u7cfb\u7d71\u3002</li> <li>\u968e\u6bb5 2\uff1a\u57fa\u790e\u9032\u968e (3-6 \u9031) - \u6df1\u5165\u8a18\u61b6\u9ad4\u7ba1\u7406\u8207\u932f\u8aa4\u8655\u7406\uff0c\u719f\u6089\u751f\u547d\u9031\u671f\u8207\u501f\u7528\u898f\u5247\u3002</li> <li>\u968e\u6bb5 3\uff1a\u4e2d\u7d1a (2-3 \u500b\u6708) - \u61c9\u7528\u96f6\u6210\u672c\u62bd\u8c61\u8207\u4e26\u767c\u7279\u6027\uff0c\u958b\u767c\u9ad8\u6548\u7a0b\u5e8f\u3002</li> <li>\u968e\u6bb5 4\uff1a\u9ad8\u7d1a (3-4 \u500b\u6708) - \u638c\u63e1\u7570\u6b65\u7de8\u7a0b\u8207\u5b8f\u7cfb\u7d71\uff0c\u61c9\u5c0d\u8907\u96dc\u5834\u666f\u3002</li> <li>\u968e\u6bb5 5\uff1a\u5c08\u5bb6\u7d1a (\u6301\u7e8c\u5b78\u7fd2) - \u63a2\u7d22 Rust \u751f\u614b\u7cfb\u7d71\uff0c\u61c9\u7528\u65bc\u5be6\u969b\u9805\u76ee\u8207\u8de8\u8a9e\u8a00\u5834\u666f\u3002</li> </ol>"},{"location":"data-structures-applications/advanced-data-structures/","title":"\u8cc7\u6599\u7d50\u69cb\u7684\u61c9\u7528\uff1a\u9032\u968e\u8cc7\u6599\u7d50\u69cb","text":"<p>Rust \u7684\u6a19\u6e96\u51fd\u6578\u5eab\u63d0\u4f9b\u4e86\u591a\u7a2e\u9032\u968e\u8cc7\u6599\u7d50\u69cb\uff0c\u9019\u4e9b\u7d50\u69cb\u91dd\u5c0d\u7279\u5b9a\u554f\u984c\u63d0\u4f9b\u4e86\u9ad8\u6548\u89e3\u6c7a\u65b9\u6848\u3002</p>"},{"location":"data-structures-applications/advanced-data-structures/#_2","title":"\u70ba\u4ec0\u9ebc\u5b78\u7fd2\u9032\u968e\u8cc7\u6599\u7d50\u69cb\uff1f","text":"<p>\u9032\u968e\u8cc7\u6599\u7d50\u69cb\u91dd\u5c0d\u7279\u5b9a\u5834\u666f\u63d0\u4f9b\u4e86\u512a\u5316\u89e3\u6c7a\u65b9\u6848\uff0c\u5b78\u7fd2\u5b83\u5011\u6709\u4ee5\u4e0b\u597d\u8655\uff1a</p> <ul> <li>\u91dd\u5c0d\u6027\u512a\u5316\uff1a\u6839\u64da\u554f\u984c\u7279\u6027\u9078\u64c7\u8cc7\u6599\u7d50\u69cb\uff0c\u63d0\u5347\u7a0b\u5f0f\u6548\u80fd\u3002</li> <li>\u8907\u96dc\u554f\u984c\u89e3\u6c7a\uff1a\u652f\u63f4\u66f4\u8907\u96dc\u7684\u7b97\u6cd5\u8207\u7cfb\u7d71\u8a2d\u8a08\u3002</li> <li>\u8a2d\u8a08\u9748\u6d3b\u6027\uff1a\u7406\u89e3\u591a\u7a2e\u8cc7\u6599\u7d50\u69cb\u7684\u7279\u6027\uff0c\u589e\u5f37\u7a0b\u5f0f\u67b6\u69cb\u80fd\u529b\u3002</li> </ul> <p>\u672c\u7ae0\u5c07\u805a\u7126\u65bc Rust \u6a19\u6e96\u51fd\u6578\u5eab\u4e2d\u7684\u9032\u968e\u8cc7\u6599\u7d50\u69cb\u53ca\u5176\u61c9\u7528\u3002</p>"},{"location":"data-structures-applications/advanced-data-structures/#_3","title":"\u9032\u968e\u8cc7\u6599\u7d50\u69cb\u6982\u89bd","text":""},{"location":"data-structures-applications/advanced-data-structures/#1-b-btreemapk-v-btreesett","title":"1. B \u6a39\u6620\u5c04\u8207\u96c6\u5408 (<code>BTreeMap&lt;K, V&gt;</code> \u8207 <code>BTreeSet&lt;T&gt;</code>)","text":"<p><code>BTreeMap</code> \u548c <code>BTreeSet</code> \u662f\u57fa\u65bc B \u6a39\u5be6\u73fe\u7684\u6709\u5e8f\u9375\u503c\u5c0d\u8207\u96c6\u5408\u7d50\u69cb\uff1a</p> <ul> <li>\u5e95\u5c64\u6a5f\u5236\uff1a\u4f7f\u7528\u5e73\u8861 B \u6a39\u5b58\u5132\u6578\u64da\uff0c\u4fdd\u8b49\u5c0d\u6578\u6642\u9593\u7684\u63d2\u5165\u3001\u67e5\u627e\u8207\u522a\u9664\u64cd\u4f5c\u3002</li> <li>\u57fa\u672c\u7528\u6cd5\uff1a\u652f\u63f4\u6709\u5e8f\u8fed\u4ee3\u8207\u7bc4\u570d\u67e5\u8a62\u3002   <pre><code>use std::collections::{BTreeMap, BTreeSet};\nlet mut map = BTreeMap::new();\nmap.insert(3, \"three\");\nmap.insert(1, \"one\");\nmap.insert(2, \"two\");\nfor (key, value) in &amp;map {\n    println!(\"{}: {}\", key, value); // \u6309\u9375\u6709\u5e8f\u8f38\u51fa\n}\nlet mut set = BTreeSet::new();\nset.insert(3);\nset.insert(1);\nset.insert(2);\nprintln!(\"Set: {:?}\", set); // \u8f38\u51fa: {1, 2, 3}\n</code></pre></li> <li>\u61c9\u7528\u5834\u666f\uff1a\u9069\u7528\u65bc\u9700\u8981\u6709\u5e8f\u5b58\u5132\u8207\u7bc4\u570d\u67e5\u8a62\u7684\u5834\u666f\uff0c\u5982\u6578\u64da\u5eab\u7d22\u5f15\u6216\u65e5\u8a8c\u6642\u9593\u7dda\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u82e5\u4e0d\u9700\u8981\u6709\u5e8f\u6027\uff0c<code>HashMap</code> \u548c <code>HashSet</code> \u901a\u5e38\u66f4\u5feb\uff1b\u7bc4\u570d\u67e5\u8a62\u6642\u5145\u5206\u5229\u7528 <code>BTreeMap::range()</code>\u3002</p>"},{"location":"data-structures-applications/advanced-data-structures/#2-linkedlistt","title":"2. \u96d9\u5411\u9023\u7d50\u4e32\u5217 (<code>LinkedList&lt;T&gt;</code>)","text":"<p><code>LinkedList&lt;T&gt;</code> \u662f\u96d9\u5411\u9023\u7d50\u4e32\u5217\uff0c\u652f\u63f4\u5f9e\u5169\u7aef\u9ad8\u6548\u63d2\u5165\u8207\u522a\u9664\uff1a</p> <ul> <li>\u5e95\u5c64\u6a5f\u5236\uff1a\u6bcf\u500b\u5143\u7d20\u5b58\u5132\u524d\u5f8c\u7bc0\u9ede\u6307\u91dd\uff0c\u652f\u63f4\u975e\u9023\u7e8c\u8a18\u61b6\u9ad4\u5b58\u5132\u3002</li> <li>\u57fa\u672c\u7528\u6cd5\uff1a\u652f\u63f4\u5169\u7aef\u64cd\u4f5c\u8207\u6e38\u6a19\u904d\u6b77\u3002   <pre><code>use std::collections::LinkedList;\nlet mut list = LinkedList::new();\nlist.push_back(1);\nlist.push_back(2);\nlist.push_front(0);\nprintln!(\"List: {:?}\", list); // \u8f38\u51fa: [0, 1, 2]\nif let Some(front) = list.pop_front() {\n    println!(\"Popped: {}\", front); // \u8f38\u51fa: 0\n}\n</code></pre></li> <li>\u61c9\u7528\u5834\u666f\uff1a\u9069\u7528\u65bc\u983b\u7e41\u5f9e\u5169\u7aef\u63d2\u5165\u8207\u522a\u9664\u7684\u5834\u666f\uff0c\u5982\u6b77\u53f2\u8a18\u9304\u6216\u4efb\u52d9\u8abf\u5ea6\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u9664\u975e\u6709\u7279\u5b9a\u9700\u6c42\uff0c<code>Vec</code> \u901a\u5e38\u56e0\u5feb\u53d6\u53cb\u597d\u800c\u6548\u80fd\u66f4\u4f73\uff1b\u5927\u898f\u6a21\u64cd\u4f5c\u6642\u8003\u616e\u8a18\u61b6\u9ad4\u788e\u7247\u554f\u984c\u3002</p>"},{"location":"data-structures-applications/advanced-data-structures/#3-vecdequet","title":"3. \u96d9\u7aef\u4f47\u5217 (<code>VecDeque&lt;T&gt;</code>)","text":"<p><code>VecDeque&lt;T&gt;</code> \u662f\u57fa\u65bc\u74b0\u5f62\u7de9\u885d\u5340\u7684\u96d9\u7aef\u4f47\u5217\uff0c\u652f\u63f4\u5f9e\u5169\u7aef\u9ad8\u6548\u64cd\u4f5c\uff1a</p> <ul> <li>\u5e95\u5c64\u6a5f\u5236\uff1a\u4f7f\u7528\u9023\u7e8c\u8a18\u61b6\u9ad4\u5be6\u73fe\u74b0\u5f62\u7d50\u69cb\uff0c\u652f\u63f4\u9ad8\u6548\u5169\u7aef\u8a2a\u554f\u3002</li> <li>\u57fa\u672c\u7528\u6cd5\uff1a\u652f\u63f4\u524d\u5f8c\u63a8\u5165\u8207\u5f48\u51fa\u3002   <pre><code>use std::collections::VecDeque;\nlet mut deque = VecDeque::new();\ndeque.push_back(1);\ndeque.push_back(2);\ndeque.push_front(0);\nprintln!(\"Deque: {:?}\", deque); // \u8f38\u51fa: [0, 1, 2]\nif let Some(back) = deque.pop_back() {\n    println!(\"Popped back: {}\", back); // \u8f38\u51fa: 2\n}\n</code></pre></li> <li>\u61c9\u7528\u5834\u666f\uff1a\u9069\u7528\u65bc\u9700\u8981\u96d9\u7aef\u64cd\u4f5c\u7684\u5834\u666f\uff0c\u5982\u6ed1\u52d5\u7a97\u53e3\u6216\u4efb\u52d9\u4f47\u5217\u3002</li> </ul> <p>\u5efa\u8b70\uff1a<code>VecDeque</code> \u6bd4 <code>LinkedList</code> \u66f4\u5177\u5feb\u53d6\u53cb\u597d\u6027\uff0c\u901a\u5e38\u662f\u96d9\u7aef\u64cd\u4f5c\u7684\u9996\u9078\u3002</p>"},{"location":"data-structures-applications/advanced-data-structures/#4-binaryheapt","title":"4. \u4e8c\u9032\u4f4d\u5806 (<code>BinaryHeap&lt;T&gt;</code>)","text":"<p><code>BinaryHeap&lt;T&gt;</code> \u662f\u57fa\u65bc\u4e8c\u9032\u4f4d\u5806\u5be6\u73fe\u7684\u512a\u5148\u4f47\u5217\uff0c\u652f\u63f4\u9ad8\u6548\u7372\u53d6\u6700\u5927\u6216\u6700\u5c0f\u5143\u7d20\uff1a</p> <ul> <li>\u5e95\u5c64\u6a5f\u5236\uff1a\u4f7f\u7528\u9663\u5217\u8868\u793a\u5b8c\u5168\u4e8c\u9032\u4f4d\u6a39\uff0c\u4fdd\u8b49\u5806\u6027\u8cea\u3002</li> <li>\u57fa\u672c\u7528\u6cd5\uff1a\u652f\u63f4\u63d2\u5165\u8207\u5f48\u51fa\u6700\u5c0f/\u6700\u5927\u5143\u7d20\u3002   <pre><code>use std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::new();\nheap.push(3);\nheap.push(1);\nheap.push(2);\nwhile let Some(val) = heap.pop() {\n    println!(\"Popped: {}\", val); // \u8f38\u51fa: 3, 2, 1 (\u6700\u5927\u5806)\n}\n</code></pre></li> <li>\u61c9\u7528\u5834\u666f\uff1a\u9069\u7528\u65bc\u512a\u5148\u8abf\u5ea6\u5834\u666f\uff0c\u5982\u4efb\u52d9\u512a\u5148\u4f47\u5217\u6216 Dijkstra \u7b97\u6cd5\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u82e5\u9700\u8981\u6700\u5c0f\u5806\uff0c\u53ef\u4f7f\u7528 <code>std::cmp::Reverse</code> \u5305\u88dd\u5143\u7d20\uff1b\u5c0d\u65bc\u8907\u96dc\u512a\u5148\u7d1a\uff0c\u8003\u616e\u81ea\u5b9a\u7fa9\u6bd4\u8f03\u5668\u3002</p>"},{"location":"data-structures-applications/advanced-data-structures/#_4","title":"\u6280\u8853\u6311\u6230\u8207\u89e3\u6c7a\u65b9\u6848","text":"<ul> <li>\u6548\u80fd\u6b0a\u8861\uff1a\u9032\u968e\u8cc7\u6599\u7d50\u69cb\u5728\u7279\u5b9a\u64cd\u4f5c\u4e0a\u9ad8\u6548\uff0c\u4f46\u53ef\u80fd\u5728\u5176\u4ed6\u65b9\u9762\u6709\u4ee3\u50f9\uff1b\u89e3\u6c7a\u65b9\u6848\u662f\u6839\u64da\u5177\u9ad4\u9700\u6c42\u9078\u64c7\u7d50\u69cb\u3002</li> <li>\u8a18\u61b6\u9ad4\u4f7f\u7528\uff1a<code>LinkedList</code> \u7b49\u7d50\u69cb\u53ef\u80fd\u5c0e\u81f4\u8a18\u61b6\u9ad4\u788e\u7247\uff1b\u53ef\u4f7f\u7528 <code>Vec</code> \u6216 <code>VecDeque</code> \u66ff\u4ee3\u3002</li> <li>\u8907\u96dc\u64cd\u4f5c\uff1a\u7bc4\u570d\u67e5\u8a62\u8207\u8fed\u4ee3\u53ef\u80fd\u6d89\u53ca\u591a\u500b\u64cd\u4f5c\uff1b\u5145\u5206\u5229\u7528\u7d50\u69cb\u63d0\u4f9b\u7684\u5c08\u7528\u65b9\u6cd5\u5982 <code>BTreeMap::range()</code>\u3002</li> </ul>"},{"location":"data-structures-applications/advanced-data-structures/#_5","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u7b97\u6cd5\u7df4\u7fd2\uff1a\u4f7f\u7528\u9032\u968e\u8cc7\u6599\u7d50\u69cb\u5be6\u73fe\u7d93\u5178\u7b97\u6cd5\uff0c\u5982 Dijkstra \u6216 Huffman \u7de8\u78bc\u3002</li> <li>\u6e90\u78bc\u5206\u6790\uff1a\u95b1\u8b80 <code>std::collections</code> \u6a21\u7d44\u6e90\u78bc\uff0c\u7406\u89e3\u9032\u968e\u7d50\u69cb\u7684\u5be6\u73fe\u7d30\u7bc0\u3002</li> <li>\u5834\u666f\u6a21\u64ec\uff1a\u6a21\u64ec\u771f\u5be6\u61c9\u7528\u5834\u666f\uff0c\u6bd4\u8f03\u4e0d\u540c\u8cc7\u6599\u7d50\u69cb\u7684\u6548\u80fd\u8868\u73fe\u3002</li> </ul> <p>\u76f8\u95dc\u8cc7\u6e90\uff1a</p> <ul> <li>Rust \u6a19\u6e96\u51fd\u6578\u5eab\u6587\u6a94 (<code>https://doc.rust-lang.org/std/collections/</code>)\uff0c\u63d0\u4f9b\u9032\u968e\u8cc7\u6599\u7d50\u69cb API \u8aaa\u660e\u3002</li> <li>\u7b97\u6cd5\u8207\u8cc7\u6599\u7d50\u69cb\u66f8\u7c4d\uff0c\u5982\u300aIntroduction to Algorithms\u300b\uff0c\u63d0\u4f9b\u7406\u8ad6\u57fa\u790e\u3002</li> </ul>"},{"location":"data-structures-applications/advanced-data-structures/#_6","title":"\u7e3d\u7d50","text":"<p>Rust \u7684\u9032\u968e\u8cc7\u6599\u7d50\u69cb\u5982 <code>BTreeMap</code>\u3001<code>VecDeque</code>\u3001<code>LinkedList</code> \u548c <code>BinaryHeap</code> \u91dd\u5c0d\u7279\u5b9a\u554f\u984c\u63d0\u4f9b\u4e86\u9ad8\u6548\u89e3\u6c7a\u65b9\u6848\u3002</p> <p>\u901a\u904e\u7406\u89e3\u5176\u5e95\u5c64\u6a5f\u5236\u8207\u61c9\u7528\u5834\u666f\uff0c\u60a8\u53ef\u4ee5\u6839\u64da\u9700\u6c42\u9078\u64c7\u6700\u9069\u5408\u7684\u7d50\u69cb\uff0c\u4e26\u5728\u8a2d\u8a08\u8907\u96dc\u61c9\u7528\u6642\u5e73\u8861\u6548\u80fd\u8207\u9748\u6d3b\u6027\u3002</p> <p>\u9019\u4e9b\u5de5\u5177\u662f\u69cb\u5efa\u9ad8\u6548\u7cfb\u7d71\u7684\u91cd\u8981\u7d44\u6210\u90e8\u5206\uff0c\u638c\u63e1\u5b83\u5011\u5c07\u986f\u8457\u63d0\u5347\u60a8\u7684\u7a0b\u5f0f\u8a2d\u8a08\u80fd\u529b\u3002</p>"},{"location":"data-structures-applications/basic-data-structures/","title":"\u8cc7\u6599\u7d50\u69cb\u7684\u61c9\u7528\uff1a\u57fa\u790e\u8cc7\u6599\u7d50\u69cb","text":"<p>Rust \u7684\u6a19\u6e96\u51fd\u6578\u5eab\u63d0\u4f9b\u4e86\u591a\u7a2e\u57fa\u790e\u8cc7\u6599\u7d50\u69cb\uff0c\u9019\u4e9b\u7d50\u69cb\u662f\u69cb\u5efa\u9ad8\u6548\u61c9\u7528\u7a0b\u5f0f\u7684\u57fa\u77f3\u3002</p>"},{"location":"data-structures-applications/basic-data-structures/#_2","title":"\u70ba\u4ec0\u9ebc\u5b78\u7fd2\u57fa\u790e\u8cc7\u6599\u7d50\u69cb\uff1f","text":"<p>\u57fa\u790e\u8cc7\u6599\u7d50\u69cb\u662f\u7a0b\u5f0f\u8a2d\u8a08\u7684\u6838\u5fc3\uff0c\u5b78\u7fd2\u5b83\u5011\u6709\u4ee5\u4e0b\u597d\u8655\uff1a</p> <ul> <li>\u9ad8\u6548\u6578\u64da\u7ba1\u7406\uff1a\u9078\u64c7\u5408\u9069\u7684\u8cc7\u6599\u7d50\u69cb\u80fd\u986f\u8457\u63d0\u5347\u7a0b\u5f0f\u6548\u80fd\u3002</li> <li>\u4ee3\u78bc\u53ef\u8b80\u6027\uff1a\u719f\u6089\u6a19\u6e96\u8cc7\u6599\u7d50\u69cb\u6709\u52a9\u65bc\u7de8\u5beb\u6e05\u6670\u4e14\u4e00\u81f4\u7684\u4ee3\u78bc\u3002</li> <li>\u554f\u984c\u89e3\u6c7a\u80fd\u529b\uff1a\u7406\u89e3\u8cc7\u6599\u7d50\u69cb\u7684\u7279\u6027\u6709\u52a9\u65bc\u89e3\u6c7a\u5404\u7a2e\u7b97\u6cd5\u554f\u984c\u3002</li> </ul> <p>\u672c\u7ae0\u5c07\u805a\u7126\u65bc Rust \u6a19\u6e96\u51fd\u6578\u5eab\u4e2d\u7684\u57fa\u790e\u8cc7\u6599\u7d50\u69cb\u53ca\u5176\u61c9\u7528\u3002</p>"},{"location":"data-structures-applications/basic-data-structures/#_3","title":"\u57fa\u790e\u8cc7\u6599\u7d50\u69cb\u6982\u89bd","text":""},{"location":"data-structures-applications/basic-data-structures/#1-vect","title":"1. \u5411\u91cf (<code>Vec&lt;T&gt;</code>)","text":"<p><code>Vec&lt;T&gt;</code> \u662f Rust \u4e2d\u6700\u5e38\u7528\u7684\u52d5\u614b\u9663\u5217\uff0c\u652f\u63f4\u53ef\u8b8a\u5927\u5c0f\u7684\u9023\u7e8c\u5b58\u5132\uff1a</p> <ul> <li>\u5e95\u5c64\u6a5f\u5236\uff1a<code>Vec</code> \u4f7f\u7528\u5806\u5206\u914d\u7684\u9023\u7e8c\u8a18\u61b6\u9ad4\uff0c\u7576\u5bb9\u91cf\u4e0d\u8db3\u6642\u6703\u91cd\u65b0\u5206\u914d\u4e26\u79fb\u52d5\u6578\u64da\u3002</li> <li>\u57fa\u672c\u7528\u6cd5\uff1a\u652f\u63f4\u63a8\u5165\u3001\u5f48\u51fa\u3001\u7d22\u5f15\u8a2a\u554f\u7b49\u64cd\u4f5c\u3002   <pre><code>let mut vec: Vec&lt;i32&gt; = Vec::new();\nvec.push(1);\nvec.push(2);\nprintln!(\"Vector: {:?}\", vec); // \u8f38\u51fa: [1, 2]\nlet first = vec[0]; // \u7d22\u5f15\u8a2a\u554f\nvec.pop(); // \u79fb\u9664\u6700\u5f8c\u5143\u7d20\nprintln!(\"After pop: {:?}\", vec); // \u8f38\u51fa: [1]\n</code></pre></li> <li>\u61c9\u7528\u5834\u666f\uff1a\u9069\u7528\u65bc\u9700\u8981\u52d5\u614b\u589e\u9577\u7684\u6709\u5e8f\u6578\u64da\u5217\u8868\uff0c\u5982\u4efb\u52d9\u4f47\u5217\u6216\u7d50\u679c\u6536\u96c6\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u82e5\u4e8b\u5148\u77e5\u9053\u5927\u81f4\u5927\u5c0f\uff0c\u4f7f\u7528 <code>Vec::with_capacity()</code> \u9810\u5206\u914d\u5bb9\u91cf\uff0c\u907f\u514d\u983b\u7e41\u91cd\u65b0\u5206\u914d\u3002</p>"},{"location":"data-structures-applications/basic-data-structures/#2-string","title":"2. \u5b57\u4e32 (<code>String</code>)","text":"<p><code>String</code> \u662f Rust \u4e2d\u7528\u65bc\u8655\u7406 UTF-8 \u7de8\u78bc\u6587\u672c\u7684\u53ef\u8b8a\u5b57\u4e32\u985e\u578b\uff1a</p> <ul> <li>\u5e95\u5c64\u6a5f\u5236\uff1a<code>String</code> \u5167\u90e8\u662f\u4e00\u500b <code>Vec&lt;u8&gt;</code>\uff0c\u4fdd\u8b49 UTF-8 \u6709\u6548\u6027\u3002</li> <li>\u57fa\u672c\u7528\u6cd5\uff1a\u652f\u63f4\u62fc\u63a5\u3001\u5207\u7247\u8207\u8f49\u63db\u64cd\u4f5c\u3002   <pre><code>let mut s = String::from(\"Hello\");\ns.push_str(\", World!\");\nprintln!(\"String: {}\", s); // \u8f38\u51fa: Hello, World!\nlet slice = &amp;s[0..5]; // \u5207\u7247\uff0c\u9700\u6ce8\u610f UTF-8 \u908a\u754c\nprintln!(\"Slice: {}\", slice); // \u8f38\u51fa: Hello\n</code></pre></li> <li>\u61c9\u7528\u5834\u666f\uff1a\u9069\u7528\u65bc\u9700\u8981\u52d5\u614b\u69cb\u5efa\u6587\u672c\u7684\u5834\u666f\uff0c\u5982\u65e5\u8a8c\u8a0a\u606f\u6216\u7528\u6236\u8f38\u5165\u8655\u7406\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u5c0d\u65bc\u975c\u614b\u6587\u672c\uff0c\u4f7f\u7528 <code>&amp;str</code> \u5207\u7247\u4ee5\u6e1b\u5c11\u8a18\u61b6\u9ad4\u5206\u914d\uff1b\u64cd\u4f5c\u5927\u91cf\u5b57\u4e32\u6642\uff0c\u8003\u616e\u4f7f\u7528 <code>String::with_capacity()</code>\u3002</p>"},{"location":"data-structures-applications/basic-data-structures/#3-hashmapk-v","title":"3. \u96dc\u6e4a\u8868 (<code>HashMap&lt;K, V&gt;</code>)","text":"<p><code>HashMap&lt;K, V&gt;</code> \u662f\u57fa\u65bc\u96dc\u6e4a\u8868\u7684\u9375\u503c\u5c0d\u5b58\u5132\u7d50\u69cb\uff0c\u652f\u63f4\u5feb\u901f\u67e5\u627e\u8207\u63d2\u5165\uff1a</p> <ul> <li>\u5e95\u5c64\u6a5f\u5236\uff1a\u4f7f\u7528\u96dc\u6e4a\u51fd\u6578\u5c07\u9375\u6620\u5c04\u5230\u5167\u90e8\u9663\u5217\u4f4d\u7f6e\uff0c\u89e3\u6c7a\u885d\u7a81\u901a\u5e38\u4f7f\u7528\u93c8\u7d50\u6cd5\u6216\u958b\u653e\u5b9a\u5740\u6cd5\u3002</li> <li>\u57fa\u672c\u7528\u6cd5\uff1a\u652f\u63f4\u63d2\u5165\u3001\u67e5\u627e\u8207\u8fed\u4ee3\u3002   <pre><code>use std::collections::HashMap;\nlet mut map = HashMap::new();\nmap.insert(\"key1\", 10);\nmap.insert(\"key2\", 20);\nif let Some(value) = map.get(\"key1\") {\n    println!(\"Value: {}\", value); // \u8f38\u51fa: 10\n}\nfor (key, value) in &amp;map {\n    println!(\"{}: {}\", key, value);\n}\n</code></pre></li> <li>\u61c9\u7528\u5834\u666f\uff1a\u9069\u7528\u65bc\u9700\u8981\u5feb\u901f\u67e5\u627e\u7684\u5834\u666f\uff0c\u5982\u7de9\u5b58\u7cfb\u7d71\u6216\u914d\u7f6e\u5b58\u5132\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u82e5\u9375\u7684\u9806\u5e8f\u91cd\u8981\uff0c\u8003\u616e\u4f7f\u7528 <code>BTreeMap</code>\uff1b\u82e5\u6548\u80fd\u654f\u611f\uff0c\u53ef\u81ea\u5b9a\u7fa9\u96dc\u6e4a\u51fd\u6578\u6216\u4f7f\u7528\u7b2c\u4e09\u65b9\u5eab\u3002</p>"},{"location":"data-structures-applications/basic-data-structures/#4-hashsett","title":"4. \u96c6\u5408 (<code>HashSet&lt;T&gt;</code>)","text":"<p><code>HashSet&lt;T&gt;</code> \u662f\u7121\u5e8f\u7684\u552f\u4e00\u5143\u7d20\u96c6\u5408\uff0c\u57fa\u65bc\u96dc\u6e4a\u8868\u5be6\u73fe\uff1a</p> <ul> <li>\u5e95\u5c64\u6a5f\u5236\uff1a\u985e\u4f3c <code>HashMap</code>\uff0c\u4f46\u50c5\u5b58\u5132\u9375\uff0c\u7121\u95dc\u806f\u503c\u3002</li> <li>\u57fa\u672c\u7528\u6cd5\uff1a\u652f\u63f4\u63d2\u5165\u3001\u6aa2\u67e5\u5b58\u5728\u8207\u96c6\u5408\u64cd\u4f5c\u3002   <pre><code>use std::collections::HashSet;\nlet mut set = HashSet::new();\nset.insert(1);\nset.insert(2);\nset.insert(1); // \u91cd\u8907\u5143\u7d20\u4e0d\u6703\u63d2\u5165\nprintln!(\"Set: {:?}\", set); // \u8f38\u51fa: {1, 2} (\u9806\u5e8f\u4e0d\u5b9a)\nif set.contains(&amp;2) {\n    println!(\"Contains 2\");\n}\n</code></pre></li> <li>\u61c9\u7528\u5834\u666f\uff1a\u9069\u7528\u65bc\u53bb\u91cd\u6216\u5feb\u901f\u6210\u54e1\u6aa2\u67e5\uff0c\u5982\u6a19\u7c64\u7cfb\u7d71\u6216\u8a2a\u554f\u63a7\u5236\u5217\u8868\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u82e5\u9700\u8981\u6709\u5e8f\u96c6\u5408\uff0c\u8003\u616e\u4f7f\u7528 <code>BTreeSet</code>\uff1b\u5c0d\u65bc\u5c0f\u898f\u6a21\u6578\u64da\uff0c\u53ef\u76f4\u63a5\u4f7f\u7528 <code>Vec</code> \u8207\u7dda\u6027\u641c\u7d22\u3002</p>"},{"location":"data-structures-applications/basic-data-structures/#_4","title":"\u6280\u8853\u6311\u6230\u8207\u89e3\u6c7a\u65b9\u6848","text":"<ul> <li>\u8a18\u61b6\u9ad4\u5206\u914d\uff1a<code>Vec</code> \u548c <code>String</code> \u7684\u91cd\u65b0\u5206\u914d\u53ef\u80fd\u5c0e\u81f4\u6548\u80fd\u554f\u984c\uff1b\u89e3\u6c7a\u65b9\u6848\u662f\u9810\u5206\u914d\u5bb9\u91cf\u3002</li> <li>UTF-8 \u8655\u7406\uff1a<code>String</code> \u5207\u7247\u64cd\u4f5c\u9700\u6ce8\u610f\u5b57\u5143\u908a\u754c\uff1b\u4f7f\u7528 <code>.chars()</code> \u6216 <code>.bytes()</code> \u9032\u884c\u5b89\u5168\u64cd\u4f5c\u3002</li> <li>\u96dc\u6e4a\u885d\u7a81\uff1a<code>HashMap</code> \u548c <code>HashSet</code> \u5728\u885d\u7a81\u56b4\u91cd\u6642\u6548\u80fd\u4e0b\u964d\uff1b\u53ef\u81ea\u5b9a\u7fa9\u96dc\u6e4a\u51fd\u6578\u6216\u8abf\u6574\u8ca0\u8f09\u56e0\u5b50\u3002</li> </ul>"},{"location":"data-structures-applications/basic-data-structures/#_5","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u5be6\u8e10\u7df4\u7fd2\uff1a\u4f7f\u7528 <code>Vec</code> \u548c <code>HashMap</code> \u5be6\u73fe\u7c21\u55ae\u7684\u6578\u64da\u8655\u7406\u4efb\u52d9\uff0c\u5982\u5b57\u983b\u7d71\u8a08\u3002</li> <li>\u6e90\u78bc\u95b1\u8b80\uff1a\u7814\u7a76 <code>std::vec</code> \u548c <code>std::collections</code> \u6a21\u7d44\u6e90\u78bc\uff0c\u7406\u89e3\u5176\u5be6\u73fe\u7d30\u7bc0\u3002</li> <li>\u6548\u80fd\u6e2c\u8a66\uff1a\u4f7f\u7528 <code>criterion</code> \u6bd4\u8f03\u4e0d\u540c\u8cc7\u6599\u7d50\u69cb\u5728\u7279\u5b9a\u5834\u666f\u4e0b\u7684\u6548\u80fd\u3002</li> </ul> <p>\u76f8\u95dc\u8cc7\u6e90\uff1a</p> <ul> <li>Rust \u6a19\u6e96\u51fd\u6578\u5eab\u6587\u6a94 (<code>https://doc.rust-lang.org/std/</code>)\uff0c\u63d0\u4f9b\u8a73\u7d30 API \u8aaa\u660e\u3002</li> <li>Rust \u7a0b\u5f0f\u8a2d\u8a08\u66f8\u7c4d (<code>https://doc.rust-lang.org/book/</code>)\uff0c\u5305\u542b\u8cc7\u6599\u7d50\u69cb\u57fa\u790e\u6559\u5b78\u3002</li> </ul>"},{"location":"data-structures-applications/basic-data-structures/#_6","title":"\u7e3d\u7d50","text":"<p>Rust \u7684\u57fa\u790e\u8cc7\u6599\u7d50\u69cb\u5982 <code>Vec</code>\u3001<code>String</code>\u3001<code>HashMap</code> \u548c <code>HashSet</code> \u63d0\u4f9b\u4e86\u9ad8\u6548\u4e14\u5b89\u5168\u7684\u6578\u64da\u7ba1\u7406\u80fd\u529b\u3002</p> <p>\u901a\u904e\u7406\u89e3\u5176\u5e95\u5c64\u6a5f\u5236\u8207\u61c9\u7528\u5834\u666f\uff0c\u60a8\u53ef\u4ee5\u6839\u64da\u9700\u6c42\u9078\u64c7\u5408\u9069\u7684\u7d50\u69cb\uff0c\u4e26\u901a\u904e\u9810\u5206\u914d\u8207\u6b63\u78ba\u64cd\u4f5c\u907f\u514d\u5e38\u898b\u6548\u80fd\u554f\u984c\u3002</p> <p>\u9019\u4e9b\u57fa\u790e\u5de5\u5177\u662f\u9032\u968e\u8cc7\u6599\u7d50\u69cb\u8207\u8907\u96dc\u61c9\u7528\u7a0b\u5f0f\u7684\u8d77\u9ede\uff0c\u638c\u63e1\u5b83\u5011\u5c07\u70ba\u5f8c\u7e8c\u5b78\u7fd2\u5960\u5b9a\u5805\u5be6\u57fa\u790e\u3002</p>"},{"location":"data-structures-applications/data-structures-ownership/","title":"\u8cc7\u6599\u7d50\u69cb\u7684\u61c9\u7528\uff1a\u8cc7\u6599\u7d50\u69cb\u8207\u6240\u6709\u6b0a","text":"<p>Rust \u7684\u6240\u6709\u6b0a\u7cfb\u7d71\u662f\u5176\u8a18\u61b6\u9ad4\u5b89\u5168\u7684\u6838\u5fc3\u7279\u6027\uff0c\u6df1\u523b\u5f71\u97ff\u8cc7\u6599\u7d50\u69cb\u7684\u8a2d\u8a08\u8207\u4f7f\u7528\u3002</p>"},{"location":"data-structures-applications/data-structures-ownership/#_2","title":"\u70ba\u4ec0\u9ebc\u5b78\u7fd2\u8cc7\u6599\u7d50\u69cb\u8207\u6240\u6709\u6b0a\uff1f","text":"<p>\u7406\u89e3\u8cc7\u6599\u7d50\u69cb\u8207\u6240\u6709\u6b0a\u7684\u95dc\u4fc2\u6709\u4ee5\u4e0b\u597d\u8655\uff1a</p> <ul> <li>\u8a18\u61b6\u9ad4\u5b89\u5168\uff1a\u9075\u5faa\u6240\u6709\u6b0a\u898f\u5247\uff0c\u907f\u514d\u904b\u884c\u6642\u932f\u8aa4\u8207\u8cc7\u6599\u7af6\u722d\u3002</li> <li>\u9ad8\u6548\u8a2d\u8a08\uff1a\u5229\u7528\u6240\u6709\u6b0a\u7279\u6027\u512a\u5316\u8cc7\u6599\u7d50\u69cb\u5be6\u73fe\u3002</li> <li>\u4e26\u767c\u80fd\u529b\uff1a\u7d50\u5408\u6240\u6709\u6b0a\u8207\u501f\u7528\uff0c\u8a2d\u8a08\u5b89\u5168\u7684\u4e26\u767c\u8cc7\u6599\u7d50\u69cb\u3002</li> </ul> <p>\u672c\u7ae0\u5c07\u805a\u7126\u65bc\u6240\u6709\u6b0a\u7cfb\u7d71\u5c0d\u8cc7\u6599\u7d50\u69cb\u8a2d\u8a08\u8207\u4f7f\u7528\u7684\u5f71\u97ff\u3002</p>"},{"location":"data-structures-applications/data-structures-ownership/#_3","title":"\u8cc7\u6599\u7d50\u69cb\u8207\u6240\u6709\u6b0a\u7684\u4ea4\u4e92","text":""},{"location":"data-structures-applications/data-structures-ownership/#1","title":"1. \u6240\u6709\u6b0a\u8207\u79fb\u52d5","text":"<p>Rust \u7684\u6240\u6709\u6b0a\u898f\u5247\u8981\u6c42\u6bcf\u500b\u503c\u53ea\u6709\u4e00\u500b\u53ef\u8b8a\u64c1\u6709\u8005\uff0c\u8cc7\u6599\u7d50\u69cb\u64cd\u4f5c\u9700\u9075\u5faa\u6b64\u898f\u5247\uff1a</p> <ul> <li>\u79fb\u52d5\u8a9e\u7fa9\uff1a\u5c07\u6578\u64da\u63d2\u5165\u8cc7\u6599\u7d50\u69cb\u901a\u5e38\u6d89\u53ca\u6240\u6709\u6b0a\u8f49\u79fb\u3002   <pre><code>let mut vec = Vec::new();\nlet s = String::from(\"Hello\");\nvec.push(s); // \u6240\u6709\u6b0a\u79fb\u52d5\u5230 vec \u4e2d\n// println!(\"s: {}\", s); // \u932f\u8aa4\uff1as \u5df2\u79fb\u52d5\n</code></pre></li> <li>\u61c9\u7528\u5834\u666f\uff1a\u8a2d\u8a08\u8cc7\u6599\u7d50\u69cb\u6642\uff0c\u9700\u8003\u616e\u662f\u5426\u9700\u8981\u64c1\u6709\u6578\u64da\uff0c\u6216\u50c5\u501f\u7528\u6578\u64da\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u82e5\u8cc7\u6599\u7d50\u69cb\u50c5\u9700\u81e8\u6642\u8a2a\u554f\u6578\u64da\uff0c\u4f7f\u7528\u501f\u7528\u800c\u975e\u79fb\u52d5\uff1b\u82e5\u9700\u9577\u671f\u5b58\u5132\uff0c\u660e\u78ba\u6240\u6709\u6b0a\u8f49\u79fb\u3002</p>"},{"location":"data-structures-applications/data-structures-ownership/#2","title":"2. \u501f\u7528\u8207\u8cc7\u6599\u7d50\u69cb\u64cd\u4f5c","text":"<p>\u501f\u7528\u5141\u8a31\u8cc7\u6599\u7d50\u69cb\u5728\u4e0d\u64c1\u6709\u6578\u64da\u7684\u60c5\u6cc1\u4e0b\u8a2a\u554f\u6578\u64da\uff0c\u4f46\u9700\u9075\u5faa\u501f\u7528\u898f\u5247\uff1a</p> <ul> <li>\u4e0d\u53ef\u8b8a\u501f\u7528\uff1a\u5141\u8a31\u591a\u500b\u8b80\u53d6\u8005\u540c\u6642\u8a2a\u554f\u3002   <pre><code>let vec = vec![1, 2, 3];\nlet first = &amp;vec[0]; // \u4e0d\u53ef\u8b8a\u501f\u7528\nprintln!(\"First: {}\", first);\n// vec.push(4); // \u932f\u8aa4\uff1a\u4e0d\u53ef\u8b8a\u501f\u7528\u671f\u9593\u7121\u6cd5\u4fee\u6539\n</code></pre></li> <li>\u53ef\u8b8a\u501f\u7528\uff1a\u50c5\u5141\u8a31\u55ae\u4e00\u4fee\u6539\u8005\u3002   <pre><code>let mut vec = vec![1, 2, 3];\nlet first = &amp;mut vec[0]; // \u53ef\u8b8a\u501f\u7528\n*first = 10;\nprintln!(\"Updated vec: {:?}\", vec); // \u8f38\u51fa: [10, 2, 3]\n</code></pre></li> <li>\u61c9\u7528\u5834\u666f\uff1a\u8a2d\u8a08 API \u6642\uff0c\u512a\u5148\u63d0\u4f9b\u501f\u7528\u63a5\u53e3\uff0c\u6e1b\u5c11\u4e0d\u5fc5\u8981\u7684\u6240\u6709\u6b0a\u8f49\u79fb\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u8a2d\u8a08\u8cc7\u6599\u7d50\u69cb\u65b9\u6cd5\u6642\uff0c\u660e\u78ba\u5340\u5206\u501f\u7528\u8207\u6240\u6709\u6b0a\u8f49\u79fb\uff0c\u907f\u514d\u610f\u5916\u79fb\u52d5\u6216\u8907\u96dc\u501f\u7528\u885d\u7a81\u3002</p>"},{"location":"data-structures-applications/data-structures-ownership/#3","title":"3. \u667a\u6167\u6307\u91dd\u8207\u8cc7\u6599\u7d50\u69cb","text":"<p>\u667a\u6167\u6307\u91dd\u5982 <code>Rc</code> \u548c <code>Arc</code> \u63d0\u4f9b\u4e86\u5171\u4eab\u6240\u6709\u6b0a\uff0c\u9069\u7528\u65bc\u8907\u96dc\u8cc7\u6599\u7d50\u69cb\uff1a</p> <ul> <li>\u5f15\u7528\u8a08\u6578 (<code>Rc</code> \u548c <code>Arc</code>)\uff1a\u5141\u8a31\u591a\u500b\u64c1\u6709\u8005\u5171\u4eab\u6578\u64da\u3002   <pre><code>use std::rc::Rc;\nlet data = Rc::new(String::from(\"Shared\"));\nlet clone1 = Rc::clone(&amp;data);\nlet clone2 = Rc::clone(&amp;data);\nprintln!(\"Clone1: {}\", clone1);\nprintln!(\"Clone2: {}\", clone2);\n</code></pre></li> <li>\u5167\u90e8\u53ef\u8b8a\u6027 (<code>RefCell</code> \u548c <code>Mutex</code>)\uff1a\u5141\u8a31\u5728\u5171\u4eab\u6240\u6709\u6b0a\u4e0b\u4fee\u6539\u6578\u64da\u3002   <pre><code>use std::cell::RefCell;\nlet data = Rc::new(RefCell::new(0));\nlet data_clone = Rc::clone(&amp;data);\n*data.borrow_mut() += 1;\n*data_clone.borrow_mut() += 2;\nprintln!(\"Value: {}\", *data.borrow()); // \u8f38\u51fa: 3\n</code></pre></li> <li>\u61c9\u7528\u5834\u666f\uff1a\u9069\u7528\u65bc\u5716\u5f62\u7d50\u69cb\u6216\u6a39\u5f62\u7d50\u69cb\uff0c\u9700\u591a\u500b\u7bc0\u9ede\u5171\u4eab\u540c\u4e00\u6578\u64da\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u5728\u55ae\u57f7\u884c\u7dd2\u4e2d\u4f7f\u7528 <code>Rc&lt;RefCell&lt;_&gt;&gt;</code>\uff0c\u5728\u591a\u57f7\u884c\u7dd2\u4e2d\u4f7f\u7528 <code>Arc&lt;Mutex&lt;_&gt;&gt;</code> \u6216 <code>Arc&lt;RwLock&lt;_&gt;&gt;</code>\uff0c\u907f\u514d\u904b\u884c\u6642\u932f\u8aa4\u3002</p>"},{"location":"data-structures-applications/data-structures-ownership/#4","title":"4. \u6240\u6709\u6b0a\u8207\u4e26\u767c\u8cc7\u6599\u7d50\u69cb","text":"<p>Rust \u7684\u6240\u6709\u6b0a\u7cfb\u7d71\u8207\u578b\u5225\u7279\u5fb5\u5982 <code>Send</code> \u548c <code>Sync</code> \u4fdd\u8b49\u4e26\u767c\u8cc7\u6599\u7d50\u69cb\u7684\u5b89\u5168\u6027\uff1a</p> <ul> <li>\u7279\u5fb5\u9650\u5236\uff1a\u53ea\u6709\u5be6\u73fe <code>Send</code> \u7684\u985e\u578b\u53ef\u8de8\u57f7\u884c\u7dd2\u79fb\u52d5\uff0c\u5be6\u73fe <code>Sync</code> \u7684\u985e\u578b\u53ef\u8de8\u57f7\u884c\u7dd2\u5171\u4eab\u3002   <pre><code>use std::sync::{Arc, Mutex};\nuse std::thread;\nlet data = Arc::new(Mutex::new(0));\nlet data_clone = Arc::clone(&amp;data);\nlet handle = thread::spawn(move || {\n    let mut guard = data_clone.lock().unwrap();\n    *guard += 1;\n});\nhandle.join().unwrap();\nprintln!(\"Value: {}\", *data.lock().unwrap()); // \u8f38\u51fa: 1\n</code></pre></li> <li>\u61c9\u7528\u5834\u666f\uff1a\u8a2d\u8a08\u4e26\u767c\u8cc7\u6599\u7d50\u69cb\u6642\uff0c\u9700\u4fdd\u8b49\u6578\u64da\u7b26\u5408 <code>Send</code> \u548c <code>Sync</code> \u8981\u6c42\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u4f7f\u7528 <code>Arc</code> \u8207\u540c\u6b65\u539f\u8a9e\u8a2d\u8a08\u4e26\u767c\u8cc7\u6599\u7d50\u69cb\uff0c\u907f\u514d\u76f4\u63a5\u4f7f\u7528\u88f8\u6307\u91dd\u6216\u4e0d\u5b89\u5168\u4ee3\u78bc\u3002</p>"},{"location":"data-structures-applications/data-structures-ownership/#5","title":"5. \u81ea\u5b9a\u7fa9\u8cc7\u6599\u7d50\u69cb\u8207\u6240\u6709\u6b0a","text":"<p>\u8a2d\u8a08\u81ea\u5b9a\u7fa9\u8cc7\u6599\u7d50\u69cb\u6642\uff0c\u9700\u8003\u616e\u6240\u6709\u6b0a\u8207\u751f\u547d\u9031\u671f\u7ba1\u7406\uff1a</p> <ul> <li>\u7d50\u69cb\u8a2d\u8a08\uff1a\u660e\u78ba\u5b57\u6bb5\u7684\u6240\u6709\u6b0a\uff0c\u662f\u5426\u9700\u8981\u501f\u7528\u6216\u5171\u4eab\u3002   <pre><code>struct Node {\n    value: i32,\n    next: Option&lt;Box&lt;Node&gt;&gt;,\n}\nlet mut head = Node { value: 1, next: None };\nhead.next = Some(Box::new(Node { value: 2, next: None }));\n</code></pre></li> <li>\u61c9\u7528\u5834\u666f\uff1a\u81ea\u5b9a\u7fa9\u7d50\u69cb\u9069\u7528\u65bc\u7279\u5b9a\u554f\u984c\uff0c\u5982\u6a39\u3001\u5716\u6216\u81ea\u5b9a\u7fa9\u7de9\u5b58\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u8a2d\u8a08\u81ea\u5b9a\u7fa9\u7d50\u69cb\u6642\uff0c\u8003\u616e\u5be6\u73fe <code>Drop</code> \u7279\u5fb5\u6e05\u7406\u8cc7\u6e90\uff0c\u4e26\u63d0\u4f9b\u5b89\u5168\u7684\u501f\u7528\u63a5\u53e3\u3002</p>"},{"location":"data-structures-applications/data-structures-ownership/#_4","title":"\u6280\u8853\u6311\u6230\u8207\u89e3\u6c7a\u65b9\u6848","text":"<ul> <li>\u501f\u7528\u885d\u7a81\uff1a\u8907\u96dc\u8cc7\u6599\u7d50\u69cb\u53ef\u80fd\u5c0e\u81f4\u501f\u7528\u6aa2\u67e5\u5668\u5831\u932f\uff1b\u89e3\u6c7a\u65b9\u6848\u662f\u91cd\u69cb\u4ee3\u78bc\uff0c\u7e2e\u77ed\u501f\u7528\u751f\u547d\u9031\u671f\u3002</li> <li>\u5faa\u74b0\u5f15\u7528\uff1a\u4f7f\u7528 <code>Rc</code> \u6216 <code>Arc</code> \u53ef\u80fd\u5c0e\u81f4\u8a18\u61b6\u9ad4\u6d29\u6f0f\uff1b\u53ef\u4f7f\u7528 <code>Weak</code> \u6307\u91dd\u6253\u7834\u5faa\u74b0\u3002</li> <li>\u4e26\u767c\u5b89\u5168\uff1a\u591a\u57f7\u884c\u7dd2\u74b0\u5883\u4e0b\u8cc7\u6599\u7d50\u69cb\u53ef\u80fd\u5f15\u5165\u8cc7\u6599\u7af6\u722d\uff1b\u4f7f\u7528\u540c\u6b65\u539f\u8a9e\u6216\u7121\u9396\u8a2d\u8a08\u89e3\u6c7a\u3002</li> </ul>"},{"location":"data-structures-applications/data-structures-ownership/#_5","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u5be6\u8e10\u7df4\u7fd2\uff1a\u5be6\u73fe\u81ea\u5b9a\u7fa9\u8cc7\u6599\u7d50\u69cb\uff0c\u5982\u9023\u7d50\u4e32\u5217\u6216\u6a39\uff0c\u7406\u89e3\u6240\u6709\u6b0a\u7ba1\u7406\u3002</li> <li>\u5de5\u5177\u4f7f\u7528\uff1a\u4f7f\u7528 <code>cargo check</code> \u6216 <code>cargo clippy</code> \u6aa2\u6e2c\u6f5b\u5728\u7684\u6240\u6709\u6b0a\u554f\u984c\u3002</li> <li>\u9032\u968e\u95b1\u8b80\uff1a\u5b78\u7fd2 Rust \u6a19\u6e96\u51fd\u6578\u5eab\u4e2d\u8cc7\u6599\u7d50\u69cb\u7684\u5be6\u73fe\uff0c\u7406\u89e3\u5176\u6240\u6709\u6b0a\u8a2d\u8a08\u3002</li> </ul> <p>\u76f8\u95dc\u8cc7\u6e90\uff1a</p> <ul> <li>Rust \u7a0b\u5f0f\u8a2d\u8a08\u66f8\u7c4d (<code>https://doc.rust-lang.org/book/ch15-00-smart-pointers.html</code>)\uff0c\u4ecb\u7d39\u667a\u6167\u6307\u91dd\u3002</li> <li>Rust \u6240\u6709\u6b0a\u6587\u6a94 (<code>https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html</code>)\uff0c\u6df1\u5165\u6240\u6709\u6b0a\u6982\u5ff5\u3002</li> </ul>"},{"location":"data-structures-applications/data-structures-ownership/#_6","title":"\u7e3d\u7d50","text":"<p>Rust \u7684\u6240\u6709\u6b0a\u7cfb\u7d71\u6df1\u523b\u5f71\u97ff\u8cc7\u6599\u7d50\u69cb\u7684\u8a2d\u8a08\u8207\u4f7f\u7528\uff0c\u901a\u904e\u7406\u89e3\u79fb\u52d5\u3001\u501f\u7528\u8207\u667a\u6167\u6307\u91dd\uff0c\u60a8\u53ef\u4ee5\u8a2d\u8a08\u51fa\u5b89\u5168\u4e14\u9ad8\u6548\u7684\u8cc7\u6599\u7d50\u69cb\u3002</p> <p>\u7d50\u5408\u4e26\u767c\u7279\u5fb5\u8207\u81ea\u5b9a\u7fa9\u7d50\u69cb\uff0c\u60a8\u5c07\u80fd\u5728\u8907\u96dc\u61c9\u7528\u4e2d\u5145\u5206\u5229\u7528 Rust \u7684\u8a18\u61b6\u9ad4\u5b89\u5168\u512a\u52e2\u3002</p> <p>\u638c\u63e1\u8cc7\u6599\u7d50\u69cb\u8207\u6240\u6709\u6b0a\u7684\u4ea4\u4e92\uff0c\u662f\u69cb\u5efa\u53ef\u9760 Rust \u7a0b\u5f0f\u7684\u91cd\u8981\u4e00\u6b65\u3002</p>"},{"location":"data-structures-applications/performance-optimization/","title":"\u8cc7\u6599\u7d50\u69cb\u7684\u61c9\u7528\uff1a\u6548\u80fd\u512a\u5316\u6280\u5de7","text":"<p>Rust \u63d0\u4f9b\u4e86\u9ad8\u6548\u7684\u8cc7\u6599\u7d50\u69cb\u8207\u5f37\u5927\u7684\u7de8\u8b6f\u5668\u512a\u5316\u80fd\u529b\uff0c\u4f46\u6548\u80fd\u512a\u5316\u4ecd\u9700\u958b\u767c\u8005\u6839\u64da\u61c9\u7528\u5834\u666f\u9078\u64c7\u5408\u9069\u7684\u5de5\u5177\u8207\u7b56\u7565\u3002</p>"},{"location":"data-structures-applications/performance-optimization/#_2","title":"\u70ba\u4ec0\u9ebc\u5b78\u7fd2\u6548\u80fd\u512a\u5316\u6280\u5de7\uff1f","text":"<p>\u6548\u80fd\u512a\u5316\u5c0d\u73fe\u4ee3\u61c9\u7528\u81f3\u95dc\u91cd\u8981\uff0c\u5b78\u7fd2\u76f8\u95dc\u6280\u5de7\u6709\u4ee5\u4e0b\u597d\u8655\uff1a</p> <ul> <li>\u63d0\u5347\u57f7\u884c\u901f\u5ea6\uff1a\u6e1b\u5c11\u4e0d\u5fc5\u8981\u7684\u8a08\u7b97\u8207\u8a18\u61b6\u9ad4\u64cd\u4f5c\u3002</li> <li>\u964d\u4f4e\u8cc7\u6e90\u6d88\u8017\uff1a\u512a\u5316\u8a18\u61b6\u9ad4\u8207 CPU \u4f7f\u7528\uff0c\u652f\u63f4\u66f4\u5927\u898f\u6a21\u61c9\u7528\u3002</li> <li>\u4f7f\u7528\u8005\u9ad4\u9a57\uff1a\u9ad8\u6548\u7a0b\u5f0f\u63d0\u4f9b\u66f4\u5feb\u7684\u97ff\u61c9\uff0c\u63d0\u5347\u4f7f\u7528\u8005\u6eff\u610f\u5ea6\u3002</li> </ul> <p>\u672c\u7ae0\u5c07\u805a\u7126\u65bc Rust \u4e2d\u8cc7\u6599\u7d50\u69cb\u7684\u6548\u80fd\u512a\u5316\u7b56\u7565\u8207\u5be6\u8e10\u3002</p>"},{"location":"data-structures-applications/performance-optimization/#_3","title":"\u6548\u80fd\u512a\u5316\u6280\u5de7","text":""},{"location":"data-structures-applications/performance-optimization/#1","title":"1. \u9078\u64c7\u5408\u9069\u7684\u8cc7\u6599\u7d50\u69cb","text":"<p>\u4e0d\u540c\u7684\u8cc7\u6599\u7d50\u69cb\u91dd\u5c0d\u4e0d\u540c\u64cd\u4f5c\u63d0\u4f9b\u4e86\u512a\u5316\uff0c\u9078\u64c7\u5408\u9069\u7684\u7d50\u69cb\u662f\u6548\u80fd\u512a\u5316\u7684\u7b2c\u4e00\u6b65\uff1a</p> <ul> <li>\u64cd\u4f5c\u7279\u6027\uff1a\u6839\u64da\u4e3b\u8981\u64cd\u4f5c\u9078\u64c7\u7d50\u69cb\uff0c\u4f8b\u5982\u983b\u7e41\u67e5\u627e\u4f7f\u7528 <code>HashMap</code>\uff0c\u9700\u8981\u6709\u5e8f\u4f7f\u7528 <code>BTreeMap</code>\u3002   <pre><code>use std::collections::{HashMap, BTreeMap};\nlet mut hash_map = HashMap::new();\nlet mut btree_map = BTreeMap::new();\nfor i in 0..1000 {\n    hash_map.insert(i, i * 2); // \u5feb\u901f\u63d2\u5165\n    btree_map.insert(i, i * 2); // \u63d2\u5165\u7a0d\u6162\u4f46\u6709\u5e8f\n}\n</code></pre></li> <li>\u8a18\u61b6\u9ad4\u8003\u91cf\uff1a<code>Vec</code> \u6bd4 <code>LinkedList</code> \u66f4\u5177\u5feb\u53d6\u53cb\u597d\u6027\uff0c\u9069\u5408\u5927\u591a\u6578\u5834\u666f\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u5206\u6790\u61c9\u7528\u9700\u6c42\uff0c\u512a\u5148\u9078\u64c7\u64cd\u4f5c\u6642\u9593\u8907\u96dc\u5ea6\u6700\u4f4e\u7684\u7d50\u69cb\uff0c\u907f\u514d\u904e\u5ea6\u5de5\u7a0b\u5316\u3002</p>"},{"location":"data-structures-applications/performance-optimization/#2","title":"2. \u8a18\u61b6\u9ad4\u7ba1\u7406\u8207\u5bb9\u91cf\u9810\u5206\u914d","text":"<p>Rust \u7684\u8cc7\u6599\u7d50\u69cb\u5982 <code>Vec</code> \u548c <code>String</code> \u5728\u589e\u9577\u6642\u53ef\u80fd\u91cd\u65b0\u5206\u914d\u8a18\u61b6\u9ad4\uff0c\u5c0e\u81f4\u6548\u80fd\u4e0b\u964d\uff1a</p> <ul> <li>\u9810\u5206\u914d\u5bb9\u91cf\uff1a\u4f7f\u7528 <code>with_capacity</code> \u907f\u514d\u983b\u7e41\u91cd\u65b0\u5206\u914d\u3002   <pre><code>let mut vec = Vec::with_capacity(1000); // \u9810\u5206\u914d\u7a7a\u9593\nfor i in 0..1000 {\n    vec.push(i);\n}\n// \u7121\u91cd\u65b0\u5206\u914d\uff0c\u6548\u80fd\u66f4\u9ad8\n</code></pre></li> <li>\u7e2e\u6e1b\u5bb9\u91cf\uff1a\u4f7f\u7528 <code>shrink_to_fit</code> \u91cb\u653e\u672a\u4f7f\u7528\u8a18\u61b6\u9ad4\u3002   <pre><code>let mut vec = Vec::with_capacity(1000);\nvec.push(1);\nvec.shrink_to_fit(); // \u91cb\u653e\u591a\u9918\u5bb9\u91cf\n</code></pre></li> </ul> <p>\u5efa\u8b70\uff1a\u5728\u8655\u7406\u5927\u898f\u6a21\u6578\u64da\u6642\uff0c\u6839\u64da\u4f30\u8a08\u5927\u5c0f\u9810\u5206\u914d\u5bb9\u91cf\uff0c\u907f\u514d\u6210\u9577\u6642\u7684\u8a18\u61b6\u9ad4\u79fb\u52d5\u6210\u672c\u3002</p>"},{"location":"data-structures-applications/performance-optimization/#3","title":"3. \u8fed\u4ee3\u8207\u8a2a\u554f\u512a\u5316","text":"<p>\u8fed\u4ee3\u8207\u6578\u64da\u8a2a\u554f\u662f\u5e38\u898b\u64cd\u4f5c\uff0c\u512a\u5316\u5b83\u5011\u80fd\u986f\u8457\u63d0\u5347\u6548\u80fd\uff1a</p> <ul> <li>\u907f\u514d\u4e0d\u5fc5\u8981\u8907\u88fd\uff1a\u4f7f\u7528\u5f15\u7528\u8fed\u4ee3\uff0c\u907f\u514d\u79fb\u52d5\u6578\u64da\u3002   <pre><code>let vec = vec![1, 2, 3, 4, 5];\nfor &amp;item in &amp;vec { // \u4f7f\u7528\u5f15\u7528\uff0c\u907f\u514d\u8907\u88fd\n    println!(\"Item: {}\", item);\n}\n</code></pre></li> <li>\u6279\u6b21\u8655\u7406\uff1a\u5c07\u6578\u64da\u5206\u584a\u8655\u7406\uff0c\u63d0\u5347\u5feb\u53d6\u547d\u4e2d\u7387\u3002   <pre><code>let vec = vec![1; 10000];\nfor chunk in vec.chunks(100) { // \u5206\u584a\u8655\u7406\n    let sum: i32 = chunk.iter().sum();\n    println!(\"Chunk sum: {}\", sum);\n}\n</code></pre></li> </ul> <p>\u5efa\u8b70\uff1a\u4f7f\u7528\u8fed\u4ee3\u5668\u65b9\u6cd5\u5982 <code>map</code>\u3001<code>filter</code> \u66ff\u4ee3\u986f\u5f0f\u5faa\u74b0\uff0c\u5145\u5206\u5229\u7528\u7de8\u8b6f\u5668\u512a\u5316\u3002</p>"},{"location":"data-structures-applications/performance-optimization/#4","title":"4. \u4e26\u767c\u8207\u8cc7\u6599\u7d50\u69cb\u6548\u80fd","text":"<p>\u4e26\u767c\u8a2d\u8a08\u5c0d\u8cc7\u6599\u7d50\u69cb\u6548\u80fd\u6709\u986f\u8457\u5f71\u97ff\uff0c\u9700\u5e73\u8861\u5b89\u5168\u8207\u901f\u5ea6\uff1a</p> <ul> <li>\u6e1b\u5c11\u9396\u722d\u7528\uff1a\u4f7f\u7528\u7d30\u7c92\u5ea6\u9396\u6216\u7121\u9396\u7d50\u69cb\u3002   <pre><code>use std::sync::{Arc, Mutex};\nuse std::thread;\nlet data = Arc::new(Mutex::new(vec![0; 100]));\nlet mut handles = vec![];\nfor _ in 0..10 {\n    let data = Arc::clone(&amp;data);\n    handles.push(thread::spawn(move || {\n        let mut guard = data.lock().unwrap();\n        for item in guard.iter_mut() {\n            *item += 1;\n        }\n    }));\n}\nfor handle in handles {\n    handle.join().unwrap();\n}\n</code></pre></li> <li>\u4f7f\u7528\u539f\u5b50\u64cd\u4f5c\uff1a\u5c0d\u65bc\u7c21\u55ae\u8a08\u6578\u6216\u6a19\u8a8c\uff0c\u4f7f\u7528 <code>AtomicUsize</code> \u66ff\u4ee3\u9396\u3002   <pre><code>use std::sync::atomic::{AtomicUsize, Ordering};\nlet counter = AtomicUsize::new(0);\ncounter.fetch_add(1, Ordering::Relaxed); // \u7121\u9396\u64cd\u4f5c\n</code></pre></li> </ul> <p>\u5efa\u8b70\uff1a\u512a\u5148\u4f7f\u7528\u7121\u9396\u8a2d\u8a08\u6216\u5916\u90e8\u5eab\u5982 <code>crossbeam</code>\uff0c\u6e1b\u5c11\u540c\u6b65\u958b\u92b7\u3002</p>"},{"location":"data-structures-applications/performance-optimization/#5","title":"5. \u57fa\u6e96\u6e2c\u8a66\u8207\u5206\u6790","text":"<p>\u6548\u80fd\u512a\u5316\u9700\u57fa\u65bc\u6578\u64da\uff0c\u4f7f\u7528\u57fa\u6e96\u6e2c\u8a66\u5de5\u5177\u8b58\u5225\u74f6\u9838\uff1a</p> <ul> <li>\u57fa\u6e96\u6e2c\u8a66\uff1a\u4f7f\u7528 <code>criterion</code> \u5eab\u9032\u884c\u5fae\u57fa\u6e96\u6e2c\u8a66\u3002   <pre><code>use criterion::{black_box, criterion_group, criterion_main, Criterion};\nfn benchmark_vec_push(c: &amp;mut Criterion) {\n    c.bench_function(\"vec_push\", |b| {\n        b.iter(|| {\n            let mut vec = Vec::new();\n            for i in 0..1000 {\n                vec.push(black_box(i));\n            }\n        });\n    });\n}\ncriterion_group!(benches, benchmark_vec_push);\ncriterion_main!(benches);\n</code></pre></li> <li>\u5206\u6790\u5de5\u5177\uff1a\u4f7f\u7528 <code>perf</code> \u6216 <code>flamegraph</code> \u5206\u6790\u7a0b\u5f0f\u71b1\u9ede\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u5b9a\u671f\u9032\u884c\u57fa\u6e96\u6e2c\u8a66\uff0c\u6bd4\u8f03\u4e0d\u540c\u8cc7\u6599\u7d50\u69cb\u8207\u5be6\u73fe\u65b9\u5f0f\uff0c\u78ba\u4fdd\u512a\u5316\u6709\u6548\u3002</p>"},{"location":"data-structures-applications/performance-optimization/#_4","title":"\u6280\u8853\u6311\u6230\u8207\u89e3\u6c7a\u65b9\u6848","text":"<ul> <li>\u904e\u5ea6\u512a\u5316\uff1a\u904e\u65e9\u512a\u5316\u53ef\u80fd\u5c0e\u81f4\u4ee3\u78bc\u8907\u96dc\u6027\u589e\u52a0\uff1b\u89e3\u6c7a\u65b9\u6848\u662f\u5148\u78ba\u4fdd\u6b63\u78ba\u6027\uff0c\u518d\u57fa\u65bc\u6e2c\u8a66\u512a\u5316\u3002</li> <li>\u8a18\u61b6\u9ad4\u788e\u7247\uff1a\u983b\u7e41\u5206\u914d\u8207\u91cb\u653e\u53ef\u80fd\u5c0e\u81f4\u788e\u7247\uff1b\u53ef\u4f7f\u7528\u9810\u5206\u914d\u6216\u81ea\u5b9a\u7fa9\u5206\u914d\u5668\u3002</li> <li>\u4e26\u767c\u74f6\u9838\uff1a\u591a\u57f7\u884c\u7dd2\u722d\u7528\u53ef\u80fd\u62b5\u6d88\u4e26\u767c\u6536\u76ca\uff1b\u4f7f\u7528\u4efb\u52d9\u5206\u7247\u6216\u7121\u9396\u8a2d\u8a08\u89e3\u6c7a\u3002</li> </ul>"},{"location":"data-structures-applications/performance-optimization/#_5","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u5be6\u8e10\u6e2c\u8a66\uff1a\u5c0d\u540c\u4e00\u554f\u984c\u5617\u8a66\u4e0d\u540c\u8cc7\u6599\u7d50\u69cb\uff0c\u6bd4\u8f03\u6548\u80fd\u5dee\u7570\u3002</li> <li>\u5de5\u5177\u5b78\u7fd2\uff1a\u719f\u6089 <code>criterion</code> \u8207 <code>perf</code> \u7b49\u5de5\u5177\uff0c\u638c\u63e1\u6548\u80fd\u5206\u6790\u65b9\u6cd5\u3002</li> <li>\u793e\u7fa4\u8cc7\u6e90\uff1a\u53c3\u8207 Rust \u793e\u7fa4\uff0c\u5b78\u7fd2\u771f\u5be6\u5c08\u6848\u4e2d\u7684\u512a\u5316\u6280\u5de7\u3002</li> </ul> <p>\u76f8\u95dc\u8cc7\u6e90\uff1a</p> <ul> <li>Criterion \u5eab\u6587\u6a94 (<code>https://crates.io/crates/criterion</code>)\uff0c\u7528\u65bc\u57fa\u6e96\u6e2c\u8a66\u3002</li> <li>Rust \u6548\u80fd\u512a\u5316\u6307\u5357 (<code>https://nnethercote.github.io/perf-book/</code>)\uff0c\u63d0\u4f9b\u8a73\u7d30\u5efa\u8b70\u3002</li> </ul>"},{"location":"data-structures-applications/performance-optimization/#_6","title":"\u7e3d\u7d50","text":"<p>Rust \u4e2d\u7684\u8cc7\u6599\u7d50\u69cb\u6548\u80fd\u512a\u5316\u6d89\u53ca\u7d50\u69cb\u9078\u64c7\u3001\u8a18\u61b6\u9ad4\u7ba1\u7406\u3001\u8fed\u4ee3\u512a\u5316\u8207\u4e26\u767c\u8a2d\u8a08\u7b49\u591a\u500b\u65b9\u9762\u3002</p> <p>\u901a\u904e\u7406\u89e3\u8cc7\u6599\u7d50\u69cb\u7279\u6027\u8207\u61c9\u7528\u5834\u666f\uff0c\u4e26\u7d50\u5408\u57fa\u6e96\u6e2c\u8a66\u8207\u5206\u6790\u5de5\u5177\uff0c\u60a8\u53ef\u4ee5\u69cb\u5efa\u9ad8\u6548\u4e14\u53ef\u9760\u7684\u61c9\u7528\u7a0b\u5f0f\u3002</p> <p>\u6548\u80fd\u512a\u5316\u662f\u4e00\u500b\u6301\u7e8c\u904e\u7a0b\uff0c\u9700\u5728\u6b63\u78ba\u6027\u8207\u53ef\u7dad\u8b77\u6027\u9593\u627e\u5230\u5e73\u8861\uff0c\u78ba\u4fdd\u7a0b\u5f0f\u9577\u671f\u7a69\u5b9a\u904b\u884c\u3002</p>"},{"location":"data-structures-applications/practical-projects/","title":"\u8cc7\u6599\u7d50\u69cb\u7684\u61c9\u7528\uff1a\u5be6\u8e10\u5c08\u6848\u6848\u4f8b","text":"<p>Rust \u7684\u8cc7\u6599\u7d50\u69cb\u63d0\u4f9b\u4e86\u5f37\u5927\u7684\u5de5\u5177\uff0c\u901a\u904e\u5be6\u8e10\u5c08\u6848\u53ef\u4ee5\u5c07\u7406\u8ad6\u77e5\u8b58\u8f49\u5316\u70ba\u5be6\u969b\u80fd\u529b\u3002</p>"},{"location":"data-structures-applications/practical-projects/#_2","title":"\u70ba\u4ec0\u9ebc\u5b78\u7fd2\u5be6\u8e10\u5c08\u6848\u6848\u4f8b\uff1f","text":"<p>\u5be6\u8e10\u5c08\u6848\u6848\u4f8b\u5c07\u8cc7\u6599\u7d50\u69cb\u61c9\u7528\u65bc\u5177\u9ad4\u554f\u984c\uff0c\u5b78\u7fd2\u5b83\u5011\u6709\u4ee5\u4e0b\u597d\u8655\uff1a</p> <ul> <li>\u7406\u8ad6\u7d50\u5408\u5be6\u8e10\uff1a\u5c07\u62bd\u8c61\u6982\u5ff5\u8f49\u5316\u70ba\u53ef\u904b\u884c\u7a0b\u5f0f\u3002</li> <li>\u554f\u984c\u89e3\u6c7a\u80fd\u529b\uff1a\u901a\u904e\u5c08\u6848\u5b78\u7fd2\u5206\u6790\u8207\u89e3\u6c7a\u771f\u5be6\u554f\u984c\u3002</li> <li>\u7cfb\u7d71\u8a2d\u8a08\u601d\u7dad\uff1a\u57f9\u990a\u5f9e\u9700\u6c42\u5230\u5be6\u73fe\u7684\u5b8c\u6574\u958b\u767c\u80fd\u529b\u3002</li> </ul> <p>\u672c\u7ae0\u5c07\u901a\u904e\u5177\u9ad4\u5c08\u6848\u6848\u4f8b\uff0c\u5c55\u793a Rust \u8cc7\u6599\u7d50\u69cb\u7684\u61c9\u7528\u3002</p>"},{"location":"data-structures-applications/practical-projects/#_3","title":"\u5be6\u8e10\u5c08\u6848\u6848\u4f8b","text":""},{"location":"data-structures-applications/practical-projects/#1","title":"1. \u5b57\u983b\u7d71\u8a08\u5de5\u5177","text":"<p>\u5834\u666f\uff1a\u69cb\u5efa\u4e00\u500b\u547d\u4ee4\u5217\u5de5\u5177\uff0c\u8b80\u53d6\u6587\u672c\u6a94\u6848\u4e26\u7d71\u8a08\u6bcf\u500b\u55ae\u8a5e\u7684\u51fa\u73fe\u983b\u7387\uff0c\u8f38\u51fa\u7d50\u679c\u5230\u87a2\u5e55\u6216\u6a94\u6848\u3002</p> <p>\u5be6\u73fe\uff1a</p> <ul> <li>\u4f7f\u7528 <code>std::fs</code> \u548c <code>std::io</code> \u8b80\u53d6\u6a94\u6848\u3002</li> <li>\u4f7f\u7528 <code>HashMap</code> \u5b58\u5132\u55ae\u8a5e\u8207\u983b\u7387\u3002</li> <li>\u4f7f\u7528 <code>Vec</code> \u6392\u5e8f\u7d50\u679c\u3002   <pre><code>use std::collections::HashMap;\nuse std::env;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\n\nfn word_frequency(path: &amp;str) -&gt; io::Result&lt;()&gt; {\n    let file = File::open(path)?;\n    let reader = BufReader::new(file);\n    let mut freq_map = HashMap::new();\n\n    for line in reader.lines() {\n        let line = line?;\n        for word in line.split_whitespace() {\n            *freq_map.entry(word.to_lowercase()).or_insert(0) += 1;\n        }\n    }\n\n    let mut freq_vec: Vec&lt;(&amp;String, &amp;i32)&gt; = freq_map.iter().collect();\n    freq_vec.sort_by(|a, b| b.1.cmp(a.1)); // \u6309\u983b\u7387\u964d\u5e8f\u6392\u5e8f\n\n    for (word, count) in freq_vec.iter().take(10) {\n        println!(\"{}: {}\", word, count);\n    }\n    Ok(())\n}\n\nfn main() {\n    let args: Vec&lt;String&gt; = env::args().collect();\n    if args.len() &lt; 2 {\n        eprintln!(\"\u7528\u6cd5: {} &lt;\u6a94\u6848\u8def\u5f91&gt;\", args[0]);\n        std::process::exit(1);\n    }\n    if let Err(e) = word_frequency(&amp;args[1]) {\n        eprintln!(\"\u932f\u8aa4: {}\", e);\n        std::process::exit(1);\n    }\n}\n</code></pre></li> </ul> <p>\u512a\u5316\u7b56\u7565\uff1a</p> <ul> <li>\u4f7f\u7528 <code>BufReader</code> \u63d0\u5347\u6a94\u6848\u8b80\u53d6\u6548\u7387\uff0c\u6e1b\u5c11\u7cfb\u7d71\u8abf\u7528\u3002</li> <li>\u5c07\u55ae\u8a5e\u8f49\u70ba\u5c0f\u5beb\u4ee5\u7d71\u4e00\u7d71\u8a08\uff0c\u907f\u514d\u5927\u5c0f\u5beb\u5dee\u7570\u3002</li> <li>\u4f7f\u7528 <code>Vec</code> \u9032\u884c\u6392\u5e8f\uff0c\u50c5\u8f38\u51fa\u524d 10 \u500b\u7d50\u679c\u4ee5\u63d0\u5347\u53ef\u8b80\u6027\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u5c0d\u65bc\u5927\u898f\u6a21\u6587\u672c\uff0c\u8003\u616e\u4f7f\u7528\u6d41\u5f0f\u8655\u7406\u907f\u514d\u4e00\u6b21\u6027\u8b80\u53d6\u5168\u90e8\u5167\u5bb9\uff1b\u53ef\u9032\u4e00\u6b65\u4f7f\u7528 <code>clap</code> \u5eab\u589e\u5f37\u547d\u4ee4\u5217\u53c3\u6578\u89e3\u6790\u3002</p>"},{"location":"data-structures-applications/practical-projects/#2","title":"2. \u4efb\u52d9\u8abf\u5ea6\u7cfb\u7d71","text":"<p>\u5834\u666f\uff1a\u8a2d\u8a08\u4e00\u500b\u7c21\u55ae\u7684\u4efb\u52d9\u8abf\u5ea6\u7cfb\u7d71\uff0c\u652f\u63f4\u512a\u5148\u7d1a\u4efb\u52d9\u7684\u63d2\u5165\u8207\u57f7\u884c\uff0c\u6a21\u64ec\u80cc\u666f\u5de5\u4f5c\u8005\u8655\u7406\u3002</p> <p>\u5be6\u73fe\uff1a</p> <ul> <li>\u4f7f\u7528 <code>BinaryHeap</code> \u4f5c\u70ba\u512a\u5148\u4f47\u5217\uff0c\u7ba1\u7406\u4efb\u52d9\u3002</li> <li>\u4f7f\u7528 <code>Vec</code> \u5132\u5b58\u8655\u7406\u7d50\u679c\u3002</li> <li>\u4f7f\u7528 <code>std::cmp::Reverse</code> \u5be6\u73fe\u6700\u5c0f\u5806\u6548\u679c\u3002   <pre><code>use std::cmp::Reverse;\nuse std::collections::BinaryHeap;\n\n#[derive(Debug)]\nstruct Task {\n    id: usize,\n    priority: i32, // \u8f03\u5c0f\u503c\u8868\u793a\u66f4\u9ad8\u512a\u5148\u7d1a\n    description: String,\n}\n\nimpl Ord for Task {\n    fn cmp(&amp;self, other: &amp;Self) -&gt; std::cmp::Ordering {\n        self.priority.cmp(&amp;other.priority)\n    }\n}\n\nimpl PartialOrd for Task {\n    fn partial_cmp(&amp;self, other: &amp;Self) -&gt; Option&lt;std::cmp::Ordering&gt; {\n        Some(self.cmp(other))\n    }\n}\n\nimpl PartialEq for Task {\n    fn eq(&amp;self, other: &amp;Self) -&gt; bool {\n        self.priority == other.priority\n    }\n}\n\nimpl Eq for Task {}\n\nfn schedule_tasks(tasks: Vec&lt;Task&gt;) -&gt; Vec&lt;String&gt; {\n    let mut priority_queue: BinaryHeap&lt;Reverse&lt;Task&gt;&gt; = BinaryHeap::new();\n    let mut results = Vec::new();\n\n    // \u63d2\u5165\u4efb\u52d9\n    for task in tasks {\n        priority_queue.push(Reverse(task));\n    }\n\n    // \u8655\u7406\u4efb\u52d9\n    while let Some(Reverse(task)) = priority_queue.pop() {\n        results.push(format!(\"\u8655\u7406\u4efb\u52d9 {} (\u512a\u5148\u7d1a: {}): {}\", task.id, task.priority, task.description));\n    }\n    results\n}\n\nfn main() {\n    let tasks = vec![\n        Task { id: 1, priority: 3, description: \"\u4f4e\u512a\u5148\u7d1a\u4efb\u52d9\".to_string() },\n        Task { id: 2, priority: 1, description: \"\u9ad8\u512a\u5148\u7d1a\u4efb\u52d9\".to_string() },\n        Task { id: 3, priority: 2, description: \"\u4e2d\u512a\u5148\u7d1a\u4efb\u52d9\".to_string() },\n    ];\n    let results = schedule_tasks(tasks);\n    for result in results {\n        println!(\"{}\", result);\n    }\n}\n</code></pre></li> </ul> <p>\u512a\u5316\u7b56\u7565\uff1a</p> <ul> <li>\u4f7f\u7528 <code>BinaryHeap</code> \u7d50\u5408 <code>Reverse</code> \u5be6\u73fe\u6700\u5c0f\u5806\uff0c\u4fdd\u8b49\u6700\u9ad8\u512a\u5148\u7d1a\u4efb\u52d9\u6700\u5148\u8655\u7406\u3002</li> <li>\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u8907\u88fd\uff0c\u4efb\u52d9\u63cf\u8ff0\u4f7f\u7528 <code>String</code> \u64c1\u6709\u6240\u6709\u6b0a\u3002</li> <li>\u7d50\u679c\u4f7f\u7528 <code>Vec</code> \u6536\u96c6\uff0c\u652f\u63f4\u5f8c\u7e8c\u8655\u7406\u6216\u8f38\u51fa\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u5728\u771f\u5be6\u7cfb\u7d71\u4e2d\uff0c\u53ef\u7d50\u5408 <code>std::thread</code> \u6216 <code>tokio</code> \u5be6\u73fe\u4e26\u767c\u4efb\u52d9\u8655\u7406\uff1b\u8003\u616e\u4efb\u52d9\u8d85\u6642\u6216\u53d6\u6d88\u6a5f\u5236\u3002</p>"},{"location":"data-structures-applications/practical-projects/#3","title":"3. \u7c21\u6613\u7de9\u5b58\u7cfb\u7d71","text":"<p>\u5834\u666f\uff1a\u5be6\u73fe\u4e00\u500b\u7c21\u55ae\u7684\u7de9\u5b58\u7cfb\u7d71\uff0c\u652f\u63f4\u9375\u503c\u5c0d\u5b58\u53d6\u8207 LRU (Least Recently Used) \u6dd8\u6c70\u7b56\u7565\u3002</p> <p>\u5be6\u73fe\uff1a</p> <ul> <li>\u4f7f\u7528 <code>HashMap</code> \u5b58\u5132\u9375\u503c\u5c0d\u3002</li> <li>\u4f7f\u7528 <code>VecDeque</code> \u8ffd\u8e64\u8a2a\u554f\u9806\u5e8f\uff0c\u5be6\u73fe LRU \u7b56\u7565\u3002</li> <li>\u4f7f\u7528 <code>std::sync</code> \u652f\u63f4\u591a\u57f7\u884c\u7dd2\u8a2a\u554f\u3002   <pre><code>use std::collections::{HashMap, VecDeque};\nuse std::sync::{Arc, Mutex};\n\nstruct LRUCache {\n    capacity: usize,\n    cache: HashMap&lt;String, String&gt;,\n    order: VecDeque&lt;String&gt;,\n}\n\nimpl LRUCache {\n    fn new(capacity: usize) -&gt; Self {\n        LRUCache {\n            capacity,\n            cache: HashMap::new(),\n            order: VecDeque::new(),\n        }\n    }\n\n    fn get(&amp;mut self, key: &amp;str) -&gt; Option&lt;&amp;String&gt; {\n        if let Some(value) = self.cache.get(key) {\n            // \u66f4\u65b0\u8a2a\u554f\u9806\u5e8f\n            self.order.retain(|k| k != key);\n            self.order.push_back(key.to_string());\n            return Some(value);\n        }\n        None\n    }\n\n    fn put(&amp;mut self, key: String, value: String) {\n        if self.cache.contains_key(&amp;key) {\n            self.order.retain(|k| k != &amp;key);\n        } else if self.cache.len() &gt;= self.capacity {\n            // \u79fb\u9664\u6700\u820a\u7684\u9805\u76ee\n            if let Some(oldest) = self.order.pop_front() {\n                self.cache.remove(&amp;oldest);\n            }\n        }\n        self.cache.insert(key.clone(), value);\n        self.order.push_back(key);\n    }\n}\n\nfn main() {\n    let cache = Arc::new(Mutex::new(LRUCache::new(3)));\n    let mut cache_lock = cache.lock().unwrap();\n    cache_lock.put(\"key1\".to_string(), \"value1\".to_string());\n    cache_lock.put(\"key2\".to_string(), \"value2\".to_string());\n    cache_lock.put(\"key3\".to_string(), \"value3\".to_string());\n    println!(\"Get key1: {:?}\", cache_lock.get(\"key1\")); // \u8f38\u51fa: Some(\"value1\")\n    cache_lock.put(\"key4\".to_string(), \"value4\".to_string()); // \u6dd8\u6c70 key2\n    println!(\"Get key2: {:?}\", cache_lock.get(\"key2\")); // \u8f38\u51fa: None\n}\n</code></pre></li> </ul> <p>\u512a\u5316\u7b56\u7565\uff1a</p> <ul> <li>\u4f7f\u7528 <code>HashMap</code> \u63d0\u4f9b O(1) \u5b58\u53d6\u6548\u7387\u3002</li> <li>\u4f7f\u7528 <code>VecDeque</code> \u9ad8\u6548\u7ba1\u7406\u8a2a\u554f\u9806\u5e8f\uff0c\u652f\u63f4 LRU \u7b56\u7565\u3002</li> <li>\u4f7f\u7528 <code>Arc&lt;Mutex&lt;_&gt;&gt;</code> \u652f\u63f4\u591a\u57f7\u884c\u7dd2\u5b89\u5168\u8a2a\u554f\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u5728\u9ad8\u4f75\u767c\u5834\u666f\u4e2d\uff0c\u8003\u616e\u4f7f\u7528 <code>dashmap</code> \u66ff\u4ee3 <code>HashMap</code> \u52a0\u9396\uff1b\u53ef\u589e\u52a0\u7de9\u5b58\u904e\u671f\u6642\u9593\u7b56\u7565\u3002</p>"},{"location":"data-structures-applications/practical-projects/#4","title":"4. \u6a94\u6848\u76ee\u9304\u6a39\u7d50\u69cb","text":"<p>\u5834\u666f\uff1a\u69cb\u5efa\u4e00\u500b\u5de5\u5177\uff0c\u905e\u8ff4\u6383\u63cf\u6a94\u6848\u76ee\u9304\u4e26\u4ee5\u6a39\u72c0\u7d50\u69cb\u986f\u793a\uff0c\u4f7f\u7528\u8cc7\u6599\u7d50\u69cb\u8868\u793a\u76ee\u9304\u5c64\u6b21\u3002</p> <p>\u5be6\u73fe\uff1a</p> <ul> <li>\u4f7f\u7528\u81ea\u5b9a\u7fa9\u7d50\u69cb\u8207 <code>Box</code> \u7ba1\u7406\u6a39\u72c0\u95dc\u4fc2\u3002</li> <li>\u4f7f\u7528 <code>std::fs</code> \u8b80\u53d6\u76ee\u9304\u5167\u5bb9\u3002</li> <li>\u4f7f\u7528 <code>HashMap</code> \u6216 <code>Vec</code> \u5b58\u5132\u5b50\u76ee\u9304\u8207\u6a94\u6848\u3002   <pre><code>use std::fs;\nuse std::path::Path;\n\n#[derive(Debug)]\nstruct DirNode {\n    name: String,\n    children: Vec&lt;DirNode&gt;,\n    files: Vec&lt;String&gt;,\n}\n\nimpl DirNode {\n    fn new(name: String) -&gt; Self {\n        DirNode {\n            name,\n            children: Vec::new(),\n            files: Vec::new(),\n        }\n    }\n\n    fn add_child(&amp;mut self, child: DirNode) {\n        self.children.push(child);\n    }\n\n    fn add_file(&amp;mut self, file: String) {\n        self.files.push(file);\n    }\n\n    fn display(&amp;self, level: usize) {\n        let indent = \"  \".repeat(level);\n        println!(\"{}{}/\", indent, self.name);\n        for file in &amp;self.files {\n            println!(\"{}  - {}\", indent, file);\n        }\n        for child in &amp;self.children {\n            child.display(level + 1);\n        }\n    }\n}\n\nfn build_tree&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; DirNode {\n    let path = path.as_ref();\n    let mut root = DirNode::new(path.file_name().unwrap().to_string_lossy().to_string());\n    if let Ok(entries) = fs::read_dir(path) {\n        for entry in entries {\n            if let Ok(entry) = entry {\n                let entry_path = entry.path();\n                if entry_path.is_dir() {\n                    let child = build_tree(&amp;entry_path);\n                    root.add_child(child);\n                } else {\n                    root.add_file(entry_path.file_name().unwrap().to_string_lossy().to_string());\n                }\n            }\n        }\n    }\n    root\n}\n\nfn main() {\n    let tree = build_tree(\".\");\n    tree.display(0);\n}\n</code></pre></li> </ul> <p>\u512a\u5316\u7b56\u7565\uff1a</p> <ul> <li>\u4f7f\u7528\u905e\u8ff4\u7d50\u69cb\u8868\u793a\u76ee\u9304\u6a39\uff0c<code>Vec</code> \u5b58\u5132\u5b50\u76ee\u9304\u8207\u6a94\u6848\u3002</li> <li>\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u8def\u5f91\u8907\u88fd\uff0c\u4f7f\u7528 <code>to_string_lossy()</code> \u8655\u7406\u975e UTF-8 \u8def\u5f91\u3002</li> <li>\u652f\u63f4\u6a39\u72c0\u986f\u793a\uff0c\u65b9\u4fbf\u7528\u6236\u95b1\u8b80\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u5c0d\u65bc\u5927\u898f\u6a21\u76ee\u9304\uff0c\u8003\u616e\u4f7f\u7528\u6d41\u5f0f\u8655\u7406\u907f\u514d\u8a18\u61b6\u9ad4\u904e\u8f09\uff1b\u53ef\u589e\u52a0\u904e\u6ffe\u689d\u4ef6\u4ee5\u5ffd\u7565\u7279\u5b9a\u6a94\u6848\u6216\u76ee\u9304\u3002</p>"},{"location":"data-structures-applications/practical-projects/#_4","title":"\u6280\u8853\u6311\u6230\u8207\u89e3\u6c7a\u65b9\u6848","text":"<ul> <li>\u8cc7\u6e90\u9650\u5236\uff1a\u5927\u898f\u6a21\u6578\u64da\u8655\u7406\u53ef\u80fd\u5c0e\u81f4\u8a18\u61b6\u9ad4\u6216 CPU \u904e\u8f09\uff1b\u89e3\u6c7a\u65b9\u6848\u662f\u4f7f\u7528\u6d41\u5f0f\u8655\u7406\u6216\u5206\u584a\u8655\u7406\u3002</li> <li>\u4e26\u767c\u5b89\u5168\uff1a\u591a\u57f7\u884c\u7dd2\u8a2a\u554f\u8cc7\u6599\u7d50\u69cb\u53ef\u80fd\u5f15\u5165\u8cc7\u6599\u7af6\u722d\uff1b\u4f7f\u7528\u540c\u6b65\u539f\u8a9e\u6216\u7121\u9396\u8a2d\u8a08\u89e3\u6c7a\u3002</li> <li>\u932f\u8aa4\u8655\u7406\uff1a\u771f\u5be6\u61c9\u7528\u4e2d\u932f\u8aa4\u983b\u7e41\u767c\u751f\uff1b\u9700\u5b8c\u5584\u932f\u8aa4\u8655\u7406\u8207\u65e5\u8a8c\u8a18\u9304\u3002</li> </ul>"},{"location":"data-structures-applications/practical-projects/#_5","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u5c08\u6848\u5be6\u8e10\uff1a\u9078\u64c7\u4e00\u500b\u611f\u8208\u8da3\u7684\u554f\u984c\uff0c\u7d9c\u5408\u904b\u7528\u591a\u7a2e\u8cc7\u6599\u7d50\u69cb\u5be6\u73fe\u89e3\u6c7a\u65b9\u6848\u3002</li> <li>\u4ee3\u78bc\u91cd\u69cb\uff1a\u5728\u5b8c\u6210\u521d\u6b65\u5be6\u73fe\u5f8c\uff0c\u5206\u6790\u6548\u80fd\u74f6\u9838\u4e26\u91cd\u69cb\u4ee3\u78bc\u3002</li> <li>\u793e\u7fa4\u53c3\u8207\uff1a\u5c07\u5c08\u6848\u5206\u4eab\u5230 Rust \u793e\u7fa4\uff0c\u7372\u53d6\u53cd\u994b\u8207\u6539\u9032\u5efa\u8b70\u3002</li> </ul> <p>\u76f8\u95dc\u8cc7\u6e90\uff1a</p> <ul> <li>Rust \u5c08\u6848\u7bc4\u4f8b (<code>https://github.com/rust-lang/rust-by-example</code>)\uff0c\u5305\u542b\u591a\u500b\u5be6\u7528\u6848\u4f8b\u3002</li> <li><code>crates.io</code> \u4e0a\u7684\u76f8\u95dc\u5eab\uff0c\u5982 <code>clap</code>\u3001<code>tokio</code>\uff0c\u7528\u65bc\u589e\u5f37\u5c08\u6848\u529f\u80fd\u3002</li> </ul>"},{"location":"data-structures-applications/practical-projects/#_6","title":"\u7e3d\u7d50","text":"<p>\u901a\u904e\u5b57\u983b\u7d71\u8a08\u3001\u4efb\u52d9\u8abf\u5ea6\u3001\u7de9\u5b58\u7cfb\u7d71\u8207\u76ee\u9304\u6a39\u7d50\u69cb\u7b49\u5be6\u8e10\u5c08\u6848\u6848\u4f8b\uff0c\u60a8\u53ef\u4ee5\u6df1\u5165\u7406\u89e3 Rust \u8cc7\u6599\u7d50\u69cb\u5728\u771f\u5be6\u5834\u666f\u4e2d\u7684\u61c9\u7528\u3002</p> <p>\u6bcf\u500b\u6848\u4f8b\u90fd\u5c55\u793a\u4e86\u5982\u4f55\u7d9c\u5408\u904b\u7528\u591a\u7a2e\u8cc7\u6599\u7d50\u69cb\u89e3\u6c7a\u5177\u9ad4\u554f\u984c\uff0c\u4e26\u901a\u904e\u512a\u5316\u7b56\u7565\u63d0\u5347\u6548\u80fd\u3002</p> <p>\u6301\u7e8c\u5be6\u8e10\u8207\u5206\u6790\u9019\u4e9b\u6848\u4f8b\uff0c\u5c07\u5e6b\u52a9\u60a8\u69cb\u5efa\u9ad8\u6548\u3001\u5b89\u5168\u4e14\u53ef\u9760\u7684 Rust \u61c9\u7528\u7a0b\u5f0f\u3002</p>"},{"location":"design-principles/concurrency-safety-design/","title":"\u4e26\u884c\u5b89\u5168\u8a2d\u8a08\uff1aRust \u7684\u4e26\u767c\u4fdd\u969c","text":"<p>\u4e26\u884c\u5b89\u5168\u662f Rust \u8a9e\u8a00\u8a2d\u8a08\u7684\u91cd\u8981\u7406\u5ff5\uff0c\u65e8\u5728\u89e3\u6c7a\u591a\u7dda\u7a0b\u7de8\u7a0b\u4e2d\u5e38\u898b\u7684\u6578\u64da\u7af6\u8cfd\u548c\u6b7b\u9396\u554f\u984c\u3002Rust \u901a\u904e\u5176\u6240\u6709\u6b0a\u7cfb\u7d71\u548c\u578b\u5225\u6aa2\u67e5\uff0c\u5728\u7de8\u8b6f\u6642\u78ba\u4fdd\u4e26\u767c\u4ee3\u78bc\u7684\u5b89\u5168\u6027\uff0c\u4f7f\u958b\u767c\u8005\u80fd\u81ea\u4fe1\u5730\u7de8\u5beb\u9ad8\u6548\u7684\u591a\u7dda\u7a0b\u7a0b\u5f0f\u3002</p>"},{"location":"design-principles/concurrency-safety-design/#_1","title":"\u70ba\u4ec0\u9ebc\u4e26\u884c\u5b89\u5168\u81f3\u95dc\u91cd\u8981\uff1f","text":"<p>\u5728\u73fe\u4ee3\u7de8\u7a0b\u4e2d\uff0c\u4e26\u767c\u662f\u63d0\u5347\u6027\u80fd\u7684\u95dc\u9375\uff0c\u4f46\u4e5f\u5e36\u4f86\u4e86\u6311\u6230\uff1a</p> <ul> <li>\u6578\u64da\u7af6\u8cfd\uff1a\u591a\u500b\u7dda\u7a0b\u540c\u6642\u8a2a\u554f\u5171\u4eab\u6578\u64da\uff0c\u53ef\u80fd\u5c0e\u81f4\u4e0d\u4e00\u81f4\u6216\u5d29\u6f70\u3002</li> <li>\u6b7b\u9396\uff1a\u7dda\u7a0b\u9593\u76f8\u4e92\u7b49\u5f85\u8cc7\u6e90\uff0c\u5c0e\u81f4\u7a0b\u5f0f\u5361\u6b7b\u3002</li> <li>\u8907\u96dc\u9664\u932f\uff1a\u4e26\u767c\u932f\u8aa4\u901a\u5e38\u96e3\u4ee5\u91cd\u73fe\u548c\u8a3a\u65b7\uff0c\u589e\u52a0\u958b\u767c\u6210\u672c\u3002</li> </ul> <p>Rust \u7684\u4e26\u884c\u5b89\u5168\u8a2d\u8a08\u76ee\u6a19\u662f\u901a\u904e\u7de8\u8b6f\u6642\u6aa2\u67e5\uff0c\u6d88\u9664\u9019\u4e9b\u554f\u984c\uff0c\u78ba\u4fdd\u591a\u7dda\u7a0b\u4ee3\u78bc\u7684\u6b63\u78ba\u6027\u3002</p>"},{"location":"design-principles/concurrency-safety-design/#rust_1","title":"Rust \u5982\u4f55\u5be6\u73fe\u4e26\u884c\u5b89\u5168\uff1f","text":"<p>Rust \u7684\u4e26\u884c\u5b89\u5168\u57fa\u65bc\u4ee5\u4e0b\u8a2d\u8a08\u539f\u5247\uff1a</p> <ul> <li>\u6240\u6709\u6b0a\u8207\u501f\u7528\u898f\u5247\uff1a\u78ba\u4fdd\u5171\u4eab\u6578\u64da\u5728\u591a\u7dda\u7a0b\u74b0\u5883\u4e2d\u53ea\u80fd\u901a\u904e\u5b89\u5168\u7684\u65b9\u5f0f\u8a2a\u554f\uff0c\u4f8b\u5982\u4e0d\u53ef\u8b8a\u5171\u4eab\u6216\u7368\u5360\u53ef\u8b8a\u3002</li> <li>\u578b\u5225\u7cfb\u7d71\u9650\u5236\uff1a\u901a\u904e <code>Send</code> \u548c <code>Sync</code> \u7279\u5fb5\uff0c\u7de8\u8b6f\u5668\u6aa2\u67e5\u6578\u64da\u662f\u5426\u9069\u5408\u5728\u7dda\u7a0b\u9593\u50b3\u905e\u6216\u5171\u4eab\u3002</li> <li>\u5b89\u5168\u4e26\u767c\u5de5\u5177\uff1aRust \u63d0\u4f9b\u5982 <code>Mutex</code> \u548c <code>RwLock</code> \u7b49\u5de5\u5177\uff0c\u78ba\u4fdd\u5728\u9700\u8981\u5171\u4eab\u6578\u64da\u6642\u4ee5\u5b89\u5168\u65b9\u5f0f\u9032\u884c\u3002</li> </ul> <p>\u9019\u4e9b\u6a5f\u5236\u4f7f Rust \u80fd\u5728\u7de8\u8b6f\u968e\u6bb5\u9632\u6b62\u5927\u591a\u6578\u4e26\u767c\u932f\u8aa4\uff0c\u7121\u9700\u4f9d\u8cf4\u958b\u767c\u8005\u7684\u8b39\u614e\u64cd\u4f5c\u3002</p>"},{"location":"design-principles/concurrency-safety-design/#_2","title":"\u4e26\u884c\u5b89\u5168\u7684\u512a\u52e2","text":"<p>Rust \u7684\u4e26\u884c\u5b89\u5168\u8a2d\u8a08\u5e36\u4f86\u4ee5\u4e0b\u597d\u8655\uff1a</p> <ul> <li>\u932f\u8aa4\u9810\u9632\uff1a\u6578\u64da\u7af6\u8cfd\u7b49\u554f\u984c\u5728\u7de8\u8b6f\u6642\u88ab\u6355\u7372\uff0c\u6e1b\u5c11\u904b\u884c\u6642\u932f\u8aa4\u3002</li> <li>\u6027\u80fd\u8207\u5b89\u5168\u517c\u5f97\uff1a\u958b\u767c\u8005\u80fd\u81ea\u4fe1\u5730\u5229\u7528\u591a\u7dda\u7a0b\u63d0\u5347\u6027\u80fd\uff0c\u7121\u9700\u64d4\u5fc3\u5b89\u5168\u554f\u984c\u3002</li> <li>\u7c21\u5316\u4e26\u767c\u7de8\u7a0b\uff1aRust \u7684\u898f\u5247\u964d\u4f4e\u4e86\u4e26\u767c\u4ee3\u78bc\u7684\u8907\u96dc\u6027\uff0c\u4f7f\u5176\u66f4\u6613\u65bc\u7406\u89e3\u548c\u7dad\u8b77\u3002</li> </ul>"},{"location":"design-principles/error-handling-philosophy/","title":"\u932f\u8aa4\u8655\u7406\u7406\u5ff5\uff1aRust \u7684\u53ef\u9760\u6027\u8a2d\u8a08","text":"<p>\u932f\u8aa4\u8655\u7406\u662f Rust \u8a9e\u8a00\u8a2d\u8a08\u4e2d\u7684\u91cd\u8981\u7406\u5ff5\uff0c\u65e8\u5728\u5e6b\u52a9\u958b\u767c\u8005\u660e\u78ba\u8655\u7406\u7a0b\u5f0f\u4e2d\u53ef\u80fd\u51fa\u73fe\u7684\u7570\u5e38\u60c5\u6cc1\uff0c\u907f\u514d\u96b1\u85cf\u932f\u8aa4\u6216\u672a\u5b9a\u7fa9\u884c\u70ba\u3002Rust \u901a\u904e\u5f37\u5236\u6027\u7684\u932f\u8aa4\u8655\u7406\u6a5f\u5236\uff0c\u78ba\u4fdd\u7a0b\u5f0f\u5728\u9762\u5c0d\u5931\u6557\u6642\u4ecd\u80fd\u4fdd\u6301\u53ef\u9760\u8207\u53ef\u9810\u6e2c\u3002</p>"},{"location":"design-principles/error-handling-philosophy/#_1","title":"\u70ba\u4ec0\u9ebc\u932f\u8aa4\u8655\u7406\u5982\u6b64\u91cd\u8981\uff1f","text":"<p>\u5728\u7a0b\u5f0f\u8a2d\u8a08\u4e2d\uff0c\u932f\u8aa4\u662f\u4e0d\u53ef\u907f\u514d\u7684\uff0c\u8655\u7406\u4e0d\u7576\u53ef\u80fd\u5c0e\u81f4\uff1a</p> <ul> <li>\u96b1\u85cf\u932f\u8aa4\uff1a\u672a\u6aa2\u67e5\u7684\u932f\u8aa4\u88ab\u5ffd\u7565\uff0c\u5c0e\u81f4\u7a0b\u5f0f\u5728\u5f8c\u7e8c\u968e\u6bb5\u5d29\u6f70\u3002</li> <li>\u672a\u5b9a\u7fa9\u884c\u70ba\uff1a\u672a\u8655\u7406\u7684\u7570\u5e38\u53ef\u80fd\u5f15\u767c\u4e0d\u53ef\u9810\u6e2c\u7684\u7d50\u679c\u3002</li> <li>\u9664\u932f\u56f0\u96e3\uff1a\u7f3a\u4e4f\u660e\u78ba\u7684\u932f\u8aa4\u8cc7\u8a0a\uff0c\u589e\u52a0\u5b9a\u4f4d\u554f\u984c\u7684\u96e3\u5ea6\u3002</li> </ul> <p>Rust \u7684\u932f\u8aa4\u8655\u7406\u7406\u5ff5\u8981\u6c42\u958b\u767c\u8005\u76f4\u9762\u6f5b\u5728\u5931\u6557\uff0c\u901a\u904e\u660e\u78ba\u7684\u8a2d\u8a08\u63d0\u5347\u7a0b\u5f0f\u7684\u5065\u58ef\u6027\u3002</p>"},{"location":"design-principles/error-handling-philosophy/#rust_1","title":"Rust \u5982\u4f55\u8a2d\u8a08\u932f\u8aa4\u8655\u7406\uff1f","text":"<p>Rust \u7684\u932f\u8aa4\u8655\u7406\u57fa\u65bc\u4ee5\u4e0b\u539f\u5247\uff1a</p> <ul> <li>\u986f\u5f0f\u932f\u8aa4\u8655\u7406\uff1aRust \u4e0d\u4f7f\u7528\u50b3\u7d71\u7684\u4f8b\u5916 (exception) \u6a5f\u5236\uff0c\u800c\u662f\u901a\u904e <code>Result</code> \u548c <code>Option</code> \u578b\u5225\u5f37\u5236\u958b\u767c\u8005\u8655\u7406\u53ef\u80fd\u7684\u5931\u6557\u3002</li> <li>\u932f\u8aa4\u4f5c\u70ba\u503c\uff1a\u932f\u8aa4\u88ab\u8996\u70ba\u666e\u901a\u503c\uff0c\u5fc5\u9808\u901a\u904e\u6a21\u5f0f\u5339\u914d\u7b49\u65b9\u5f0f\u8655\u7406\uff0c\u7121\u6cd5\u88ab\u5ffd\u7565\u3002</li> <li>\u65e9\u671f\u5931\u6557\uff1aRust \u9f13\u52f5\u5728\u554f\u984c\u767c\u751f\u6642\u7acb\u5373\u8655\u7406\uff0c\u907f\u514d\u932f\u8aa4\u50b3\u64ad\u5230\u66f4\u9ad8\u5c64\u6b21\u3002</li> </ul> <p>\u9019\u4e9b\u8a2d\u8a08\u78ba\u4fdd\u932f\u8aa4\u8655\u7406\u6210\u70ba\u4ee3\u78bc\u7684\u4e00\u90e8\u5206\uff0c\u800c\u975e\u53ef\u9078\u7684\u9644\u52a0\u529f\u80fd\u3002</p>"},{"location":"design-principles/error-handling-philosophy/#_2","title":"\u932f\u8aa4\u8655\u7406\u7406\u5ff5\u7684\u512a\u52e2","text":"<ul> <li>\u53ef\u9760\u6027\u63d0\u5347\uff1a\u5f37\u5236\u8655\u7406\u932f\u8aa4\uff0c\u6e1b\u5c11\u672a\u6355\u7372\u7570\u5e38\u5c0e\u81f4\u7684\u5d29\u6f70\u3002</li> <li>\u4ee3\u78bc\u6e05\u6670\u5ea6\uff1a\u986f\u5f0f\u932f\u8aa4\u8655\u7406\u4f7f\u4ee3\u78bc\u610f\u5716\u66f4\u660e\u78ba\uff0c\u6613\u65bc\u7406\u89e3\u548c\u7dad\u8b77\u3002</li> <li>\u9664\u932f\u6548\u7387\uff1a\u932f\u8aa4\u8cc7\u8a0a\u901a\u5e38\u5728\u7de8\u8b6f\u6642\u6216\u65e9\u671f\u904b\u884c\u6642\u66b4\u9732\uff0c\u4fbf\u65bc\u5feb\u901f\u5b9a\u4f4d\u554f\u984c\u3002</li> </ul>"},{"location":"design-principles/interoperability-design/","title":"\u4e92\u64cd\u4f5c\u6027\u8a2d\u8a08\uff1aRust \u7684\u958b\u653e\u6027\u627f\u8afe","text":"<p>\u4e92\u64cd\u4f5c\u6027\u662f Rust \u8a9e\u8a00\u8a2d\u8a08\u7684\u91cd\u8981\u7406\u5ff5\uff0c\u65e8\u5728\u8b93 Rust \u80fd\u8207\u5176\u4ed6\u8a9e\u8a00\u548c\u7cfb\u7d71\u7121\u7e2b\u6574\u5408\uff0c\u7279\u5225\u662f\u8207 C \u548c C++ \u7b49\u7cfb\u7d71\u7de8\u7a0b\u8a9e\u8a00\u7684\u4ee3\u78bc\u5171\u5b58\u3002Rust \u901a\u904e\u7cbe\u5fc3\u8a2d\u8a08\u7684 ABI\uff08\u61c9\u7528\u7a0b\u5f0f\u4e8c\u9032\u4f4d\u4ecb\u9762\uff09\u548c\u5de5\u5177\uff0c\u78ba\u4fdd\u958b\u767c\u8005\u80fd\u5728\u73fe\u6709\u751f\u614b\u7cfb\u7d71\u4e2d\u8f15\u9b06\u4f7f\u7528 Rust\u3002</p>"},{"location":"design-principles/interoperability-design/#_1","title":"\u70ba\u4ec0\u9ebc\u4e92\u64cd\u4f5c\u6027\u5982\u6b64\u91cd\u8981\uff1f","text":"<p>\u5728\u73fe\u4ee3\u8edf\u4ef6\u958b\u767c\u4e2d\uff0c\u7cfb\u7d71\u548c\u8a9e\u8a00\u7684\u591a\u6a23\u6027\u662f\u5e38\u614b\uff0c\u4e92\u64cd\u4f5c\u6027\u81f3\u95dc\u91cd\u8981\uff1a</p> <ul> <li>\u91cd\u7528\u73fe\u6709\u4ee3\u78bc\uff1a\u8a31\u591a\u5c08\u6848\u4f9d\u8cf4\u65bc\u6210\u719f\u7684 C/C++ \u5eab\uff0c\u7121\u6cd5\u5f9e\u982d\u91cd\u5beb\u3002</li> <li>\u9010\u6b65\u9077\u79fb\uff1a\u958b\u767c\u8005\u5e0c\u671b\u5728\u73fe\u6709\u7cfb\u7d71\u4e2d\u9010\u6b65\u5f15\u5165\u65b0\u8a9e\u8a00\uff0c\u800c\u975e\u4e00\u6b21\u6027\u66ff\u63db\u3002</li> <li>\u8de8\u5e73\u53f0\u9700\u6c42\uff1a\u7cfb\u7d71\u7de8\u7a0b\u9700\u8981\u5728\u4e0d\u540c\u74b0\u5883\u4e2d\u8207\u5e95\u5c64 API \u4ea4\u4e92\u3002</li> </ul> <p>Rust \u7684\u4e92\u64cd\u4f5c\u6027\u8a2d\u8a08\u78ba\u4fdd\u5176\u80fd\u878d\u5165\u73fe\u6709\u751f\u614b\u7cfb\u7d71\uff0c\u6210\u70ba\u7cfb\u7d71\u958b\u767c\u7684\u5be6\u7528\u9078\u64c7\u3002</p>"},{"location":"design-principles/interoperability-design/#rust_1","title":"Rust \u5982\u4f55\u5be6\u73fe\u4e92\u64cd\u4f5c\u6027\uff1f","text":"<p>Rust \u7684\u4e92\u64cd\u4f5c\u6027\u57fa\u65bc\u4ee5\u4e0b\u8a2d\u8a08\u539f\u5247\uff1a</p> <ul> <li>C ABI \u76f8\u5bb9\u6027\uff1aRust \u652f\u63f4\u8207 C \u8a9e\u8a00\u76f8\u540c\u7684\u4e8c\u9032\u4f4d\u4ecb\u9762\uff0c\u5141\u8a31\u76f4\u63a5\u8abf\u7528 C \u51fd\u6578\u6216\u88ab C \u4ee3\u78bc\u8abf\u7528\u3002</li> <li>\u7121\u904b\u884c\u6642\u4f9d\u8cf4\uff1aRust \u7de8\u8b6f\u5f8c\u7684\u7a0b\u5f0f\u4e0d\u4f9d\u8cf4\u7279\u5b9a\u904b\u884c\u6642\uff0c\u6e1b\u5c11\u8207\u5176\u4ed6\u8a9e\u8a00\u6574\u5408\u7684\u969c\u7919\u3002</li> <li>\u5de5\u5177\u652f\u63f4\uff1aRust \u63d0\u4f9b <code>bindgen</code> \u548c <code>cbindgen</code> \u7b49\u5de5\u5177\uff0c\u81ea\u52d5\u751f\u6210 C/C++ \u8207 Rust \u4e4b\u9593\u7684\u7d81\u5b9a\u4ee3\u78bc\u3002</li> </ul> <p>\u9019\u4e9b\u6a5f\u5236\u4f7f Rust \u80fd\u8207\u5176\u4ed6\u8a9e\u8a00\u548c\u7cfb\u7d71\u8f15\u9b06\u4ea4\u4e92\uff0c\u7279\u5225\u662f\u5728\u7cfb\u7d71\u7de8\u7a0b\u9818\u57df\uff0c\u958b\u767c\u8005\u53ef\u4ee5\u5229\u7528 Rust \u7684\u5b89\u5168\u6027\u548c\u6027\u80fd\u512a\u52e2\uff0c\u540c\u6642\u4fdd\u7559\u73fe\u6709\u4ee3\u78bc\u7684\u50f9\u503c\u3002</p>"},{"location":"design-principles/interoperability-design/#_2","title":"\u4e92\u64cd\u4f5c\u6027\u7684\u512a\u52e2","text":"<p>Rust \u7684\u4e92\u64cd\u4f5c\u6027\u8a2d\u8a08\u5e36\u4f86\u4ee5\u4e0b\u597d\u8655\uff1a</p> <ul> <li>\u751f\u614b\u7cfb\u7d71\u6574\u5408\uff1aRust \u80fd\u8207\u73fe\u6709\u7684 C/C++ \u5eab\u548c\u7cfb\u7d71\u7121\u7e2b\u5354\u4f5c\uff0c\u964d\u4f4e\u63a1\u7528\u9580\u6abb\u3002</li> <li>\u9010\u6b65\u63a1\u7528\uff1a\u958b\u767c\u8005\u53ef\u4ee5\u5728\u73fe\u6709\u5c08\u6848\u4e2d\u9010\u6b65\u5f15\u5165 Rust\uff0c\u7121\u9700\u5168\u9762\u91cd\u5beb\u3002</li> <li>\u9748\u6d3b\u6027\uff1aRust \u652f\u63f4\u8207\u591a\u7a2e\u8a9e\u8a00\u548c\u5e73\u53f0\u4ea4\u4e92\uff0c\u9069\u7528\u65bc\u591a\u5143\u5316\u7684\u958b\u767c\u9700\u6c42\u3002</li> </ul>"},{"location":"design-principles/memory-safety-principles/","title":"\u8a18\u61b6\u9ad4\u5b89\u5168\u539f\u5247\uff1aRust \u7684\u6838\u5fc3\u4fdd\u969c","text":"<p>\u8a18\u61b6\u9ad4\u5b89\u5168\u662f Rust \u8a9e\u8a00\u8a2d\u8a08\u7684\u57fa\u77f3\uff0c\u65e8\u5728\u89e3\u6c7a\u50b3\u7d71\u7cfb\u7d71\u7de8\u7a0b\u8a9e\u8a00\uff08\u5982 C \u548c C++\uff09\u4e2d\u5e38\u898b\u7684\u8a18\u61b6\u9ad4\u76f8\u95dc\u932f\u8aa4\uff0c\u4f8b\u5982\u7a7a\u6307\u91dd\u89e3\u5f15\u7528\u3001\u7de9\u885d\u5340\u6ea2\u51fa\u548c\u6578\u64da\u7af6\u8cfd\u3002Rust \u901a\u904e\u5176\u7368\u7279\u7684\u6240\u6709\u6b0a\u7cfb\u7d71\uff0c\u5728\u7de8\u8b6f\u6642\u78ba\u4fdd\u8a18\u61b6\u9ad4\u5b89\u5168\uff0c\u7121\u9700\u4f9d\u8cf4\u5783\u573e\u56de\u6536\u6a5f\u5236\u3002</p>"},{"location":"design-principles/memory-safety-principles/#_1","title":"\u70ba\u4ec0\u9ebc\u8a18\u61b6\u9ad4\u5b89\u5168\u5982\u6b64\u91cd\u8981\uff1f","text":"<p>\u5728\u7cfb\u7d71\u7de8\u7a0b\u4e2d\uff0c\u8a18\u61b6\u9ad4\u7ba1\u7406\u932f\u8aa4\u662f\u5c0e\u81f4\u7a0b\u5f0f\u5d29\u6f70\u548c\u5b89\u5168\u6f0f\u6d1e\u7684\u4e3b\u8981\u539f\u56e0\uff1a</p> <ul> <li>\u7a7a\u6307\u91dd\u89e3\u5f15\u7528\uff1a\u8a2a\u554f\u7121\u6548\u8a18\u61b6\u9ad4\u5730\u5740\u5c0e\u81f4\u7a0b\u5f0f\u5d29\u6f70\u3002</li> <li>\u7de9\u885d\u5340\u6ea2\u51fa\uff1a\u8d85\u51fa\u5206\u914d\u8a18\u61b6\u9ad4\u7bc4\u570d\u7684\u8a2a\u554f\uff0c\u53ef\u80fd\u88ab\u7528\u65bc\u60e1\u610f\u653b\u64ca\u3002</li> <li>\u4f7f\u7528\u5f8c\u91cb\u653e (Use-After-Free)\uff1a\u8a2a\u554f\u5df2\u91cb\u653e\u7684\u8a18\u61b6\u9ad4\uff0c\u5c0e\u81f4\u672a\u5b9a\u7fa9\u884c\u70ba\u3002</li> </ul> <p>Rust \u7684\u8a2d\u8a08\u76ee\u6a19\u662f\u6d88\u9664\u9019\u4e9b\u554f\u984c\uff0c\u78ba\u4fdd\u958b\u767c\u8005\u80fd\u5728\u4e0d\u72a7\u7272\u6027\u80fd\u7684\u60c5\u6cc1\u4e0b\uff0c\u7de8\u5beb\u5b89\u5168\u53ef\u9760\u7684\u4ee3\u78bc\u3002</p>"},{"location":"design-principles/memory-safety-principles/#rust_1","title":"Rust \u5982\u4f55\u5be6\u73fe\u8a18\u61b6\u9ad4\u5b89\u5168\uff1f","text":"<p>Rust \u901a\u904e\u4ee5\u4e0b\u8a2d\u8a08\u539f\u5247\u5728\u7de8\u8b6f\u6642\u4fdd\u969c\u8a18\u61b6\u9ad4\u5b89\u5168\uff1a</p> <ul> <li>\u6240\u6709\u6b0a (Ownership)\uff1a\u6bcf\u500b\u503c\u90fd\u6709\u552f\u4e00\u7684\u6240\u6709\u8005\uff0c\u8ca0\u8cac\u5176\u8a18\u61b6\u9ad4\u7684\u5206\u914d\u8207\u91cb\u653e\uff0c\u907f\u514d\u591a\u500b\u53ef\u8b8a\u5f15\u7528\u5c0e\u81f4\u7684\u7af6\u8cfd\u689d\u4ef6\u3002</li> <li>\u501f\u7528\u898f\u5247 (Borrowing Rules)\uff1a\u901a\u904e\u4e0d\u53ef\u8b8a\u501f\u7528\u548c\u53ef\u8b8a\u501f\u7528\u7684\u56b4\u683c\u898f\u5247\uff0c\u78ba\u4fdd\u540c\u4e00\u6642\u9593\u53ea\u6709\u4e00\u500b\u53ef\u8b8a\u5f15\u7528\u6216\u591a\u500b\u4e0d\u53ef\u8b8a\u5f15\u7528\u8a2a\u554f\u6578\u64da\u3002</li> <li>\u751f\u547d\u9031\u671f (Lifetimes)\uff1a\u7de8\u8b6f\u5668\u8ffd\u8e2a\u8b8a\u6578\u7684\u6709\u6548\u7bc4\u570d\uff0c\u9632\u6b62\u61f8\u5782\u6307\u91dd\uff08\u6307\u5411\u5df2\u91cb\u653e\u8a18\u61b6\u9ad4\u7684\u6307\u91dd\uff09\u3002</li> </ul> <p>\u9019\u4e9b\u6a5f\u5236\u5171\u540c\u4f5c\u7528\uff0c\u4f7f\u5f97 Rust \u5728\u7de8\u8b6f\u968e\u6bb5\u5c31\u80fd\u6aa2\u6e2c\u4e26\u963b\u6b62\u5927\u591a\u6578\u8a18\u61b6\u9ad4\u932f\u8aa4\uff0c\u7121\u9700\u904b\u884c\u6642\u6aa2\u67e5\u6216\u5783\u573e\u56de\u6536\u3002</p>"},{"location":"design-principles/memory-safety-principles/#_2","title":"\u8a18\u61b6\u9ad4\u5b89\u5168\u7684\u512a\u52e2","text":"<p>Rust \u7684\u8a18\u61b6\u9ad4\u5b89\u5168\u539f\u5247\u5e36\u4f86\u4ee5\u4e0b\u597d\u8655\uff1a</p> <ul> <li>\u932f\u8aa4\u9810\u9632\uff1a\u8a31\u591a\u6f5b\u5728\u7684 bug \u5728\u7de8\u8b6f\u6642\u88ab\u6355\u7372\uff0c\u6e1b\u5c11\u9664\u932f\u6642\u9593\u3002</li> <li>\u6027\u80fd\u4fdd\u969c\uff1a\u7121\u9700\u5783\u573e\u56de\u6536\uff0cRust \u80fd\u63d0\u4f9b\u8207 C/C++ \u76f8\u7576\u7684\u6027\u80fd\u3002</li> <li>\u5b89\u5168\u63d0\u5347\uff1a\u6e1b\u5c11\u8a18\u61b6\u9ad4\u76f8\u95dc\u6f0f\u6d1e\uff0c\u7279\u5225\u9069\u5408\u958b\u767c\u4f5c\u696d\u7cfb\u7d71\u3001\u9a45\u52d5\u7a0b\u5f0f\u7b49\u95dc\u9375\u8edf\u4ef6\u3002</li> </ul>"},{"location":"design-principles/type-safety-principles/","title":"\u578b\u5225\u5b89\u5168\u539f\u5247\uff1aRust \u7684\u53ef\u9760\u6027\u4fdd\u8b49","text":"<p>\u578b\u5225\u5b89\u5168\u662f Rust \u8a9e\u8a00\u8a2d\u8a08\u7684\u53e6\u4e00\u6838\u5fc3\u539f\u5247\uff0c\u65e8\u5728\u901a\u904e\u5f37\u5927\u7684\u975c\u614b\u578b\u5225\u7cfb\u7d71\uff0c\u5728\u7de8\u8b6f\u6642\u6355\u7372\u8a31\u591a\u6f5b\u5728\u7684\u932f\u8aa4\uff0c\u78ba\u4fdd\u7a0b\u5f0f\u884c\u70ba\u7b26\u5408\u9810\u671f\u3002Rust \u7684\u578b\u5225\u7cfb\u7d71\u4e0d\u50c5\u63d0\u9ad8\u4e86\u4ee3\u78bc\u7684\u53ef\u9760\u6027\uff0c\u9084\u4fc3\u9032\u4e86\u66f4\u597d\u7684\u4ee3\u78bc\u8a2d\u8a08\u8207\u53ef\u7dad\u8b77\u6027\u3002</p>"},{"location":"design-principles/type-safety-principles/#_1","title":"\u70ba\u4ec0\u9ebc\u578b\u5225\u5b89\u5168\u81f3\u95dc\u91cd\u8981\uff1f","text":"<p>\u5728\u7a0b\u5f0f\u8a2d\u8a08\u4e2d\uff0c\u578b\u5225\u932f\u8aa4\u53ef\u80fd\u5c0e\u81f4\u904b\u884c\u6642\u7570\u5e38\u6216\u672a\u5b9a\u7fa9\u884c\u70ba\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u578b\u5225\u4e0d\u5339\u914d\uff1a\u5c07\u6574\u6578\u4f5c\u70ba\u5b57\u4e32\u8655\u7406\uff0c\u5c0e\u81f4\u7a0b\u5f0f\u5d29\u6f70\u3002</li> <li>\u96b1\u5f0f\u8f49\u63db\u98a8\u96aa\uff1a\u672a\u7d93\u6aa2\u67e5\u7684\u578b\u5225\u8f49\u63db\u53ef\u80fd\u5f15\u5165\u5fae\u5999\u932f\u8aa4\u3002</li> <li>\u6578\u64da\u7d50\u69cb\u8aa4\u7528\uff1a\u932f\u8aa4\u4f7f\u7528\u6578\u64da\u7d50\u69cb\u7684\u5b57\u6bb5\u6216\u65b9\u6cd5\uff0c\u5c0e\u81f4\u908f\u8f2f\u932f\u8aa4\u3002</li> </ul> <p>Rust \u7684\u578b\u5225\u5b89\u5168\u539f\u5247\u901a\u904e\u56b4\u683c\u7684\u7de8\u8b6f\u6642\u6aa2\u67e5\uff0c\u78ba\u4fdd\u9019\u4e9b\u554f\u984c\u5728\u7a0b\u5f0f\u904b\u884c\u524d\u88ab\u767c\u73fe\u548c\u89e3\u6c7a\u3002</p>"},{"location":"design-principles/type-safety-principles/#rust_1","title":"Rust \u5982\u4f55\u5be6\u73fe\u578b\u5225\u5b89\u5168\uff1f","text":"<p>Rust \u7684\u578b\u5225\u7cfb\u7d71\u57fa\u65bc\u4ee5\u4e0b\u8a2d\u8a08\u539f\u5247\uff1a</p> <ul> <li>\u975c\u614b\u578b\u5225\u6aa2\u67e5\uff1a\u6240\u6709\u8b8a\u6578\u548c\u8868\u9054\u5f0f\u7684\u578b\u5225\u5728\u7de8\u8b6f\u6642\u78ba\u5b9a\uff0c\u907f\u514d\u904b\u884c\u6642\u578b\u5225\u932f\u8aa4\u3002</li> <li>\u7121\u96b1\u5f0f\u8f49\u63db\uff1aRust \u4e0d\u5141\u8a31\u5371\u96aa\u7684\u96b1\u5f0f\u578b\u5225\u8f49\u63db\uff0c\u958b\u767c\u8005\u5fc5\u9808\u660e\u78ba\u6307\u5b9a\u8f49\u63db\u64cd\u4f5c\u3002</li> <li>\u6a21\u5f0f\u5339\u914d\u8207\u7aae\u76e1\u6aa2\u67e5\uff1a\u5728\u8655\u7406\u679a\u8209\u578b\u5225\u6642\uff0c\u7de8\u8b6f\u5668\u78ba\u4fdd\u6240\u6709\u53ef\u80fd\u7684\u60c5\u6cc1\u90fd\u88ab\u8655\u7406\uff0c\u9632\u6b62\u907a\u6f0f\u3002</li> </ul> <p>\u9019\u4e9b\u6a5f\u5236\u4f7f Rust \u80fd\u5728\u7de8\u8b6f\u968e\u6bb5\u767c\u73fe\u578b\u5225\u76f8\u95dc\u554f\u984c\uff0c\u6e1b\u5c11\u904b\u884c\u6642\u932f\u8aa4\u7684\u767c\u751f\u3002</p>"},{"location":"design-principles/type-safety-principles/#_2","title":"\u578b\u5225\u5b89\u5168\u7684\u512a\u52e2","text":"<p>Rust \u7684\u578b\u5225\u5b89\u5168\u539f\u5247\u5e36\u4f86\u4ee5\u4e0b\u597d\u8655\uff1a</p> <ul> <li>\u65e9\u671f\u932f\u8aa4\u6aa2\u6e2c\uff1a\u578b\u5225\u932f\u8aa4\u5728\u7de8\u8b6f\u6642\u88ab\u6355\u7372\uff0c\u6e1b\u5c11\u9664\u932f\u6210\u672c\u3002</li> <li>\u4ee3\u78bc\u6e05\u6670\u5ea6\uff1a\u5f37\u578b\u5225\u7cfb\u7d71\u9f13\u52f5\u958b\u767c\u8005\u660e\u78ba\u8868\u9054\u610f\u5716\uff0c\u63d0\u5347\u4ee3\u78bc\u53ef\u8b80\u6027\u3002</li> <li>\u91cd\u69cb\u4fe1\u5fc3\uff1a\u578b\u5225\u6aa2\u67e5\u78ba\u4fdd\u91cd\u69cb\u5f8c\u4ee3\u78bc\u884c\u70ba\u4e00\u81f4\uff0c\u964d\u4f4e\u5f15\u5165\u932f\u8aa4\u7684\u98a8\u96aa\u3002</li> </ul>"},{"location":"design-principles/zero-cost-abstraction-philosophy/","title":"\u96f6\u6210\u672c\u62bd\u8c61\u7406\u5ff5\uff1aRust \u7684\u6027\u80fd\u627f\u8afe","text":"<p>\u96f6\u6210\u672c\u62bd\u8c61\u662f Rust \u8a9e\u8a00\u8a2d\u8a08\u7684\u6838\u5fc3\u7406\u5ff5\u4e4b\u4e00\uff0c\u65e8\u5728\u8b93\u958b\u767c\u8005\u80fd\u4f7f\u7528\u9ad8\u5c64\u6b21\u62bd\u8c61\uff08\u5982\u6cdb\u578b\u3001\u7279\u5fb5\u548c\u9589\u5305\uff09\u4f86\u63d0\u5347\u4ee3\u78bc\u7684\u53ef\u8b80\u6027\u8207\u53ef\u7dad\u8b77\u6027\uff0c\u540c\u6642\u4e0d\u72a7\u7272\u904b\u884c\u6642\u6027\u80fd\u3002Rust \u78ba\u4fdd\u9019\u4e9b\u62bd\u8c61\u5728\u7de8\u8b6f\u5f8c\u751f\u6210\u7684\u6a5f\u5668\u78bc\u8207\u624b\u5beb\u4f4e\u5c64\u4ee3\u78bc\u4e00\u6a23\u9ad8\u6548\u3002</p>"},{"location":"design-principles/zero-cost-abstraction-philosophy/#_1","title":"\u70ba\u4ec0\u9ebc\u96f6\u6210\u672c\u62bd\u8c61\u5982\u6b64\u91cd\u8981\uff1f","text":"<p>\u5728\u7a0b\u5f0f\u8a2d\u8a08\u4e2d\uff0c\u62bd\u8c61\u662f\u63d0\u9ad8\u4ee3\u78bc\u54c1\u8cea\u7684\u95dc\u9375\uff0c\u4f46\u50b3\u7d71\u4e0a\u53ef\u80fd\u5e36\u4f86\u6027\u80fd\u4ee3\u50f9\uff1a</p> <ul> <li>\u904b\u884c\u6642\u958b\u92b7\uff1a\u67d0\u4e9b\u8a9e\u8a00\u7684\u9ad8\u5c64\u6b21\u62bd\u8c61\uff08\u5982\u865b\u64ec\u51fd\u6578\uff09\u53ef\u80fd\u5f15\u5165\u984d\u5916\u7684\u904b\u884c\u6642\u6210\u672c\u3002</li> <li>\u6027\u80fd\u6298\u8877\uff1a\u958b\u767c\u8005\u5e38\u9700\u8981\u5728\u4ee3\u78bc\u6e05\u6670\u5ea6\u548c\u6027\u80fd\u4e4b\u9593\u505a\u51fa\u53d6\u6368\u3002</li> <li>\u8907\u96dc\u512a\u5316\uff1a\u70ba\u4e86\u6027\u80fd\uff0c\u958b\u767c\u8005\u53ef\u80fd\u88ab\u8feb\u653e\u68c4\u62bd\u8c61\uff0c\u7de8\u5beb\u7e41\u7463\u7684\u4f4e\u5c64\u4ee3\u78bc\u3002</li> </ul> <p>Rust \u7684\u96f6\u6210\u672c\u62bd\u8c61\u7406\u5ff5\u78ba\u4fdd\u958b\u767c\u8005\u7121\u9700\u5728\u62bd\u8c61\u8207\u6027\u80fd\u4e4b\u9593\u59a5\u5354\u3002</p>"},{"location":"design-principles/zero-cost-abstraction-philosophy/#rust_1","title":"Rust \u5982\u4f55\u5be6\u73fe\u96f6\u6210\u672c\u62bd\u8c61\uff1f","text":"<p>Rust \u7684\u96f6\u6210\u672c\u62bd\u8c61\u57fa\u65bc\u4ee5\u4e0b\u8a2d\u8a08\u539f\u5247\uff1a</p> <ul> <li>\u7de8\u8b6f\u6642\u8a08\u7b97\uff1a\u8a31\u591a\u62bd\u8c61\uff08\u5982\u6cdb\u578b\uff09\u5728\u7de8\u8b6f\u6642\u88ab\u5c55\u958b\u70ba\u5177\u9ad4\u5be6\u73fe\uff0c\u907f\u514d\u904b\u884c\u6642\u958b\u92b7\u3002</li> <li>\u5167\u806f\u8207\u512a\u5316\uff1a\u7de8\u8b6f\u5668\u7a4d\u6975\u5167\u806f\u51fd\u6578\u548c\u512a\u5316\u4ee3\u78bc\uff0c\u78ba\u4fdd\u62bd\u8c61\u4e0d\u5f15\u5165\u984d\u5916\u6210\u672c\u3002</li> <li>\u7121\u865b\u64ec\u5316\u958b\u92b7\uff1aRust \u4f7f\u7528\u975c\u614b\u5206\u6d3e\uff08\u800c\u975e\u52d5\u614b\u5206\u6d3e\uff09\u4f5c\u70ba\u9ed8\u8a8d\u65b9\u5f0f\uff0c\u907f\u514d\u865b\u64ec\u51fd\u6578\u8abf\u7528\u7684\u6027\u80fd\u640d\u5931\u3002</li> </ul> <p>\u9019\u4e9b\u6a5f\u5236\u4f7f Rust \u80fd\u5728\u63d0\u4f9b\u9ad8\u5c64\u6b21\u62bd\u8c61\u7684\u540c\u6642\uff0c\u751f\u6210\u8207\u624b\u5beb\u4f4e\u5c64\u4ee3\u78bc\u540c\u7b49\u9ad8\u6548\u7684\u6a5f\u5668\u78bc\u3002</p>"},{"location":"design-principles/zero-cost-abstraction-philosophy/#_2","title":"\u96f6\u6210\u672c\u62bd\u8c61\u7684\u512a\u52e2","text":"<p>Rust \u7684\u96f6\u6210\u672c\u62bd\u8c61\u7406\u5ff5\u5e36\u4f86\u4ee5\u4e0b\u597d\u8655\uff1a</p> <ul> <li>\u6027\u80fd\u8207\u62bd\u8c61\u517c\u5f97\uff1a\u958b\u767c\u8005\u80fd\u4f7f\u7528\u6cdb\u578b\u3001\u7279\u5fb5\u7b49\u5de5\u5177\u63d0\u5347\u4ee3\u78bc\u54c1\u8cea\uff0c\u7121\u9700\u64d4\u5fc3\u6027\u80fd\u640d\u5931\u3002</li> <li>\u7c21\u5316\u958b\u767c\uff1a\u9ad8\u5c64\u6b21\u62bd\u8c61\u4f7f\u4ee3\u78bc\u66f4\u6613\u65bc\u7406\u89e3\u548c\u91cd\u7528\uff0c\u964d\u4f4e\u958b\u767c\u6210\u672c\u3002</li> <li>\u9748\u6d3b\u8a2d\u8a08\uff1aRust \u5141\u8a31\u5728\u9700\u8981\u6642\u9078\u64c7\u4f4e\u5c64\u63a7\u5236\uff0c\u6eff\u8db3\u4e0d\u540c\u5834\u666f\u7684\u9700\u6c42\u3002</li> </ul>"},{"location":"learning-path/stage1-basics/basic-types-syntax/","title":"\u57fa\u672c\u578b\u5225\u8207\u8a9e\u6cd5\uff1aRust \u7684\u5165\u9580\u57fa\u790e","text":"<p>Rust \u662f\u4e00\u9580\u975c\u614b\u578b\u5225\u8a9e\u8a00\uff0c\u64c1\u6709\u6e05\u6670\u4e14\u5f37\u5927\u7684\u8a9e\u6cd5\u7d50\u69cb\uff0c\u65e8\u5728\u5e6b\u52a9\u958b\u767c\u8005\u7de8\u5beb\u5b89\u5168\u9ad8\u6548\u7684\u4ee3\u78bc\u3002</p> <p>\u5c0d\u65bc\u521d\u5b78\u8005\u4f86\u8aaa\uff0c\u638c\u63e1 Rust \u7684\u57fa\u672c\u578b\u5225\u8207\u8a9e\u6cd5\u662f\u5feb\u901f\u4e0a\u624b\u7684\u95dc\u9375\u3002</p>"},{"location":"learning-path/stage1-basics/basic-types-syntax/#rust_1","title":"Rust \u7684\u57fa\u672c\u8a9e\u6cd5\u7d50\u69cb","text":""},{"location":"learning-path/stage1-basics/basic-types-syntax/#_1","title":"\u8b8a\u6578\u8207\u4e0d\u53ef\u8b8a\u6027","text":"<p>\u5728 Rust \u4e2d\uff0c\u8b8a\u6578\u9810\u8a2d\u662f\u4e0d\u53ef\u8b8a\u7684\uff08immutable\uff09\uff0c\u5fc5\u9808\u4f7f\u7528 <code>mut</code> \u95dc\u9375\u5b57\u624d\u80fd\u4f7f\u5176\u53ef\u8b8a\uff1a</p> <pre><code>fn main() {\n    // \u4e0d\u53ef\u8b8a\u8b8a\u6578\n    let x = 5; \n    println!(\"x = {}\", x);\n\n    // \u4ee5\u4e0b\u884c\u6703\u5c0e\u81f4\u7de8\u8b6f\u932f\u8aa4\n    // x = 10;\n\n\n    // \u53ef\u8b8a\u8b8a\u6578\n    let mut y = 10; \n    // \u6b63\u78ba\uff0c\u53ef\u4ee5\u4fee\u6539\n    y = 20; \n    println!(\"y = {}\", y);\n}\n</code></pre> <p>\u9019\u7a2e\u8a2d\u8a08\u9f13\u52f5\u958b\u767c\u8005\u660e\u78ba\u8868\u9054\u8b8a\u6578\u662f\u5426\u9700\u8981\u4fee\u6539\uff0c\u63d0\u5347\u4ee3\u78bc\u7684\u53ef\u8b80\u6027\u8207\u5b89\u5168\u6027\u3002</p>"},{"location":"learning-path/stage1-basics/basic-types-syntax/#_2","title":"\u51fd\u6578\u5b9a\u7fa9","text":"<p>Rust \u4f7f\u7528 <code>fn</code> \u95dc\u9375\u5b57\u5b9a\u7fa9\u51fd\u6578\uff0c\u51fd\u6578\u53c3\u6578\u9700\u8981\u660e\u78ba\u6307\u5b9a\u578b\u5225\uff0c\u8fd4\u56de\u503c\u578b\u5225\u4f7f\u7528 <code>-&gt;</code> \u7b26\u865f\u6307\u5b9a\uff1a</p> <pre><code>fn add(a: i32, b: i32) -&gt; i32 {\n    a + b // \u7121\u9700\u5206\u865f\uff0c\u8868\u793a\u8fd4\u56de\u503c\n}\n\nfn main() {\n    let result = add(3, 5);\n    println!(\"3 + 5 = {}\", result);\n}\n</code></pre> <p>Rust \u7684\u51fd\u6578\u8868\u9054\u5f0f\u4e0d\u9700\u8981 <code>return</code> \u95dc\u9375\u5b57\uff0c\u6700\u5f8c\u4e00\u884c\u7684\u503c\u6703\u81ea\u52d5\u4f5c\u70ba\u8fd4\u56de\u503c\u3002</p>"},{"location":"learning-path/stage1-basics/basic-types-syntax/#_3","title":"\u63a7\u5236\u6d41\u7a0b","text":"<p>Rust \u652f\u63f4\u5e38\u898b\u7684\u63a7\u5236\u6d41\u7a0b\u7d50\u69cb\uff0c\u5982 <code>if</code>\u3001<code>while</code> \u548c <code>for</code>\uff1a</p> <pre><code>fn main() {\n    let number = 7;\n\n    // if \u689d\u4ef6\u4e0d\u9700\u8981\u62ec\u865f\n    if number &gt; 5 {\n        println!(\"number is greater than 5\");\n    } else {\n        println!(\"number is 5 or less\");\n    }\n\n    // for \u8ff4\u5708\u904d\u6b77\u7bc4\u570d\n    for i in 1..4 {\n        println!(\"i = {}\", i);\n    }\n}\n</code></pre> <p>\u9019\u4e9b\u7d50\u69cb\u8207\u5176\u4ed6\u8a9e\u8a00\u985e\u4f3c\uff0c\u4f46 Rust \u78ba\u4fdd\u689d\u4ef6\u8868\u9054\u5f0f\u5fc5\u9808\u662f\u5e03\u6797\u578b\u5225\uff0c\u9632\u6b62\u96b1\u5f0f\u8f49\u63db\u932f\u8aa4\u3002</p>"},{"location":"learning-path/stage1-basics/basic-types-syntax/#rust_2","title":"Rust \u7684\u57fa\u672c\u578b\u5225","text":""},{"location":"learning-path/stage1-basics/basic-types-syntax/#_4","title":"\u6574\u6578\u578b\u5225","text":"<p>Rust \u652f\u63f4\u6709\u7b26\u865f\u548c\u7121\u7b26\u865f\u6574\u6578\uff0c\u6839\u64da\u5927\u5c0f\u5206\u70ba\u4e0d\u540c\u578b\u5225\uff1a</p> <ul> <li>\u6709\u7b26\u865f\uff1a<code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>i128</code>\uff08\u7bc4\u570d\u5f9e\u8ca0\u6578\u5230\u6b63\u6578\uff09</li> <li>\u7121\u7b26\u865f\uff1a<code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>u128</code>\uff08\u7bc4\u570d\u5f9e 0 \u5230\u6b63\u6578\uff09</li> <li>\u5e73\u53f0\u76f8\u95dc\uff1a<code>isize</code>, <code>usize</code>\uff08\u6839\u64da\u7cfb\u7d71\u67b6\u69cb\u70ba 32 \u4f4d\u6216 64 \u4f4d\uff09</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>fn main() {\n    let a: i32 = -42; // \u6709\u7b26\u865f 32 \u4f4d\u6574\u6578\n    let b: u8 = 255;  // \u7121\u7b26\u865f 8 \u4f4d\u6574\u6578\n    println!(\"a = {}, b = {}\", a, b);\n}\n</code></pre>"},{"location":"learning-path/stage1-basics/basic-types-syntax/#_5","title":"\u6d6e\u9ede\u578b\u5225","text":"<p>Rust \u652f\u63f4\u5169\u7a2e\u6d6e\u9ede\u578b\u5225\uff1a</p> <ul> <li><code>f32</code>\uff1a\u55ae\u7cbe\u5ea6\u6d6e\u9ede\u6578</li> <li><code>f64</code>\uff1a\u96d9\u7cbe\u5ea6\u6d6e\u9ede\u6578\uff08\u9810\u8a2d\uff09</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>fn main() {\n    let x: f64 = 3.14;\n    println!(\"x = {}\", x);\n}\n</code></pre>"},{"location":"learning-path/stage1-basics/basic-types-syntax/#_6","title":"\u5e03\u6797\u578b\u5225","text":"<p>\u5e03\u6797\u578b\u5225\u70ba <code>bool</code>\uff0c\u503c\u70ba <code>true</code> \u6216 <code>false</code>\uff1a</p> <pre><code>fn main() {\n    let is_active: bool = true;\n    println!(\"is_active = {}\", is_active);\n}\n</code></pre>"},{"location":"learning-path/stage1-basics/basic-types-syntax/#_7","title":"\u5b57\u5143\u8207\u5b57\u4e32","text":"<ul> <li>\u5b57\u5143 (<code>char</code>)\uff1a\u8868\u793a\u55ae\u500b Unicode \u5b57\u5143\uff0c\u4f7f\u7528\u55ae\u5f15\u865f\u3002</li> <li>\u5b57\u4e32 (<code>String</code> \u548c <code>&amp;str</code>)\uff1a<code>String</code> \u662f\u53ef\u8b8a\u7684\u5806\u5206\u914d\u5b57\u4e32\uff0c<code>&amp;str</code> \u662f\u4e0d\u53ef\u8b8a\u7684\u5b57\u4e32\u5207\u7247\u3002</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>fn main() {\n    let c: char = 'A';\n    let s: &amp;str = \"Hello\";\n    let mut s2: String = String::from(\"World\");\n    s2.push_str(\"!\");\n    println!(\"c = {}, s = {}, s2 = {}\", c, s, s2);\n}\n</code></pre>"},{"location":"learning-path/stage1-basics/basic-types-syntax/#_8","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u7df4\u7fd2\u57fa\u672c\u8a9e\u6cd5\uff1a\u7de8\u5beb\u7c21\u55ae\u7684 Rust \u7a0b\u5f0f\uff0c\u4f7f\u7528\u8b8a\u6578\u3001\u51fd\u6578\u548c\u63a7\u5236\u6d41\u7a0b\uff0c\u719f\u6089\u8a9e\u6cd5\u7d50\u69cb\u3002</li> <li>\u7406\u89e3\u578b\u5225\u7cfb\u7d71\uff1a\u5617\u8a66\u4f7f\u7528\u4e0d\u540c\u7684\u57fa\u672c\u578b\u5225\uff0c\u89c0\u5bdf\u578b\u5225\u932f\u8aa4\u5982\u4f55\u88ab\u7de8\u8b6f\u5668\u6355\u7372\u3002</li> <li>\u4f7f\u7528 Rust Playground\uff1a\u5728\u7dda\u4e0a\u74b0\u5883\u4e2d\u5feb\u901f\u6e2c\u8a66\u4ee3\u78bc\u7247\u6bb5\uff0c\u719f\u6089\u8a9e\u6cd5\u8207\u884c\u70ba\u3002</li> </ul>"},{"location":"learning-path/stage1-basics/ownership-basics/","title":"\u6240\u6709\u6b0a\u57fa\u790e\uff1aRust \u7684\u6838\u5fc3\u898f\u5247","text":"<p>\u6240\u6709\u6b0a (Ownership) \u662f Rust \u8a9e\u8a00\u6700\u7368\u7279\u4e14\u91cd\u8981\u7684\u6982\u5ff5\u4e4b\u4e00\uff0c\u4e5f\u662f\u78ba\u4fdd\u8a18\u61b6\u9ad4\u5b89\u5168\u7684\u6838\u5fc3\u6a5f\u5236\u3002\u5c0d\u65bc\u521d\u5b78\u8005\u4f86\u8aaa\uff0c\u7406\u89e3\u6240\u6709\u6b0a\u662f\u5b78\u7fd2 Rust \u7684\u7b2c\u4e00\u6b65\u3002\u672c\u6587\u5c07\u4ecb\u7d39\u6240\u6709\u6b0a\u7684\u57fa\u672c\u898f\u5247\u8207\u61c9\u7528\uff0c\u5e6b\u52a9\u60a8\u5feb\u901f\u638c\u63e1\u9019\u4e00\u57fa\u790e\u6982\u5ff5\u3002</p>"},{"location":"learning-path/stage1-basics/ownership-basics/#_1","title":"\u4ec0\u9ebc\u662f\u6240\u6709\u6b0a\uff1f","text":"<p>\u5728 Rust \u4e2d\uff0c\u6bcf\u500b\u503c\uff08\u6578\u64da\uff09\u90fd\u6709\u4e00\u500b\u660e\u78ba\u7684\u6240\u6709\u8005\uff08\u901a\u5e38\u662f\u4e00\u500b\u8b8a\u6578\uff09\uff0c\u8ca0\u8cac\u7ba1\u7406\u8a72\u503c\u7684\u8a18\u61b6\u9ad4\u3002\u7576\u6240\u6709\u8005\u8d85\u51fa\u4f5c\u7528\u57df\u6642\uff0c\u8a72\u503c\u7684\u8a18\u61b6\u9ad4\u6703\u81ea\u52d5\u91cb\u653e\uff0c\u7121\u9700\u624b\u52d5\u7ba1\u7406\u6216\u5783\u573e\u56de\u6536\u3002\u9019\u7a2e\u8a2d\u8a08\u907f\u514d\u4e86\u8a18\u61b6\u9ad4\u6d29\u6f0f\u548c\u4f7f\u7528\u5f8c\u91cb\u653e (use-after-free) \u7b49\u932f\u8aa4\u3002</p> <p>\u6240\u6709\u6b0a\u7684\u6838\u5fc3\u7406\u5ff5\u662f\uff1a\u8a18\u61b6\u9ad4\u7ba1\u7406\u7531\u7de8\u8b6f\u5668\u5728\u7de8\u8b6f\u6642\u6aa2\u67e5\uff0c\u78ba\u4fdd\u5b89\u5168\u8207\u9ad8\u6548\u3002</p>"},{"location":"learning-path/stage1-basics/ownership-basics/#_2","title":"\u6240\u6709\u6b0a\u7684\u4e09\u5927\u57fa\u672c\u898f\u5247","text":"<p>Rust \u7684\u6240\u6709\u6b0a\u7cfb\u7d71\u57fa\u65bc\u4ee5\u4e0b\u4e09\u500b\u7c21\u55ae\u4f46\u56b4\u683c\u7684\u898f\u5247\uff1a</p> <ol> <li>\u6bcf\u500b\u503c\u53ea\u6709\u4e00\u500b\u53ef\u8b8a\u7684\u6240\u6709\u8005\uff1a\u5728\u4efb\u610f\u6642\u523b\uff0c\u4e00\u500b\u503c\u53ea\u80fd\u88ab\u4e00\u500b\u8b8a\u6578\u64c1\u6709\uff0c\u4e14\u8a72\u8b8a\u6578\u53ef\u4ee5\u4fee\u6539\u8a72\u503c\u3002</li> <li>\u503c\u53ef\u4ee5\u88ab\u591a\u500b\u4e0d\u53ef\u8b8a\u501f\u7528\uff1a\u5982\u679c\u503c\u4e0d\u88ab\u4fee\u6539\uff0c\u53ef\u4ee5\u6709\u591a\u500b\u8b8a\u6578\u4ee5\u300c\u53ea\u8b80\u300d\u65b9\u5f0f\u501f\u7528\u8a72\u503c\u3002</li> <li>\u7576\u6240\u6709\u8005\u8d85\u51fa\u4f5c\u7528\u57df\u6642\uff0c\u503c\u6703\u88ab\u81ea\u52d5\u91cb\u653e\uff1a\u7121\u9700\u624b\u52d5\u91cb\u653e\u8a18\u61b6\u9ad4\uff0cRust \u6703\u5728\u8b8a\u6578\u8d85\u51fa\u4f5c\u7528\u57df\u6642\u81ea\u52d5\u6e05\u7406\u3002</li> </ol> <p>\u9019\u4e9b\u898f\u5247\u78ba\u4fdd\u4e86\u8a18\u61b6\u9ad4\u5b89\u5168\uff0c\u9632\u6b62\u6578\u64da\u7af6\u8cfd\u548c\u61f8\u5782\u6307\u91dd\u7b49\u554f\u984c\u3002</p>"},{"location":"learning-path/stage1-basics/ownership-basics/#_3","title":"\u6240\u6709\u6b0a\u7684\u57fa\u672c\u61c9\u7528","text":"<p>\u8b93\u6211\u5011\u901a\u904e\u7c21\u55ae\u7684\u4ee3\u78bc\u793a\u4f8b\u4f86\u7406\u89e3\u6240\u6709\u6b0a\uff1a</p> <pre><code>fn main() {\n    // \u5275\u5efa\u4e00\u500b String \u503c\uff0cs \u662f\u5176\u6240\u6709\u8005\n    let s = String::from(\"hello\");\n\n    // \u5c07 s \u7684\u6240\u6709\u6b0a\u8f49\u79fb\u7d66 s2\n    let s2 = s;\n\n    // \u4ee5\u4e0b\u884c\u6703\u5c0e\u81f4\u7de8\u8b6f\u932f\u8aa4\uff0c\u56e0\u70ba s \u5df2\u4e0d\u518d\u64c1\u6709\u8a72\u503c\n    // println!(\"s = {}\", s);\n    // \u6b63\u78ba\u4f7f\u7528 s2\uff0c\u56e0\u70ba\u5b83\u73fe\u5728\u662f\u6240\u6709\u8005\n    println!(\"s2 = {}\", s2);\n}\n</code></pre> <p>\u5728\u9019\u500b\u4f8b\u5b50\u4e2d\uff1a</p> <ul> <li><code>s</code> \u6700\u521d\u64c1\u6709 <code>String</code> \u503c\u7684\u6240\u6709\u6b0a\u3002</li> <li>\u7576 <code>s</code> \u7684\u503c\u88ab\u8ce6\u503c\u7d66 <code>s2</code> \u6642\uff0c\u6240\u6709\u6b0a\u8f49\u79fb\uff0c<code>s</code> \u4e0d\u518d\u6709\u6548\u3002</li> <li>Rust \u7de8\u8b6f\u5668\u6703\u963b\u6b62\u5c0d <code>s</code> \u7684\u8a2a\u554f\uff0c\u907f\u514d\u4f7f\u7528\u7121\u6548\u6578\u64da\u3002</li> </ul>"},{"location":"learning-path/stage1-basics/ownership-basics/#borrowing","title":"\u501f\u7528 (Borrowing) \u4ecb\u7d39","text":"<p>\u9664\u4e86\u6240\u6709\u6b0a\u8f49\u79fb\uff0cRust \u9084\u5141\u8a31\u901a\u904e\u300c\u501f\u7528\u300d\u4f86\u8a2a\u554f\u503c\uff0c\u800c\u4e0d\u8f49\u79fb\u6240\u6709\u6b0a\u3002\u501f\u7528\u5206\u70ba\u5169\u7a2e\uff1a</p> <ul> <li>\u4e0d\u53ef\u8b8a\u501f\u7528\uff1a\u4ee5\u53ea\u8b80\u65b9\u5f0f\u8a2a\u554f\u503c\uff0c\u4f7f\u7528 <code>&amp;</code> \u7b26\u865f\u3002</li> <li>\u53ef\u8b8a\u501f\u7528\uff1a\u4ee5\u53ef\u5beb\u65b9\u5f0f\u8a2a\u554f\u503c\uff0c\u4f7f\u7528 <code>&amp;mut</code> \u7b26\u865f\uff0c\u4f46\u540c\u4e00\u6642\u9593\u53ea\u80fd\u6709\u4e00\u500b\u53ef\u8b8a\u501f\u7528\u3002</li> </ul> <pre><code>fn main() {\n\n    let mut s = String::from(\"hello\");\n\n    // \u4e0d\u53ef\u8b8a\u501f\u7528\n    let r1 = &amp;s;\n    println!(\"r1 = {}\", r1);\n\n    // \u53ef\u8b8a\u501f\u7528\n    let r2 = &amp;mut s;\n    r2.push_str(\", world\");\n    println!(\"r2 = {}\", r2);\n}\n</code></pre> <p>\u501f\u7528\u898f\u5247\u78ba\u4fdd\u4e86\u6578\u64da\u8a2a\u554f\u7684\u5b89\u5168\u6027\uff0c\u907f\u514d\u591a\u500b\u53ef\u8b8a\u5f15\u7528\u5c0e\u81f4\u7684\u7af6\u8cfd\u689d\u4ef6\u3002</p>"},{"location":"learning-path/stage1-basics/ownership-basics/#_4","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u7df4\u7fd2\u6240\u6709\u6b0a\u8f49\u79fb\uff1a\u7de8\u5beb\u7c21\u55ae\u7a0b\u5f0f\uff0c\u89c0\u5bdf\u6240\u6709\u6b0a\u8f49\u79fb\u6642\u8b8a\u6578\u7684\u884c\u70ba\uff0c\u7406\u89e3\u70ba\u4ec0\u9ebc\u67d0\u4e9b\u4ee3\u78bc\u6703\u5c0e\u81f4\u7de8\u8b6f\u932f\u8aa4\u3002</li> <li>\u719f\u6089\u501f\u7528\u898f\u5247\uff1a\u5617\u8a66\u4f7f\u7528\u4e0d\u53ef\u8b8a\u548c\u53ef\u8b8a\u501f\u7528\uff0c\u89c0\u5bdf\u7de8\u8b6f\u5668\u5982\u4f55\u963b\u6b62\u4e0d\u5b89\u5168\u7684\u8a2a\u554f\u3002</li> <li>\u95b1\u8b80\u932f\u8aa4\u8a0a\u606f\uff1a\u7576\u9047\u5230\u6240\u6709\u6b0a\u76f8\u95dc\u7684\u7de8\u8b6f\u932f\u8aa4\u6642\uff0c\u4ed4\u7d30\u95b1\u8b80\u932f\u8aa4\u8a0a\u606f\uff0c\u7406\u89e3\u5176\u80cc\u5f8c\u7684\u898f\u5247\u3002</li> </ul>"},{"location":"learning-path/stage2-intermediate/error-handling-basics/","title":"\u932f\u8aa4\u8655\u7406\u57fa\u790e\uff1aRust \u7684\u53ef\u9760\u8a2d\u8a08","text":"<p>\u932f\u8aa4\u8655\u7406\u662f Rust \u8a9e\u8a00\u4e2d\u4e00\u500b\u91cd\u8981\u7684\u57fa\u790e\u6982\u5ff5\uff0c\u65e8\u5728\u5e6b\u52a9\u958b\u767c\u8005\u660e\u78ba\u8655\u7406\u7a0b\u5f0f\u4e2d\u53ef\u80fd\u51fa\u73fe\u7684\u7570\u5e38\u60c5\u6cc1\uff0c\u907f\u514d\u96b1\u85cf\u932f\u8aa4\u6216\u672a\u5b9a\u7fa9\u884c\u70ba\u3002</p> <p>\u5c0d\u65bc\u6709\u57fa\u672c Rust \u77e5\u8b58\u7684\u5b78\u7fd2\u8005\u4f86\u8aaa\uff0c\u638c\u63e1\u932f\u8aa4\u8655\u7406\u662f\u7de8\u5beb\u53ef\u9760\u7a0b\u5f0f\u7684\u91cd\u8981\u4e00\u6b65\u3002</p>"},{"location":"learning-path/stage2-intermediate/error-handling-basics/#_1","title":"\u4ec0\u9ebc\u662f\u932f\u8aa4\u8655\u7406\uff1f","text":"<p>\u5728\u7a0b\u5f0f\u8a2d\u8a08\u4e2d\uff0c\u932f\u8aa4\u662f\u4e0d\u53ef\u907f\u514d\u7684\uff0c\u4f8b\u5982\u6587\u4ef6\u8b80\u53d6\u5931\u6557\u3001\u7db2\u7d61\u9023\u63a5\u4e2d\u65b7\u6216\u7121\u6548\u8f38\u5165\u3002</p> <p>Rust \u7684\u932f\u8aa4\u8655\u7406\u6a5f\u5236\u8981\u6c42\u958b\u767c\u8005\u986f\u5f0f\u8655\u7406\u9019\u4e9b\u6f5b\u5728\u5931\u6557\uff0c\u800c\u4e0d\u662f\u5ffd\u7565\u6216\u4f9d\u8cf4\u4f8b\u5916 (exception) \u6a5f\u5236\uff0c\u4ee5\u78ba\u4fdd\u7a0b\u5f0f\u884c\u70ba\u53ef\u9810\u6e2c\u4e14\u53ef\u9760\u3002</p> <p>Rust \u932f\u8aa4\u8655\u7406\u7684\u6838\u5fc3\u7406\u5ff5\u662f\uff1a\u932f\u8aa4\u662f\u503c\uff0c\u5fc5\u9808\u88ab\u986f\u5f0f\u8655\u7406\u3002</p>"},{"location":"learning-path/stage2-intermediate/error-handling-basics/#_2","title":"\u70ba\u4ec0\u9ebc\u9700\u8981\u986f\u5f0f\u932f\u8aa4\u8655\u7406\uff1f","text":"<p>\u50b3\u7d71\u8a9e\u8a00\u4e2d\u7684\u932f\u8aa4\u8655\u7406\u53ef\u80fd\u5c0e\u81f4\u554f\u984c\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u96b1\u85cf\u932f\u8aa4\uff1a\u672a\u6aa2\u67e5\u7684\u932f\u8aa4\u88ab\u5ffd\u7565\uff0c\u5c0e\u81f4\u7a0b\u5f0f\u5728\u5f8c\u7e8c\u968e\u6bb5\u5d29\u6f70\u3002</li> <li>\u8907\u96dc\u4f8b\u5916\u6d41\u7a0b\uff1a\u4f8b\u5916\u6a5f\u5236\u53ef\u80fd\u4f7f\u4ee3\u78bc\u63a7\u5236\u6d41\u7a0b\u96e3\u4ee5\u8ffd\u8e2a\u3002</li> <li>\u904b\u884c\u6642\u958b\u92b7\uff1a\u4f8b\u5916\u8655\u7406\u53ef\u80fd\u5f15\u5165\u4e0d\u53ef\u9810\u6e2c\u7684\u6027\u80fd\u6210\u672c\u3002</li> </ul> <p>Rust \u901a\u904e <code>Result</code> \u548c <code>Option</code> \u578b\u5225\uff0c\u5c07\u932f\u8aa4\u4f5c\u70ba\u666e\u901a\u503c\u8655\u7406\uff0c\u5f37\u5236\u958b\u767c\u8005\u5728\u7de8\u5beb\u4ee3\u78bc\u6642\u8003\u616e\u5931\u6557\u60c5\u6cc1\u3002</p>"},{"location":"learning-path/stage2-intermediate/error-handling-basics/#_3","title":"\u932f\u8aa4\u8655\u7406\u7684\u57fa\u672c\u5de5\u5177","text":""},{"location":"learning-path/stage2-intermediate/error-handling-basics/#option","title":"Option \u578b\u5225\uff1a\u8655\u7406\u53ef\u80fd\u4e0d\u5b58\u5728\u7684\u503c","text":"<p><code>Option</code> \u578b\u5225\u7528\u65bc\u8868\u793a\u503c\u53ef\u80fd\u5b58\u5728\u6216\u4e0d\u5b58\u5728\uff0c\u985e\u4f3c\u65bc\u5176\u4ed6\u8a9e\u8a00\u4e2d\u7684 <code>null</code>\uff0c\u4f46\u66f4\u5b89\u5168\uff1a</p> <pre><code>fn find_first_space(s: &amp;str) -&gt; Option&lt;usize&gt; {\n    for (i, c) in s.chars().enumerate() {\n        if c == ' ' {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n    let text = \"Hello World\";\n    match find_first_space(text) {\n        Some(index) =&gt; println!(\"First space at index: {}\", index),\n        None =&gt; println!(\"No space found\"),\n    }\n}\n</code></pre> <p><code>Option</code> \u6709\u5169\u7a2e\u8b8a\u9ad4\uff1a<code>Some(T)</code> \u8868\u793a\u503c\u5b58\u5728\uff0c<code>None</code> \u8868\u793a\u503c\u4e0d\u5b58\u5728\u3002</p> <p>Rust \u5f37\u5236\u60a8\u8655\u7406\u9019\u5169\u7a2e\u60c5\u6cc1\uff0c\u907f\u514d\u5ffd\u7565 <code>None</code>\u3002</p>"},{"location":"learning-path/stage2-intermediate/error-handling-basics/#result","title":"Result \u578b\u5225\uff1a\u8655\u7406\u53ef\u80fd\u5931\u6557\u7684\u64cd\u4f5c","text":"<p><code>Result</code> \u578b\u5225\u7528\u65bc\u8868\u793a\u64cd\u4f5c\u53ef\u80fd\u6210\u529f\u6216\u5931\u6557\uff1a</p> <pre><code>use std::fs::File;\n\nfn open_file(path: &amp;str) -&gt; Result&lt;File, std::io::Error&gt; {\n    File::open(path)\n}\n\nfn main() {\n    match open_file(\"example.txt\") {\n        Ok(file) =&gt; println!(\"File opened successfully: {:?}\", file),\n        Err(e) =&gt; println!(\"Failed to open file: {}\", e),\n    }\n}\n</code></pre> <p><code>Result</code> \u6709\u5169\u7a2e\u8b8a\u9ad4\uff1a<code>Ok(T)</code> \u8868\u793a\u6210\u529f\uff0c<code>Err(E)</code> \u8868\u793a\u5931\u6557\u3002</p> <p>Rust \u5f37\u5236\u60a8\u8655\u7406\u932f\u8aa4\u5206\u652f\uff0c\u78ba\u4fdd\u5931\u6557\u4e0d\u6703\u88ab\u5ffd\u7565\u3002</p>"},{"location":"learning-path/stage2-intermediate/error-handling-basics/#_4","title":"\u7c21\u5316\u932f\u8aa4\u8655\u7406\uff1a? \u64cd\u4f5c\u7b26","text":"<p><code>?</code> \u64cd\u4f5c\u7b26\u7528\u65bc\u7c21\u5316\u932f\u8aa4\u50b3\u64ad\uff0c\u7279\u5225\u662f\u5728\u51fd\u6578\u8fd4\u56de <code>Result</code> \u6216 <code>Option</code> \u6642\uff1a</p> <pre><code>use std::fs::File;\nuse std::io::Read;\n\nfn read_file(path: &amp;str) -&gt; Result&lt;String, std::io::Error&gt; {\n    let mut file = File::open(path)?;\n    let mut contents = String::new();\n    file.read_to_string(&amp;mut contents)?;\n    Ok(contents)\n}\n\nfn main() {\n    match read_file(\"example.txt\") {\n        Ok(contents) =&gt; println!(\"File contents: {}\", contents),\n        Err(e) =&gt; println!(\"Error reading file: {}\", e),\n    }\n}\n</code></pre> <p><code>?</code> \u64cd\u4f5c\u7b26\u6703\u5728\u64cd\u4f5c\u5931\u6557\u6642\u63d0\u524d\u8fd4\u56de\u932f\u8aa4\uff0c\u7c21\u5316\u4ee3\u78bc\u7d50\u69cb\u3002</p>"},{"location":"learning-path/stage2-intermediate/error-handling-basics/#_5","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u7df4\u7fd2\u4f7f\u7528 Option \u548c Result\uff1a\u7de8\u5beb\u7c21\u55ae\u7a0b\u5f0f\uff0c\u8655\u7406\u53ef\u80fd\u4e0d\u5b58\u5728\u7684\u503c\u6216\u53ef\u80fd\u5931\u6557\u7684\u64cd\u4f5c\uff0c\u719f\u6089\u6a21\u5f0f\u5339\u914d\u3002</li> <li>\u907f\u514d unwrap() \u7684\u6feb\u7528\uff1a\u96d6\u7136 <code>unwrap()</code> \u53ef\u4ee5\u5feb\u901f\u7372\u53d6\u503c\uff0c\u4f46\u53ef\u80fd\u5c0e\u81f4\u7a0b\u5f0f panic\uff0c\u5efa\u8b70\u50c5\u5728\u6e2c\u8a66\u6216\u78ba\u5b9a\u5b89\u5168\u6642\u4f7f\u7528\u3002</li> <li>\u63a2\u7d22\u932f\u8aa4\u50b3\u64ad\uff1a\u4f7f\u7528 <code>?</code> \u64cd\u4f5c\u7b26\u7c21\u5316\u932f\u8aa4\u8655\u7406\uff0c\u7406\u89e3\u5176\u5728\u51fd\u6578\u4e2d\u7684\u884c\u70ba\u3002</li> </ul>"},{"location":"learning-path/stage2-intermediate/lifetimes-intro/","title":"\u751f\u547d\u9031\u671f\u5165\u9580\uff1aRust \u7684\u501f\u7528\u6aa2\u67e5\u6a5f\u5236","text":"<p>\u751f\u547d\u9031\u671f (Lifetimes) \u662f Rust \u8a9e\u8a00\u4e2d\u4e00\u500b\u7368\u7279\u4e14\u91cd\u8981\u7684\u6982\u5ff5\uff0c\u7528\u65bc\u78ba\u4fdd\u501f\u7528 (borrowing) \u7684\u5b89\u5168\u6027\u548c\u6b63\u78ba\u6027\u3002</p> <p>\u5c0d\u65bc\u6709\u57fa\u672c Rust \u77e5\u8b58\u7684\u5b78\u7fd2\u8005\u4f86\u8aaa\uff0c\u7406\u89e3\u751f\u547d\u9031\u671f\u662f\u638c\u63e1\u9032\u968e\u8a18\u61b6\u9ad4\u7ba1\u7406\u7684\u95dc\u9375\u4e00\u6b65\u3002</p>"},{"location":"learning-path/stage2-intermediate/lifetimes-intro/#_1","title":"\u4ec0\u9ebc\u662f\u751f\u547d\u9031\u671f\uff1f","text":"<p>\u5728 Rust \u4e2d\uff0c\u751f\u547d\u9031\u671f\u662f\u6307\u8b8a\u6578\u6216\u501f\u7528\u5728\u7a0b\u5f0f\u4e2d\u6709\u6548\u7684\u6642\u9593\u7bc4\u570d\u3002</p> <p>Rust \u7de8\u8b6f\u5668\u4f7f\u7528\u751f\u547d\u9031\u671f\u4f86\u6aa2\u67e5\u501f\u7528\u7684\u6709\u6548\u6027\uff0c\u78ba\u4fdd\u501f\u7528\u7684\u6578\u64da\u4e0d\u6703\u5728\u6240\u6709\u8005\u88ab\u91cb\u653e\u5f8c\u7e7c\u7e8c\u88ab\u8a2a\u554f\uff0c\u5f9e\u800c\u9632\u6b62\u61f8\u5782\u6307\u91dd (dangling pointers) \u7684\u51fa\u73fe\u3002</p> <p>\u751f\u547d\u9031\u671f\u7684\u6838\u5fc3\u7406\u5ff5\u662f\uff1a\u501f\u7528\u7684\u751f\u547d\u9031\u671f\u4e0d\u80fd\u8d85\u904e\u5176\u501f\u7528\u6578\u64da\u7684\u6240\u6709\u8005\u7684\u751f\u547d\u9031\u671f\u3002</p>"},{"location":"learning-path/stage2-intermediate/lifetimes-intro/#_2","title":"\u70ba\u4ec0\u9ebc\u9700\u8981\u751f\u547d\u9031\u671f\uff1f","text":"<p>\u5728 Rust \u7684\u6240\u6709\u6b0a\u7cfb\u7d71\u4e2d\uff0c\u501f\u7528\u5141\u8a31\u6211\u5011\u5728\u4e0d\u8f49\u79fb\u6240\u6709\u6b0a\u7684\u60c5\u6cc1\u4e0b\u8a2a\u554f\u6578\u64da\u3002\u7136\u800c\uff0c\u501f\u7528\u53ef\u80fd\u5c0e\u81f4\u554f\u984c\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u61f8\u5782\u6307\u91dd\uff1a\u5982\u679c\u501f\u7528\u6307\u5411\u7684\u6578\u64da\u5df2\u88ab\u91cb\u653e\uff0c\u7e7c\u7e8c\u8a2a\u554f\u8a72\u6578\u64da\u6703\u5c0e\u81f4\u672a\u5b9a\u7fa9\u884c\u70ba\u3002</li> <li>\u6578\u64da\u7af6\u8cfd\uff1a\u4e0d\u7576\u7684\u501f\u7528\u53ef\u80fd\u5c0e\u81f4\u591a\u500b\u53ef\u8b8a\u5f15\u7528\u540c\u6642\u5b58\u5728\uff0c\u7834\u58de\u8a18\u61b6\u9ad4\u5b89\u5168\u3002</li> </ul> <p>Rust \u901a\u904e\u751f\u547d\u9031\u671f\u6a5f\u5236\uff0c\u5728\u7de8\u8b6f\u6642\u6aa2\u67e5\u501f\u7528\u7684\u6709\u6548\u7bc4\u570d\uff0c\u78ba\u4fdd\u9019\u4e9b\u554f\u984c\u4e0d\u6703\u767c\u751f\u3002</p>"},{"location":"learning-path/stage2-intermediate/lifetimes-intro/#_3","title":"\u751f\u547d\u9031\u671f\u7684\u57fa\u672c\u8a9e\u6cd5\u8207\u61c9\u7528","text":"<p>Rust \u4f7f\u7528\u55ae\u5f15\u865f\u52a0\u4e0a\u6a19\u8b58\u7b26\u4f86\u8868\u793a\u751f\u547d\u9031\u671f\uff0c\u4f8b\u5982 <code>'a</code>\u3002</p> <p>\u751f\u547d\u9031\u671f\u901a\u5e38\u7528\u65bc\u51fd\u6578\u53c3\u6578\u548c\u8fd4\u56de\u503c\uff0c\u544a\u8a34\u7de8\u8b6f\u5668\u501f\u7528\u4e4b\u9593\u7684\u95dc\u4fc2\u3002</p>"},{"location":"learning-path/stage2-intermediate/lifetimes-intro/#_4","title":"\u7c21\u55ae\u793a\u4f8b\uff1a\u51fd\u6578\u4e2d\u7684\u751f\u547d\u9031\u671f","text":"<pre><code>// \u5b9a\u7fa9\u4e00\u500b\u51fd\u6578\uff0c\u8fd4\u56de\u5169\u500b\u5b57\u4e32\u4e2d\u8f03\u9577\u7684\u90a3\u500b\nfn longest&lt;'a&gt;(s1: &amp;'a str, s2: &amp;'a str) -&gt; &amp;'a str {\n    if s1.len() &gt; s2.len() {\n        s1\n    } else {\n        s2\n    }\n}\n\nfn main() {\n    let string1 = String::from(\"short\");\n    let result;\n    {\n        let string2 = String::from(\"longer string\");\n        result = longest(&amp;string1, &amp;string2);\n    }\n    // \u4ee5\u4e0b\u884c\u6703\u5c0e\u81f4\u7de8\u8b6f\u932f\u8aa4\uff0c\u56e0\u70ba string2 \u5df2\u8d85\u51fa\u4f5c\u7528\u57df\n    // println!(\"The longest string is {}\", result);\n}\n</code></pre> <p>\u5728\u9019\u500b\u4f8b\u5b50\u4e2d\uff1a</p> <ul> <li><code>'a</code> \u8868\u793a\u4e00\u500b\u751f\u547d\u9031\u671f\uff0c\u544a\u8a34\u7de8\u8b6f\u5668 <code>s1</code> \u548c <code>s2</code> \u7684\u501f\u7528\u4ee5\u53ca\u8fd4\u56de\u503c\u7684\u501f\u7528\u5171\u4eab\u76f8\u540c\u7684\u751f\u547d\u9031\u671f\u3002</li> <li>\u8fd4\u56de\u503c\u7684\u751f\u547d\u9031\u671f\u5fc5\u9808\u8207\u53c3\u6578\u4e2d\u8f03\u77ed\u7684\u751f\u547d\u9031\u671f\u4e00\u81f4\uff0c\u56e0\u6b64\u5982\u679c <code>string2</code> \u8d85\u51fa\u4f5c\u7528\u57df\uff0c\u8fd4\u56de\u503c\u4e5f\u8b8a\u5f97\u7121\u6548\u3002</li> </ul>"},{"location":"learning-path/stage2-intermediate/lifetimes-intro/#_5","title":"\u7d50\u69cb\u9ad4\u4e2d\u7684\u751f\u547d\u9031\u671f","text":"<p>\u751f\u547d\u9031\u671f\u4e5f\u5e38\u7528\u65bc\u7d50\u69cb\u9ad4\uff0c\u7576\u7d50\u69cb\u9ad4\u5305\u542b\u501f\u7528\u6578\u64da\u6642\uff1a</p> <pre><code>struct BorrowedData&lt;'a&gt; {\n    data: &amp;'a str,\n}\n\nfn main() {\n    let text = String::from(\"Hello\");\n    let borrowed = BorrowedData { data: &amp;text };\n    println!(\"Borrowed data: {}\", borrowed.data);\n}\n</code></pre> <p>\u9019\u88e1\uff0c<code>'a</code> \u78ba\u4fdd <code>BorrowedData</code> \u7d50\u69cb\u9ad4\u4e2d\u7684\u501f\u7528\u6578\u64da\u4e0d\u6703\u6bd4\u5176\u4f86\u6e90\u6578\u64da\u6d3b\u5f97\u66f4\u4e45\u3002</p>"},{"location":"learning-path/stage2-intermediate/lifetimes-intro/#lifetime-elision","title":"\u751f\u547d\u9031\u671f\u7701\u7565 (Lifetime Elision)","text":"<p>\u5728\u8a31\u591a\u7c21\u55ae\u60c5\u6cc1\u4e0b\uff0cRust \u7de8\u8b6f\u5668\u6703\u81ea\u52d5\u63a8\u65b7\u751f\u547d\u9031\u671f\uff0c\u7121\u9700\u986f\u5f0f\u6a19\u8a3b\u3002\u4f8b\u5982\uff1a</p> <pre><code>fn first_word(s: &amp;str) -&gt; &amp;str {\n    let bytes = s.as_bytes();\n    for (i, &amp;item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return &amp;s[0..i];\n        }\n    }\n    s\n}\n</code></pre> <p>Rust \u6839\u64da\u751f\u547d\u9031\u671f\u7701\u7565\u898f\u5247\u63a8\u65b7\u53c3\u6578\u548c\u8fd4\u56de\u503c\u7684\u751f\u547d\u9031\u671f\uff0c\u7c21\u5316\u4ee3\u78bc\u3002</p>"},{"location":"learning-path/stage2-intermediate/lifetimes-intro/#_6","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u7406\u89e3\u501f\u7528\u8207\u751f\u547d\u9031\u671f\u7684\u95dc\u4fc2\uff1a\u7df4\u7fd2\u7de8\u5beb\u5305\u542b\u501f\u7528\u7684\u51fd\u6578\uff0c\u89c0\u5bdf\u7de8\u8b6f\u5668\u5982\u4f55\u6aa2\u67e5\u751f\u547d\u9031\u671f\u932f\u8aa4\u3002</li> <li>\u5f9e\u7c21\u55ae\u793a\u4f8b\u958b\u59cb\uff1a\u5148\u638c\u63e1\u986f\u5f0f\u751f\u547d\u9031\u671f\u6a19\u8a3b\uff0c\u518d\u4f9d\u8cf4\u7701\u7565\u898f\u5247\uff0c\u9010\u6b65\u719f\u6089\u7de8\u8b6f\u5668\u7684\u884c\u70ba\u3002</li> <li>\u95b1\u8b80\u932f\u8aa4\u8a0a\u606f\uff1a\u7576\u9047\u5230\u751f\u547d\u9031\u671f\u76f8\u95dc\u932f\u8aa4\u6642\uff0c\u4ed4\u7d30\u5206\u6790\u932f\u8aa4\u8a0a\u606f\uff0c\u7406\u89e3\u5176\u80cc\u5f8c\u7684\u9650\u5236\u3002</li> </ul>"},{"location":"learning-path/stage2-intermediate/memory-management-basics/","title":"\u8a18\u61b6\u9ad4\u7ba1\u7406\u57fa\u790e\uff1aRust \u7684\u5b89\u5168\u8207\u9ad8\u6548","text":"<p>\u8a18\u61b6\u9ad4\u7ba1\u7406\u662f Rust \u8a9e\u8a00\u7684\u6838\u5fc3\u7279\u6027\u4e4b\u4e00\uff0c\u65e8\u5728\u8b93\u958b\u767c\u8005\u80fd\u5728\u4e0d\u4f9d\u8cf4\u5783\u573e\u56de\u6536\u7684\u60c5\u6cc1\u4e0b\uff0c\u5b89\u5168\u9ad8\u6548\u5730\u7ba1\u7406\u8a18\u61b6\u9ad4\u3002</p> <p>\u5c0d\u65bc\u6709\u57fa\u672c Rust \u77e5\u8b58\u7684\u5b78\u7fd2\u8005\u4f86\u8aaa\uff0c\u7406\u89e3\u8a18\u61b6\u9ad4\u7ba1\u7406\u7684\u57fa\u790e\u662f\u638c\u63e1 Rust \u8a2d\u8a08\u7406\u5ff5\u7684\u91cd\u8981\u4e00\u6b65\u3002</p>"},{"location":"learning-path/stage2-intermediate/memory-management-basics/#_1","title":"\u4ec0\u9ebc\u662f\u8a18\u61b6\u9ad4\u7ba1\u7406\uff1f","text":"<p>\u8a18\u61b6\u9ad4\u7ba1\u7406\u662f\u6307\u7a0b\u5f0f\u5982\u4f55\u5206\u914d\u3001\u8a2a\u554f\u548c\u91cb\u653e\u8a08\u7b97\u6a5f\u8a18\u61b6\u9ad4\u7684\u904e\u7a0b\u3002\u5728\u7cfb\u7d71\u7de8\u7a0b\u4e2d\uff0c\u8a18\u61b6\u9ad4\u7ba1\u7406\u76f4\u63a5\u5f71\u97ff\u7a0b\u5f0f\u7684\u6027\u80fd\u8207\u5b89\u5168\u6027\u3002</p> <p>Rust \u7684\u8a18\u61b6\u9ad4\u7ba1\u7406\u6a5f\u5236\u901a\u904e\u6240\u6709\u6b0a\u7cfb\u7d71\uff0c\u5728\u7de8\u8b6f\u6642\u78ba\u4fdd\u8a18\u61b6\u9ad4\u5b89\u5168\uff0c\u7121\u9700\u5783\u573e\u56de\u6536\u6216\u624b\u52d5\u91cb\u653e\u3002</p> <p>Rust \u8a18\u61b6\u9ad4\u7ba1\u7406\u7684\u6838\u5fc3\u7406\u5ff5\u662f\uff1a\u901a\u904e\u6240\u6709\u6b0a\u8207\u501f\u7528\u898f\u5247\uff0c\u5728\u7de8\u8b6f\u6642\u81ea\u52d5\u7ba1\u7406\u8a18\u61b6\u9ad4\uff0c\u517c\u9867\u5b89\u5168\u8207\u6027\u80fd\u3002</p>"},{"location":"learning-path/stage2-intermediate/memory-management-basics/#rust_1","title":"\u70ba\u4ec0\u9ebc Rust \u7684\u8a18\u61b6\u9ad4\u7ba1\u7406\u7368\u7279\uff1f","text":"<p>\u50b3\u7d71\u8a9e\u8a00\u4e2d\u7684\u8a18\u61b6\u9ad4\u7ba1\u7406\u53ef\u80fd\u5b58\u5728\u554f\u984c\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u624b\u52d5\u7ba1\u7406 (\u5982 C/C++)\uff1a\u958b\u767c\u8005\u9700\u8981\u624b\u52d5\u5206\u914d\u548c\u91cb\u653e\u8a18\u61b6\u9ad4\uff0c\u5bb9\u6613\u5c0e\u81f4\u6d29\u6f0f\u6216\u4f7f\u7528\u5f8c\u91cb\u653e\u932f\u8aa4\u3002</li> <li>\u5783\u573e\u56de\u6536 (\u5982 Java)\uff1a\u96d6\u7136\u7c21\u5316\u4e86\u8a18\u61b6\u9ad4\u7ba1\u7406\uff0c\u4f46\u5f15\u5165\u4e86\u904b\u884c\u6642\u958b\u92b7\u548c\u4e0d\u53ef\u9810\u6e2c\u7684\u66ab\u505c\u3002</li> <li>\u4e0d\u5b89\u5168\u8a2a\u554f\uff1a\u591a\u500b\u6307\u91dd\u540c\u6642\u8a2a\u554f\u540c\u4e00\u8a18\u61b6\u9ad4\uff0c\u53ef\u80fd\u5c0e\u81f4\u6578\u64da\u7af6\u8cfd\u6216\u672a\u5b9a\u7fa9\u884c\u70ba\u3002</li> </ul> <p>Rust \u901a\u904e\u6240\u6709\u6b0a\u7cfb\u7d71\u89e3\u6c7a\u4e86\u9019\u4e9b\u554f\u984c\uff0c\u78ba\u4fdd\u8a18\u61b6\u9ad4\u5728\u7de8\u8b6f\u6642\u88ab\u6b63\u78ba\u7ba1\u7406\uff0c\u7121\u9700\u904b\u884c\u6642\u958b\u92b7\u3002</p>"},{"location":"learning-path/stage2-intermediate/memory-management-basics/#_2","title":"\u8a18\u61b6\u9ad4\u7ba1\u7406\u7684\u57fa\u672c\u6a5f\u5236","text":""},{"location":"learning-path/stage2-intermediate/memory-management-basics/#_3","title":"\u68e7\u8207\u5806\u8a18\u61b6\u9ad4","text":"<p>Rust \u4e2d\u7684\u8a18\u61b6\u9ad4\u5206\u70ba\u5169\u5927\u985e\uff1a</p> <ul> <li>\u68e7 (Stack)\uff1a\u7528\u65bc\u5b58\u653e\u56fa\u5b9a\u5927\u5c0f\u7684\u6578\u64da\uff0c\u5982\u57fa\u672c\u578b\u5225\u548c\u5c40\u90e8\u8b8a\u6578\uff0c\u5206\u914d\u8207\u91cb\u653e\u7531\u7de8\u8b6f\u5668\u81ea\u52d5\u7ba1\u7406\uff0c\u901f\u5ea6\u5feb\u3002</li> <li>\u5806 (Heap)\uff1a\u7528\u65bc\u5b58\u653e\u52d5\u614b\u5927\u5c0f\u7684\u6578\u64da\uff0c\u5982 <code>String</code> \u548c <code>Vec</code>\uff0c\u9700\u8981\u986f\u5f0f\u5206\u914d\uff0cRust \u901a\u904e\u6240\u6709\u6b0a\u7cfb\u7d71\u81ea\u52d5\u91cb\u653e\u3002</li> </ul> <pre><code>fn main() {\n    // \u5b58\u65bc\u68e7\u4e0a\uff0c\u56fa\u5b9a\u5927\u5c0f\n    let x: i32 = 5; \n\n    // \u5b58\u65bc\u5806\u4e0a\uff0c\u52d5\u614b\u5927\u5c0f\n    let y: String = String::from(\"Hello\"); \n\n    println!(\"x = {}, y = {}\", x, y);\n    // \u7576\u51fd\u6578\u7d50\u675f\u6642\uff0cx \u548c y \u7684\u8a18\u61b6\u9ad4\u81ea\u52d5\u91cb\u653e\n}\n</code></pre>"},{"location":"learning-path/stage2-intermediate/memory-management-basics/#_4","title":"\u6240\u6709\u6b0a\u8207\u8a18\u61b6\u9ad4\u91cb\u653e","text":"<p>Rust \u7684\u6240\u6709\u6b0a\u7cfb\u7d71\u78ba\u4fdd\u6bcf\u500b\u503c\u6709\u4e00\u500b\u552f\u4e00\u7684\u6240\u6709\u8005\uff0c\u7576\u6240\u6709\u8005\u8d85\u51fa\u4f5c\u7528\u57df\u6642\uff0c\u503c\u6703\u81ea\u52d5\u91cb\u653e\uff1a</p> <pre><code>fn main() {\n    {\n        // s \u64c1\u6709\u5806\u4e0a\u7684\u6578\u64da\n        let s = String::from(\"Hello\"); \n        println!(\"s = {}\", s);\n    } \n\n    // s \u8d85\u51fa\u4f5c\u7528\u57df\uff0c\u5806\u8a18\u61b6\u9ad4\u81ea\u52d5\u91cb\u653e\n    // \u4ee5\u4e0b\u884c\u6703\u5c0e\u81f4\u7de8\u8b6f\u932f\u8aa4\uff0c\u56e0\u70ba s \u5df2\u7121\u6548\n    // println!(\"s = {}\", s);\n}\n</code></pre> <p>\u9019\u7a2e\u81ea\u52d5\u91cb\u653e\u6a5f\u5236\u907f\u514d\u4e86\u624b\u52d5\u7ba1\u7406\u8a18\u61b6\u9ad4\u7684\u8907\u96dc\u6027\u8207\u932f\u8aa4\u3002</p>"},{"location":"learning-path/stage2-intermediate/memory-management-basics/#_5","title":"\u501f\u7528\u8207\u8a18\u61b6\u9ad4\u8a2a\u554f","text":"<p>\u501f\u7528\u5141\u8a31\u5728\u4e0d\u8f49\u79fb\u6240\u6709\u6b0a\u7684\u60c5\u6cc1\u4e0b\u8a2a\u554f\u6578\u64da\uff0cRust \u901a\u904e\u501f\u7528\u898f\u5247\u78ba\u4fdd\u8a18\u61b6\u9ad4\u8a2a\u554f\u5b89\u5168\uff1a</p> <ul> <li>\u4e0d\u53ef\u8b8a\u501f\u7528 (<code>&amp;T</code>)\uff1a\u5141\u8a31\u591a\u500b\u53ea\u8b80\u8a2a\u554f\u3002</li> <li>\u53ef\u8b8a\u501f\u7528 (<code>&amp;mut T</code>)\uff1a\u5141\u8a31\u55ae\u4e00\u53ef\u5beb\u8a2a\u554f\uff0c\u9632\u6b62\u6578\u64da\u7af6\u8cfd\u3002</li> </ul> <pre><code>fn main() {\n    let mut s = String::from(\"Hello\");\n    // \u4e0d\u53ef\u8b8a\u501f\u7528\n    let r1 = &amp;s; \n\n    // \u53e6\u4e00\u500b\u4e0d\u53ef\u8b8a\u501f\u7528\n    let r2 = &amp;s; \n    println!(\"r1 = {}, r2 = {}\", r1, r2);\n\n    // \u4ee5\u4e0b\u884c\u6703\u5c0e\u81f4\u7de8\u8b6f\u932f\u8aa4\uff0c\u56e0\u70ba\u4e0d\u53ef\u8b8a\u501f\u7528\u5b58\u5728\u6642\u4e0d\u80fd\u6709\u53ef\u8b8a\u501f\u7528\n    // let r3 = &amp;mut s;\n}\n</code></pre>"},{"location":"learning-path/stage2-intermediate/memory-management-basics/#_6","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u7406\u89e3\u68e7\u8207\u5806\u7684\u5340\u5225\uff1a\u7df4\u7fd2\u4f7f\u7528\u56fa\u5b9a\u5927\u5c0f\u548c\u52d5\u614b\u5927\u5c0f\u7684\u6578\u64da\u985e\u578b\uff0c\u89c0\u5bdf\u5176\u8a18\u61b6\u9ad4\u5206\u914d\u884c\u70ba\u3002</li> <li>\u719f\u6089\u6240\u6709\u6b0a\u91cb\u653e\uff1a\u7de8\u5beb\u7a0b\u5f0f\uff0c\u89c0\u5bdf\u8b8a\u6578\u8d85\u51fa\u4f5c\u7528\u57df\u6642\u7684\u884c\u70ba\uff0c\u7406\u89e3\u8a18\u61b6\u9ad4\u81ea\u52d5\u91cb\u653e\u7684\u6642\u6a5f\u3002</li> <li>\u7df4\u7fd2\u501f\u7528\u898f\u5247\uff1a\u5617\u8a66\u4e0d\u540c\u985e\u578b\u7684\u501f\u7528\u7d44\u5408\uff0c\u7406\u89e3\u7de8\u8b6f\u5668\u5982\u4f55\u9632\u6b62\u4e0d\u5b89\u5168\u8a2a\u554f\u3002</li> </ul>"},{"location":"learning-path/stage3-advanced/concurrency-basics/","title":"\u4e26\u767c\u57fa\u790e\uff1aRust \u7684\u5b89\u5168\u591a\u7dda\u7a0b","text":"<p>\u4e26\u767c (Concurrency) \u662f\u73fe\u4ee3\u7a0b\u5f0f\u8a2d\u8a08\u4e2d\u7684\u91cd\u8981\u4e3b\u984c\uff0c\u5141\u8a31\u7a0b\u5f0f\u540c\u6642\u8655\u7406\u591a\u500b\u4efb\u52d9\uff0c\u63d0\u5347\u6027\u80fd\u8207\u97ff\u61c9\u6027\u3002</p> <p>Rust \u63d0\u4f9b\u4e86\u7368\u7279\u7684\u4e26\u767c\u6a5f\u5236\uff0c\u78ba\u4fdd\u591a\u7dda\u7a0b\u74b0\u5883\u4e0b\u7684\u8a18\u61b6\u9ad4\u5b89\u5168\u3002</p> <p>\u5c0d\u65bc\u6709\u4e00\u5b9a Rust \u57fa\u790e\u7684\u5b78\u7fd2\u8005\u4f86\u8aaa\uff0c\u638c\u63e1\u4e26\u767c\u57fa\u790e\u662f\u7de8\u5beb\u9ad8\u6548\u7a0b\u5f0f\u7684\u91cd\u8981\u4e00\u6b65\u3002</p>"},{"location":"learning-path/stage3-advanced/concurrency-basics/#_1","title":"\u4ec0\u9ebc\u662f\u4e26\u767c\uff1f","text":"<p>\u4e26\u767c\u662f\u6307\u7a0b\u5f0f\u80fd\u5920\u540c\u6642\u57f7\u884c\u591a\u500b\u4efb\u52d9\uff0c\u9019\u4e9b\u4efb\u52d9\u53ef\u80fd\u5728\u4e0d\u540c\u7dda\u7a0b\u6216\u540c\u4e00\u7dda\u7a0b\u4e2d\u4ea4\u932f\u57f7\u884c\u3002</p> <p>\u5728\u7cfb\u7d71\u7de8\u7a0b\u4e2d\uff0c\u4e26\u767c\u5e38\u7528\u65bc\u63d0\u5347\u6027\u80fd\uff0c\u4f8b\u5982\u8655\u7406\u591a\u500b\u7528\u6236\u8acb\u6c42\u6216\u4e26\u884c\u8a08\u7b97\u3002</p> <p>Rust \u4e26\u767c\u7684\u6838\u5fc3\u7406\u5ff5\u662f\uff1a\u901a\u904e\u6240\u6709\u6b0a\u8207\u501f\u7528\u898f\u5247\uff0c\u5728\u7de8\u8b6f\u6642\u78ba\u4fdd\u4e26\u767c\u5b89\u5168\uff0c\u907f\u514d\u6578\u64da\u7af6\u8cfd\u3002</p>"},{"location":"learning-path/stage3-advanced/concurrency-basics/#_2","title":"\u70ba\u4ec0\u9ebc\u9700\u8981\u5b89\u5168\u4e26\u767c\uff1f","text":"<p>\u50b3\u7d71\u8a9e\u8a00\u4e2d\u7684\u4e26\u767c\u53ef\u80fd\u5c0e\u81f4\u554f\u984c\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u6578\u64da\u7af6\u8cfd (Data Race)\uff1a\u591a\u500b\u7dda\u7a0b\u540c\u6642\u4fee\u6539\u5171\u4eab\u6578\u64da\uff0c\u5c0e\u81f4\u672a\u5b9a\u7fa9\u884c\u70ba\u3002</li> <li>\u6b7b\u9396 (Deadlock)\uff1a\u591a\u500b\u7dda\u7a0b\u4e92\u76f8\u7b49\u5f85\u8cc7\u6e90\uff0c\u5c0e\u81f4\u7a0b\u5f0f\u5361\u4f4f\u3002</li> <li>\u8a18\u61b6\u9ad4\u4e0d\u5b89\u5168\uff1a\u4e0d\u7576\u7684\u5171\u4eab\u8a2a\u554f\u53ef\u80fd\u5c0e\u81f4\u61f8\u5782\u6307\u91dd\u6216\u4f7f\u7528\u5f8c\u91cb\u653e\u932f\u8aa4\u3002</li> </ul> <p>Rust \u901a\u904e\u5176\u6240\u6709\u6b0a\u7cfb\u7d71\u8207\u578b\u5225\u6aa2\u67e5\uff0c\u5728\u7de8\u8b6f\u6642\u9632\u6b62\u6578\u64da\u7af6\u8cfd\uff0c\u78ba\u4fdd\u4e26\u767c\u5b89\u5168\u3002</p>"},{"location":"learning-path/stage3-advanced/concurrency-basics/#_3","title":"\u4e26\u767c\u7684\u57fa\u672c\u5de5\u5177","text":""},{"location":"learning-path/stage3-advanced/concurrency-basics/#threads","title":"\u7dda\u7a0b (Threads)\uff1a\u57fa\u672c\u4e26\u767c\u55ae\u4f4d","text":"<p>Rust \u4f7f\u7528 <code>std::thread</code> \u6a21\u7d44\u63d0\u4f9b\u7dda\u7a0b\u652f\u63f4\uff0c\u5141\u8a31\u60a8\u5275\u5efa\u7368\u7acb\u57f7\u884c\u7684\u4efb\u52d9\uff1a</p> <pre><code>use std::thread;\nuse std::time::Duration;\n\nfn main() {\n    // \u5275\u5efa\u4e00\u500b\u65b0\u7dda\u7a0b\n    let handle = thread::spawn(|| {\n        for i in 1..5 {\n            println!(\"Thread: {}\", i);\n            thread::sleep(Duration::from_millis(1));\n        }\n    });\n\n    // \u4e3b\u7dda\u7a0b\u57f7\u884c\n    for i in 1..3 {\n        println!(\"Main: {}\", i);\n        thread::sleep(Duration::from_millis(1));\n    }\n\n    // \u7b49\u5f85\u65b0\u7dda\u7a0b\u5b8c\u6210\n    handle.join().unwrap();\n}\n</code></pre> <p>\u7dda\u7a0b\u5141\u8a31\u4efb\u52d9\u4e26\u884c\u57f7\u884c\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u5171\u4eab\u6578\u64da\u7684\u5b89\u5168\u6027\u3002</p>"},{"location":"learning-path/stage3-advanced/concurrency-basics/#send-sync","title":"\u5171\u4eab\u6578\u64da\uff1aSend \u548c Sync \u7279\u5fb5","text":"<p>Rust \u4f7f\u7528 <code>Send</code> \u548c <code>Sync</code> \u7279\u5fb5\u78ba\u4fdd\u4e26\u767c\u5b89\u5168\uff1a</p> <ul> <li><code>Send</code>\uff1a\u8868\u793a\u578b\u5225\u53ef\u4ee5\u5b89\u5168\u5730\u8de8\u7dda\u7a0b\u8f49\u79fb\u6240\u6709\u6b0a\u3002</li> <li><code>Sync</code>\uff1a\u8868\u793a\u578b\u5225\u53ef\u4ee5\u5b89\u5168\u5730\u8de8\u7dda\u7a0b\u5171\u4eab\u501f\u7528\u3002</li> </ul> <p>\u5927\u591a\u6578 Rust \u578b\u5225\u9810\u8a2d\u652f\u63f4\u9019\u4e9b\u7279\u5fb5\uff0c\u4f46\u67d0\u4e9b\u578b\u5225\uff08\u5982 <code>Rc</code>\uff09\u4e0d\u652f\u63f4\u8de8\u7dda\u7a0b\u64cd\u4f5c\u3002</p>"},{"location":"learning-path/stage3-advanced/concurrency-basics/#mutex","title":"\u4e92\u65a5\u9396 (Mutex)\uff1a\u5b89\u5168\u5171\u4eab\u53ef\u8b8a\u6578\u64da","text":"<p><code>Mutex</code> \u7528\u65bc\u5728\u591a\u7dda\u7a0b\u9593\u5b89\u5168\u5171\u4eab\u53ef\u8b8a\u6578\u64da\uff0c\u78ba\u4fdd\u540c\u4e00\u6642\u9593\u53ea\u6709\u4e00\u500b\u7dda\u7a0b\u80fd\u4fee\u6539\u6578\u64da\uff1a</p> <pre><code>use std::sync::Mutex;\nuse std::thread;\n\nfn main() {\n    let counter = Mutex::new(0);\n    let mut handles = vec![];\n\n    for _ in 0..10 {\n        let counter = Mutex::lock(&amp;counter).unwrap();\n        let handle = thread::spawn(move || {\n            let mut num = counter.lock().unwrap();\n            *num += 1;\n        });\n        handles.push(handle);\n    }\n\n    for handle in handles {\n        handle.join().unwrap();\n    }\n\n    println!(\"Final count: {}\", *counter.lock().unwrap());\n}\n</code></pre> <p><code>Mutex</code> \u901a\u904e\u9396\u5b9a\u6a5f\u5236\u9632\u6b62\u6578\u64da\u7af6\u8cfd\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u907f\u514d\u6b7b\u9396\u3002</p>"},{"location":"learning-path/stage3-advanced/concurrency-basics/#_4","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u7df4\u7fd2\u7dda\u7a0b\u5275\u5efa\uff1a\u7de8\u5beb\u7c21\u55ae\u591a\u7dda\u7a0b\u7a0b\u5f0f\uff0c\u89c0\u5bdf\u7dda\u7a0b\u57f7\u884c\u9806\u5e8f\u8207\u4ea4\u4e92\u884c\u70ba\u3002</li> <li>\u7406\u89e3 Send \u548c Sync\uff1a\u7814\u7a76\u4e0d\u540c\u578b\u5225\u7684\u4e26\u767c\u7279\u6027\uff0c\u7406\u89e3\u70ba\u4ec0\u9ebc\u67d0\u4e9b\u578b\u5225\u4e0d\u80fd\u8de8\u7dda\u7a0b\u4f7f\u7528\u3002</li> <li>\u63a2\u7d22\u4e92\u65a5\u9396\u61c9\u7528\uff1a\u4f7f\u7528 <code>Mutex</code> \u5171\u4eab\u6578\u64da\uff0c\u7406\u89e3\u9396\u5b9a\u8207\u89e3\u9396\u7684\u6642\u6a5f\u8207\u5f71\u97ff\u3002</li> </ul>"},{"location":"learning-path/stage3-advanced/modularity-organization/","title":"\u6a21\u7d44\u5316\u8207\u4ee3\u78bc\u7d44\u7e54\uff1aRust \u7684\u7d50\u69cb\u5316\u8a2d\u8a08","text":"<p>\u6a21\u7d44\u5316\u8207\u4ee3\u78bc\u7d44\u7e54\u662f Rust \u8a9e\u8a00\u4e2d\u91cd\u8981\u7684\u4e2d\u7d1a\u6982\u5ff5\uff0c\u65e8\u5728\u5e6b\u52a9\u958b\u767c\u8005\u7ba1\u7406\u5927\u578b\u5c08\u6848\u7684\u8907\u96dc\u6027\uff0c\u63d0\u5347\u4ee3\u78bc\u7684\u53ef\u8b80\u6027\u8207\u53ef\u7dad\u8b77\u6027\u3002</p> <p>\u5c0d\u65bc\u6709\u4e00\u5b9a Rust \u57fa\u790e\u7684\u5b78\u7fd2\u8005\u4f86\u8aaa\uff0c\u638c\u63e1\u6a21\u7d44\u5316\u8207\u4ee3\u78bc\u7d44\u7e54\u662f\u7de8\u5beb\u7d50\u69cb\u5316\u7a0b\u5f0f\u7684\u91cd\u8981\u4e00\u6b65\u3002</p>"},{"location":"learning-path/stage3-advanced/modularity-organization/#_1","title":"\u4ec0\u9ebc\u662f\u6a21\u7d44\u5316\u8207\u4ee3\u78bc\u7d44\u7e54\uff1f","text":"<p>\u6a21\u7d44\u5316\u662f\u6307\u5c07\u4ee3\u78bc\u5206\u70ba\u7368\u7acb\u4e14\u53ef\u91cd\u7528\u7684\u55ae\u5143\uff08\u6a21\u7d44\uff09\uff0c\u6bcf\u500b\u6a21\u7d44\u8ca0\u8cac\u7279\u5b9a\u7684\u529f\u80fd\u3002</p> <p>\u4ee3\u78bc\u7d44\u7e54\u5247\u6d89\u53ca\u5982\u4f55\u7d50\u69cb\u5316\u9019\u4e9b\u6a21\u7d44\u8207\u6587\u4ef6\uff0c\u4f7f\u5c08\u6848\u6613\u65bc\u7406\u89e3\u8207\u64f4\u5c55\u3002</p> <p>Rust \u6a21\u7d44\u5316\u7684\u6838\u5fc3\u7406\u5ff5\u662f\uff1a\u901a\u904e\u6a21\u7d44\u8207\u53ef\u898b\u6027\u898f\u5247\uff0c\u69cb\u5efa\u6e05\u6670\u7684\u4ee3\u78bc\u7d50\u69cb\uff0c\u63a7\u5236\u529f\u80fd\u7684\u8a2a\u554f\u7bc4\u570d\u3002</p>"},{"location":"learning-path/stage3-advanced/modularity-organization/#_2","title":"\u70ba\u4ec0\u9ebc\u9700\u8981\u6a21\u7d44\u5316\u8207\u4ee3\u78bc\u7d44\u7e54\uff1f","text":"<p>\u5728\u958b\u767c\u5927\u578b\u5c08\u6848\u6642\uff0c\u7f3a\u4e4f\u7d50\u69cb\u5316\u8a2d\u8a08\u53ef\u80fd\u5c0e\u81f4\u554f\u984c\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u4ee3\u78bc\u6df7\u4e82\uff1a\u6240\u6709\u529f\u80fd\u96c6\u4e2d\u5728\u55ae\u4e00\u6587\u4ef6\uff0c\u96e3\u4ee5\u67e5\u627e\u8207\u4fee\u6539\u3002</li> <li>\u547d\u540d\u885d\u7a81\uff1a\u7f3a\u4e4f\u547d\u540d\u7a7a\u9593\u6642\uff0c\u51fd\u6578\u6216\u578b\u5225\u53ef\u80fd\u4e92\u76f8\u5e72\u64fe\u3002</li> <li>\u96e3\u4ee5\u7dad\u8b77\uff1a\u7f3a\u4e4f\u6e05\u6670\u7d50\u69cb\u6642\uff0c\u65b0\u589e\u529f\u80fd\u6216\u9664\u932f\u8b8a\u5f97\u56f0\u96e3\u3002</li> </ul> <p>Rust \u7684\u6a21\u7d44\u7cfb\u7d71\u8207 <code>Cargo</code> \u5de5\u5177\u63d0\u4f9b\u4e86\u5f37\u5927\u7684\u7d44\u7e54\u80fd\u529b\uff0c\u78ba\u4fdd\u4ee3\u78bc\u7d50\u69cb\u6e05\u6670\u4e14\u6613\u65bc\u7ba1\u7406\u3002</p>"},{"location":"learning-path/stage3-advanced/modularity-organization/#_3","title":"\u6a21\u7d44\u5316\u8207\u4ee3\u78bc\u7d44\u7e54\u7684\u57fa\u672c\u5de5\u5177","text":""},{"location":"learning-path/stage3-advanced/modularity-organization/#modules","title":"\u6a21\u7d44 (Modules)\uff1a\u908f\u8f2f\u5206\u7d44","text":"<p>Rust \u4f7f\u7528 <code>mod</code> \u95dc\u9375\u5b57\u5b9a\u7fa9\u6a21\u7d44\uff0c\u5c07\u76f8\u95dc\u529f\u80fd\u5206\u7d44\u5728\u4e00\u8d77\uff1a</p> <pre><code>// \u5728 main.rs \u4e2d\u5b9a\u7fa9\u6a21\u7d44\nmod utils {\n    pub fn format_greeting(name: &amp;str) -&gt; String {\n        format!(\"Hello, {}!\", name)\n    }\n}\n\nfn main() {\n    let greeting = utils::format_greeting(\"Alice\");\n    println!(\"{}\", greeting);\n}\n</code></pre> <p>\u6a21\u7d44\u53ef\u4ee5\u5d4c\u5957\uff0c\u4e5f\u53ef\u4ee5\u901a\u904e\u6587\u4ef6\u5206\u96e2</p>"},{"location":"learning-path/stage3-advanced/modularity-organization/#_4","title":"\u6587\u4ef6\u8207\u76ee\u9304\u7d50\u69cb\uff1a\u6a21\u7d44\u5206\u96e2","text":"<p>Rust \u652f\u63f4\u5c07\u6a21\u7d44\u653e\u5728\u4e0d\u540c\u6587\u4ef6\u4e2d\uff0c\u4f7f\u7528\u76ee\u9304\u7d50\u69cb\u7d44\u7e54\u4ee3\u78bc\u3002\u4f8b\u5982\uff1a</p> <ul> <li> <p><code>src/main.rs</code>\uff1a <pre><code> // \u5f15\u7528 utils \u6a21\u7d44\uff0cRust \u6703\u81ea\u52d5\u67e5\u627e src/utils.rs \u6216 src/utils/mod.rs\nmod utils;\n\nfn main() {\n    let greeting = utils::format_greeting(\"Alice\");\n    println!(\"{}\", greeting);\n}\n</code></pre></p> </li> <li> <p><code>src/utils.rs</code>\uff1a <pre><code>pub fn format_greeting(name: &amp;str) -&gt; String {\n    format!(\"Hello, {}!\", name)\n}\n</code></pre></p> </li> </ul> <p>\u9019\u7a2e\u7d50\u69cb\u4f7f\u5927\u578b\u5c08\u6848\u7684\u4ee3\u78bc\u7d44\u7e54\u66f4\u6e05\u6670\u3002</p>"},{"location":"learning-path/stage3-advanced/modularity-organization/#visibility","title":"\u53ef\u898b\u6027 (Visibility)\uff1a\u63a7\u5236\u8a2a\u554f","text":"<p>Rust \u4f7f\u7528 <code>pub</code> \u95dc\u9375\u5b57\u63a7\u5236\u6a21\u7d44\u8207\u529f\u80fd\u7684\u8a2a\u554f\u7bc4\u570d\uff1a</p> <ul> <li><code>pub</code>\uff1a\u516c\u958b\uff0c\u5916\u90e8\u4ee3\u78bc\u53ef\u8a2a\u554f\u3002</li> <li>\u7121 <code>pub</code>\uff1a\u79c1\u6709\uff0c\u50c5\u6a21\u7d44\u5167\u90e8\u53ef\u8a2a\u554f\u3002</li> </ul> <pre><code>mod inner {\n    pub fn public_function() {\n        println!(\"This is public\");\n    }\n    fn private_function() {\n        println!(\"This is private\");\n    }\n}\n\nfn main() {\n    inner::public_function(); // \u6b63\u78ba\n    // inner::private_function(); // \u932f\u8aa4\uff0c\u79c1\u6709\u51fd\u6578\u4e0d\u53ef\u8a2a\u554f\n}\n</code></pre>"},{"location":"learning-path/stage3-advanced/modularity-organization/#cargo-crates","title":"Cargo \u8207 Crates\uff1a\u5c08\u6848\u7ba1\u7406","text":"<p>Rust \u4f7f\u7528 <code>Cargo</code> \u4f5c\u70ba\u5c08\u6848\u7ba1\u7406\u5de5\u5177\uff0c\u652f\u63f4\u591a\u500b\u6a21\u7d44\u8207\u4f9d\u8cf4\uff1a</p> <ul> <li>Crate\uff1aRust \u7684\u5c08\u6848\u6216\u5eab\u55ae\u4f4d\uff0c\u53ef\u4ee5\u5305\u542b\u591a\u500b\u6a21\u7d44\u3002</li> <li>Cargo.toml\uff1a\u5b9a\u7fa9\u5c08\u6848\u5143\u6578\u64da\u8207\u4f9d\u8cf4\u3002</li> </ul> <p>\u793a\u4f8b <code>Cargo.toml</code>\uff1a</p> <pre><code>[package]\nname = \"my_project\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nrand = \"0.8.5\"\n</code></pre> <p>\u4f7f\u7528 <code>Cargo</code> \u7ba1\u7406\u4f9d\u8cf4\u8207\u5efa\u7f6e\uff0c\u7c21\u5316\u5927\u578b\u5c08\u6848\u7684\u958b\u767c\u3002</p>"},{"location":"learning-path/stage3-advanced/modularity-organization/#_5","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u7df4\u7fd2\u6a21\u7d44\u5206\u96e2\uff1a\u5c07\u4ee3\u78bc\u5206\u70ba\u591a\u500b\u6a21\u7d44\u8207\u6587\u4ef6\uff0c\u7406\u89e3\u6a21\u7d44\u5f15\u7528\u8207\u6587\u4ef6\u7d50\u69cb\u3002</li> <li>\u638c\u63e1\u53ef\u898b\u6027\u898f\u5247\uff1a\u4f7f\u7528 <code>pub</code> \u63a7\u5236\u529f\u80fd\u8a2a\u554f\uff0c\u8a2d\u8a08\u6e05\u6670\u7684\u6a21\u7d44\u4ecb\u9762\u3002</li> <li>\u63a2\u7d22 Cargo \u529f\u80fd\uff1a\u4f7f\u7528 <code>Cargo</code> \u5efa\u7acb\u591a\u6a21\u7d44\u5c08\u6848\uff0c\u6dfb\u52a0\u5916\u90e8\u4f9d\u8cf4\uff0c\u719f\u6089\u5efa\u7f6e\u8207\u6e2c\u8a66\u6d41\u7a0b\u3002</li> </ul>"},{"location":"learning-path/stage3-advanced/type-system-advanced/","title":"\u578b\u5225\u7cfb\u7d71\u9032\u968e\uff1aRust \u7684\u5f37\u5927\u8207\u9748\u6d3b","text":"<p>Rust \u7684\u578b\u5225\u7cfb\u7d71\u662f\u5176\u8a2d\u8a08\u6838\u5fc3\u4e4b\u4e00\uff0c\u63d0\u4f9b\u4e86\u5f37\u5927\u7684\u975c\u614b\u6aa2\u67e5\u8207\u9748\u6d3b\u6027\uff0c\u78ba\u4fdd\u4ee3\u78bc\u7684\u5b89\u5168\u6027\u8207\u53ef\u7dad\u8b77\u6027\u3002</p> <p>\u5c0d\u65bc\u6709\u4e00\u5b9a Rust \u57fa\u790e\u7684\u5b78\u7fd2\u8005\u4f86\u8aaa\uff0c\u6df1\u5165\u7406\u89e3\u578b\u5225\u7cfb\u7d71\u7684\u9032\u968e\u7279\u6027\u662f\u63d0\u5347\u7a0b\u5f0f\u8a2d\u8a08\u80fd\u529b\u7684\u91cd\u8981\u4e00\u6b65\u3002</p>"},{"location":"learning-path/stage3-advanced/type-system-advanced/#_1","title":"\u4ec0\u9ebc\u662f\u578b\u5225\u7cfb\u7d71\u9032\u968e\uff1f","text":"<p>Rust \u7684\u578b\u5225\u7cfb\u7d71\u4e0d\u50c5\u50c5\u662f\u57fa\u672c\u578b\u5225\u8207\u975c\u614b\u6aa2\u67e5\uff0c\u9084\u5305\u62ec\u4e00\u7cfb\u5217\u9032\u968e\u7279\u6027\uff0c\u5982\u7279\u5fb5 (Traits)\u3001\u6cdb\u578b (Generics) \u548c\u578b\u5225\u7d04\u675f (Bounds)\u3002</p> <p>\u9019\u4e9b\u5de5\u5177\u5141\u8a31\u958b\u767c\u8005\u7de8\u5beb\u62bd\u8c61\u4e14\u53ef\u91cd\u7528\u7684\u4ee3\u78bc\uff0c\u540c\u6642\u4fdd\u6301\u7de8\u8b6f\u6642\u7684\u5b89\u5168\u6027\u3002</p> <p>\u578b\u5225\u7cfb\u7d71\u9032\u968e\u7684\u6838\u5fc3\u7406\u5ff5\u662f\uff1a\u901a\u904e\u62bd\u8c61\u8207\u7d04\u675f\uff0c\u63d0\u5347\u4ee3\u78bc\u7684\u901a\u7528\u6027\u8207\u5b89\u5168\u6027\u3002</p>"},{"location":"learning-path/stage3-advanced/type-system-advanced/#_2","title":"\u70ba\u4ec0\u9ebc\u9700\u8981\u9032\u968e\u578b\u5225\u7cfb\u7d71\uff1f","text":"<p>\u5728\u958b\u767c\u8907\u96dc\u7a0b\u5f0f\u6642\uff0c\u57fa\u790e\u578b\u5225\u7cfb\u7d71\u53ef\u80fd\u7121\u6cd5\u6eff\u8db3\u9700\u6c42\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u4ee3\u78bc\u91cd\u8907\uff1a\u7f3a\u4e4f\u62bd\u8c61\u6a5f\u5236\u6642\uff0c\u985e\u4f3c\u529f\u80fd\u9700\u8981\u5728\u591a\u8655\u91cd\u5beb\u3002</li> <li>\u578b\u5225\u4e0d\u5b89\u5168\uff1a\u7f3a\u4e4f\u7cbe\u78ba\u7d04\u675f\u6642\uff0c\u53ef\u80fd\u5f15\u5165\u904b\u884c\u6642\u932f\u8aa4\u3002</li> <li>\u53ef\u8b80\u6027\u5dee\uff1a\u7f3a\u4e4f\u7d50\u69cb\u5316\u62bd\u8c61\u6642\uff0c\u4ee3\u78bc\u96e3\u4ee5\u7406\u89e3\u8207\u7dad\u8b77\u3002</li> </ul> <p>Rust \u7684\u9032\u968e\u578b\u5225\u7cfb\u7d71\u901a\u904e\u7279\u5fb5\u8207\u6cdb\u578b\u89e3\u6c7a\u9019\u4e9b\u554f\u984c\uff0c\u78ba\u4fdd\u4ee3\u78bc\u65e2\u9748\u6d3b\u53c8\u5b89\u5168\u3002</p>"},{"location":"learning-path/stage3-advanced/type-system-advanced/#_3","title":"\u578b\u5225\u7cfb\u7d71\u7684\u9032\u968e\u7279\u6027","text":""},{"location":"learning-path/stage3-advanced/type-system-advanced/#traits","title":"\u7279\u5fb5 (Traits)\uff1a\u5b9a\u7fa9\u5171\u4eab\u884c\u70ba","text":"<p>\u7279\u5fb5\u662f Rust \u4e2d\u7528\u65bc\u5b9a\u7fa9\u5171\u4eab\u884c\u70ba\u7684\u6a5f\u5236\uff0c\u985e\u4f3c\u65bc\u5176\u4ed6\u8a9e\u8a00\u4e2d\u7684\u4ecb\u9762 (Interface)\u3002</p> <p>\u7279\u5fb5\u5141\u8a31\u60a8\u5b9a\u7fa9\u4e00\u7d44\u65b9\u6cd5\uff0c\u7136\u5f8c\u8b93\u591a\u500b\u578b\u5225\u5be6\u73fe\u9019\u4e9b\u65b9\u6cd5\u3002</p> <pre><code>// \u5b9a\u7fa9\u4e00\u500b\u7279\u5fb5\ntrait Summary {\n    fn summarize(&amp;self) -&gt; String;\n}\n\n// \u70ba\u7d50\u69cb\u9ad4\u5be6\u73fe\u7279\u5fb5\nstruct Article {\n    title: String,\n    author: String,\n}\n\nimpl Summary for Article {\n    fn summarize(&amp;self) -&gt; String {\n        format!(\"{} by {}\", self.title, self.author)\n    }\n}\n\nfn main() {\n    let article = Article {\n        title: String::from(\"Rust Programming\"),\n        author: String::from(\"Jane Doe\"),\n    };\n    println!(\"Summary: {}\", article.summarize());\n}\n</code></pre> <p>\u7279\u5fb5\u5141\u8a31\u4e0d\u540c\u578b\u5225\u5171\u4eab\u76f8\u540c\u884c\u70ba\uff0c\u63d0\u5347\u4ee3\u78bc\u7684\u53ef\u91cd\u7528\u6027\u3002</p>"},{"location":"learning-path/stage3-advanced/type-system-advanced/#generics","title":"\u6cdb\u578b (Generics)\uff1a\u7de8\u5beb\u901a\u7528\u4ee3\u78bc","text":"<p>\u6cdb\u578b\u5141\u8a31\u60a8\u7de8\u5beb\u8207\u578b\u5225\u7121\u95dc\u7684\u4ee3\u78bc\uff0c\u9069\u7528\u65bc\u591a\u7a2e\u6578\u64da\u578b\u5225\uff0c\u985e\u4f3c\u65bc\u5176\u4ed6\u8a9e\u8a00\u4e2d\u7684\u6a21\u677f (Templates)\u3002</p> <pre><code>// \u5b9a\u7fa9\u6cdb\u578b\u51fd\u6578\nfn largest&lt;T: PartialOrd&gt;(list: &amp;[T]) -&gt; &amp;T {\n    let mut largest = &amp;list[0];\n    for item in list {\n        if item &gt; largest {\n            largest = item;\n        }\n    }\n    largest\n}\n\nfn main() {\n    let numbers = vec![34, 50, 25, 100, 65];\n    let result = largest(&amp;numbers);\n    println!(\"The largest number is {}\", result);\n\n    let chars = vec!['y', 'm', 'a', 'q'];\n    let result = largest(&amp;chars);\n    println!(\"The largest char is {}\", result);\n}\n</code></pre> <p>\u6cdb\u578b\u901a\u904e\u578b\u5225\u53c3\u6578 <code>T</code> \u4f7f\u51fd\u6578\u9069\u7528\u65bc\u591a\u7a2e\u578b\u5225\uff0c\u7d50\u5408\u578b\u5225\u7d04\u675f <code>PartialOrd</code> \u78ba\u4fdd\u64cd\u4f5c\u6709\u6548\u3002</p>"},{"location":"learning-path/stage3-advanced/type-system-advanced/#trait-bounds","title":"\u578b\u5225\u7d04\u675f\u8207\u7279\u5fb5\u908a\u754c (Trait Bounds)","text":"<p>\u578b\u5225\u7d04\u675f\u7528\u65bc\u9650\u5236\u6cdb\u578b\u578b\u5225\u5fc5\u9808\u6eff\u8db3\u7684\u689d\u4ef6\uff0c\u901a\u5e38\u8207\u7279\u5fb5\u7d50\u5408\u4f7f\u7528\uff1a</p> <pre><code>fn print_summary&lt;T: Summary&gt;(item: &amp;T) {\n    println!(\"Summary: {}\", item.summarize());\n}\n</code></pre> <p>\u9019\u88e1\uff0c<code>T: Summary</code> \u78ba\u4fdd <code>T</code> \u5fc5\u9808\u5be6\u73fe <code>Summary</code> \u7279\u5fb5\uff0c\u5426\u5247\u7de8\u8b6f\u5668\u6703\u5831\u932f\u3002</p>"},{"location":"learning-path/stage3-advanced/type-system-advanced/#_4","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u7df4\u7fd2\u7279\u5fb5\u5be6\u73fe\uff1a\u70ba\u81ea\u5b9a\u7fa9\u7d50\u69cb\u9ad4\u5be6\u73fe\u7279\u5fb5\uff0c\u7406\u89e3\u5982\u4f55\u5b9a\u7fa9\u8207\u5171\u4eab\u884c\u70ba\u3002</li> <li>\u63a2\u7d22\u6cdb\u578b\u61c9\u7528\uff1a\u7de8\u5beb\u6cdb\u578b\u51fd\u6578\u8207\u7d50\u69cb\u9ad4\uff0c\u7d50\u5408\u578b\u5225\u7d04\u675f\u89e3\u6c7a\u5be6\u969b\u554f\u984c\u3002</li> <li>\u95b1\u8b80\u6a19\u6e96\u5eab\u7279\u5fb5\uff1a\u7814\u7a76 Rust \u6a19\u6e96\u5eab\u4e2d\u7684\u5e38\u898b\u7279\u5fb5\uff0c\u5982 <code>Clone</code>\u3001<code>Debug</code> \u548c <code>PartialEq</code>\uff0c\u7406\u89e3\u5176\u7528\u9014\u3002</li> </ul>"},{"location":"learning-path/stage4-expert/async-programming-advanced/","title":"\u7570\u6b65\u7de8\u7a0b\u9032\u968e\uff1aRust \u7684\u9ad8\u6548\u975e\u963b\u585e","text":"<p>\u7570\u6b65\u7de8\u7a0b (Asynchronous Programming) \u662f\u73fe\u4ee3\u7a0b\u5f0f\u8a2d\u8a08\u4e2d\u7684\u91cd\u8981\u6280\u8853\uff0c\u7528\u65bc\u8655\u7406\u9ad8\u4f75\u767c\u4efb\u52d9\uff0c\u5982\u7db2\u7d61\u8acb\u6c42\u8207 I/O \u64cd\u4f5c\u3002</p> <p>Rust \u63d0\u4f9b\u4e86\u5f37\u5927\u7684\u7570\u6b65\u7de8\u7a0b\u652f\u63f4\uff0c\u7d50\u5408\u5176\u8a18\u61b6\u9ad4\u5b89\u5168\u7279\u6027\uff0c\u78ba\u4fdd\u9ad8\u6548\u8207\u53ef\u9760\u3002</p> <p>\u5c0d\u65bc\u6709\u8f03\u6df1 Rust \u57fa\u790e\u7684\u5b78\u7fd2\u8005\u4f86\u8aaa\uff0c\u638c\u63e1\u7570\u6b65\u7de8\u7a0b\u9032\u968e\u662f\u7de8\u5beb\u9ad8\u6027\u80fd\u61c9\u7528\u7684\u95dc\u9375\u4e00\u6b65\u3002</p>"},{"location":"learning-path/stage4-expert/async-programming-advanced/#_1","title":"\u4ec0\u9ebc\u662f\u7570\u6b65\u7de8\u7a0b\uff1f","text":"<p>\u7570\u6b65\u7de8\u7a0b\u5141\u8a31\u7a0b\u5f0f\u5728\u7b49\u5f85\u67d0\u4e9b\u64cd\u4f5c\uff08\u5982\u7db2\u7d61\u8acb\u6c42\u6216\u6587\u4ef6\u8b80\u53d6\uff09\u5b8c\u6210\u6642\u57f7\u884c\u5176\u4ed6\u4efb\u52d9\uff0c\u907f\u514d\u7dda\u7a0b\u963b\u585e\uff0c\u63d0\u5347\u8cc7\u6e90\u5229\u7528\u7387\u3002</p> <p>Rust \u7684\u7570\u6b65\u7de8\u7a0b\u57fa\u65bc <code>Future</code> \u8207 <code>async/await</code> \u8a9e\u6cd5\uff0c\u7d50\u5408\u904b\u884c\u6642\uff08\u5982 <code>tokio</code> \u6216 <code>async-std</code>\uff09\u5be6\u73fe\u975e\u963b\u585e\u57f7\u884c\u3002</p> <p>Rust \u7570\u6b65\u7de8\u7a0b\u7684\u6838\u5fc3\u7406\u5ff5\u662f\uff1a\u901a\u904e\u7de8\u8b6f\u6642\u5b89\u5168\u8207\u904b\u884c\u6642\u652f\u63f4\uff0c\u5be6\u73fe\u9ad8\u6548\u4e14\u7121\u6578\u64da\u7af6\u8cfd\u7684\u7570\u6b65\u7a0b\u5f0f\u3002</p>"},{"location":"learning-path/stage4-expert/async-programming-advanced/#_2","title":"\u70ba\u4ec0\u9ebc\u9700\u8981\u7570\u6b65\u7de8\u7a0b\uff1f","text":"<p>\u5728\u9ad8\u4f75\u767c\u5834\u666f\u4e2d\uff0c\u50b3\u7d71\u7684\u540c\u6b65\u7de8\u7a0b\u53ef\u80fd\u5c0e\u81f4\u554f\u984c\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u7dda\u7a0b\u963b\u585e\uff1a\u540c\u6b65\u64cd\u4f5c\u5c0e\u81f4\u7dda\u7a0b\u7a7a\u9592\uff0c\u6d6a\u8cbb\u7cfb\u7d71\u8cc7\u6e90\u3002</li> <li>\u6027\u80fd\u74f6\u9838\uff1a\u7121\u6cd5\u6709\u6548\u8655\u7406\u5927\u91cf\u4e26\u767c\u4efb\u52d9\uff0c\u5982\u7db2\u7d61\u4f3a\u670d\u5668\u8655\u7406\u591a\u7528\u6236\u8acb\u6c42\u3002</li> <li>\u8907\u96dc\u4e26\u767c\u7ba1\u7406\uff1a\u624b\u52d5\u7ba1\u7406\u591a\u7dda\u7a0b\u8207\u540c\u6b65\u539f\u8a9e\uff08\u5982\u9396\uff09\u53ef\u80fd\u5f15\u5165\u932f\u8aa4\u3002</li> </ul> <p>Rust \u7684\u7570\u6b65\u7de8\u7a0b\u901a\u904e <code>async/await</code> \u8207\u8f15\u91cf\u7d1a\u4efb\u52d9\u8abf\u5ea6\uff0c\u89e3\u6c7a\u9019\u4e9b\u554f\u984c\uff0c\u7279\u5225\u9069\u7528\u65bc\u7db2\u7d61\u61c9\u7528\u8207\u9ad8\u4f75\u767c\u5834\u666f\u3002</p>"},{"location":"learning-path/stage4-expert/async-programming-advanced/#_3","title":"\u7570\u6b65\u7de8\u7a0b\u7684\u9ad8\u7d1a\u5de5\u5177\u8207\u6982\u5ff5","text":""},{"location":"learning-path/stage4-expert/async-programming-advanced/#asyncawait","title":"async/await \u8a9e\u6cd5\uff1a\u7c21\u5316\u7570\u6b65\u4ee3\u78bc","text":"<p>Rust \u4f7f\u7528 <code>async</code> \u95dc\u9375\u5b57\u5b9a\u7fa9\u7570\u6b65\u51fd\u6578\uff0c\u4f7f\u7528 <code>await</code> \u95dc\u9375\u5b57\u7b49\u5f85\u7570\u6b65\u64cd\u4f5c\u5b8c\u6210\uff1a</p> <pre><code>use tokio::time::{sleep, Duration};\n\nasync fn say_hello() {\n    sleep(Duration::from_secs(1)).await;\n    println!(\"Hello after 1 second\");\n}\n\n#[tokio::main]\nasync fn main() {\n    say_hello().await;\n}\n</code></pre> <p><code>async</code> \u51fd\u6578\u8fd4\u56de\u4e00\u500b <code>Future</code>\uff0c\u5fc5\u9808\u5728\u7570\u6b65\u904b\u884c\u6642\u4e2d\u57f7\u884c\uff0c<code>await</code> \u5247\u7528\u65bc\u7b49\u5f85 <code>Future</code> \u5b8c\u6210\u3002</p>"},{"location":"learning-path/stage4-expert/async-programming-advanced/#future-executor","title":"Future \u8207\u57f7\u884c\u5668 (Executor)","text":"<p><code>Future</code> \u662f Rust \u7570\u6b65\u7de8\u7a0b\u7684\u6838\u5fc3\uff0c\u8868\u793a\u4e00\u500b\u53ef\u80fd\u5c1a\u672a\u5b8c\u6210\u7684\u64cd\u4f5c\u3002<code>Future</code> \u9700\u8981\u57f7\u884c\u5668\uff08\u7531\u904b\u884c\u6642\u5982 <code>tokio</code> \u63d0\u4f9b\uff09\u4f86\u9a45\u52d5\u5176\u57f7\u884c\uff1a</p> <pre><code>use tokio::task;\n\nasync fn compute() -&gt; i32 {\n    42\n}\n\n#[tokio::main]\nasync fn main() {\n    let result = task::spawn(compute()).await.unwrap();\n    println!(\"Result: {}\", result);\n}\n</code></pre> <p>\u57f7\u884c\u5668\u8ca0\u8cac\u8abf\u5ea6\u8207\u57f7\u884c\u7570\u6b65\u4efb\u52d9\uff0c<code>tokio::task::spawn</code> \u7528\u65bc\u5275\u5efa\u7368\u7acb\u4efb\u52d9\u3002</p>"},{"location":"learning-path/stage4-expert/async-programming-advanced/#stream-sink","title":"\u7570\u6b65\u6d41 (Stream) \u8207 Sink","text":"<p>Rust \u652f\u63f4\u7570\u6b65\u6d41\uff0c\u7528\u65bc\u8655\u7406\u9023\u7e8c\u6578\u64da\u5e8f\u5217\uff0c\u985e\u4f3c\u65bc\u8fed\u4ee3\u5668\uff0c\u4f46\u9069\u7528\u65bc\u7570\u6b65\u74b0\u5883\uff1a</p> <pre><code>use tokio_stream::StreamExt;\nuse tokio::time::{interval, Duration};\n\n#[tokio::main]\nasync fn main() {\n    let mut stream = tokio_stream::wrappers::IntervalStream::new(interval(Duration::from_secs(1)));\n    while let Some(_) = stream.next().await {\n        println!(\"Tick\");\n    }\n}\n</code></pre> <p>\u7570\u6b65\u6d41\u7279\u5225\u9069\u7528\u65bc\u8655\u7406\u5be6\u6642\u6578\u64da\u6216\u4e8b\u4ef6\u5faa\u74b0\u3002</p>"},{"location":"learning-path/stage4-expert/async-programming-advanced/#tokio-async-std","title":"\u7570\u6b65\u904b\u884c\u6642\u9078\u64c7\uff1atokio \u8207 async-std","text":"<p>Rust \u793e\u7fa4\u63d0\u4f9b\u4e86\u591a\u500b\u7570\u6b65\u904b\u884c\u6642\uff0c\u5e38\u7528\u7684\u662f <code>tokio</code> \u548c <code>async-std</code>\uff1a</p> <ul> <li><code>tokio</code>\uff1a\u529f\u80fd\u8c50\u5bcc\uff0c\u652f\u63f4\u591a\u7dda\u7a0b\u8abf\u5ea6\uff0c\u9069\u5408\u4f3a\u670d\u5668\u61c9\u7528\u3002</li> <li><code>async-std</code>\uff1a\u8f15\u91cf\u7d1a\uff0c\u985e\u4f3c\u6a19\u6e96\u5eab\uff0c\u9069\u5408\u7c21\u55ae\u5c08\u6848\u3002</li> </ul> <p>\u9078\u64c7\u904b\u884c\u6642\u6642\uff0c\u9700\u8003\u616e\u5c08\u6848\u9700\u6c42\u8207\u6027\u80fd\u7279\u6027\u3002</p>"},{"location":"learning-path/stage4-expert/async-programming-advanced/#_4","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u7df4\u7fd2 async/await\uff1a\u7de8\u5beb\u7c21\u55ae\u7570\u6b65\u7a0b\u5f0f\uff0c\u7406\u89e3 <code>Future</code> \u8207 <code>await</code> \u7684\u884c\u70ba\u3002</li> <li>\u63a2\u7d22\u7570\u6b65\u6d41\uff1a\u4f7f\u7528 <code>Stream</code> \u8655\u7406\u9023\u7e8c\u6578\u64da\uff0c\u7406\u89e3\u5176\u8207\u8fed\u4ee3\u5668\u7684\u5340\u5225\u3002</li> <li>\u5c0d\u6bd4\u904b\u884c\u6642\uff1a\u5728\u5c08\u6848\u4e2d\u5617\u8a66 <code>tokio</code> \u8207 <code>async-std</code>\uff0c\u6bd4\u8f03\u5176 API \u8207\u6027\u80fd\u8868\u73fe\u3002</li> </ul>"},{"location":"learning-path/stage4-expert/functional-features/","title":"\u51fd\u6578\u5f0f\u7de8\u7a0b\u7279\u6027\uff1aRust \u7684\u62bd\u8c61\u8207\u8868\u9054\u529b","text":"<p>\u51fd\u6578\u5f0f\u7de8\u7a0b (Functional Programming) \u662f\u4e00\u7a2e\u7a0b\u5f0f\u8a2d\u8a08\u7bc4\u5f0f\uff0c\u5f37\u8abf\u4e0d\u53ef\u8b8a\u6027\u3001\u7d14\u51fd\u6578\u8207\u9ad8\u968e\u51fd\u6578\u3002</p> <p>Rust \u96d6\u7136\u4e3b\u8981\u662f\u4e00\u9580\u7cfb\u7d71\u7de8\u7a0b\u8a9e\u8a00\uff0c\u4f46\u878d\u5165\u4e86\u8a31\u591a\u51fd\u6578\u5f0f\u7de8\u7a0b\u7279\u6027\uff0c\u63d0\u5347\u4ee3\u78bc\u7684\u62bd\u8c61\u6027\u8207\u8868\u9054\u529b\u3002</p> <p>\u5c0d\u65bc\u6709\u8f03\u6df1 Rust \u57fa\u790e\u7684\u5b78\u7fd2\u8005\u4f86\u8aaa\uff0c\u638c\u63e1\u51fd\u6578\u5f0f\u7de8\u7a0b\u7279\u6027\u662f\u7de8\u5beb\u512a\u96c5\u4e14\u9ad8\u6548\u4ee3\u78bc\u7684\u91cd\u8981\u4e00\u6b65\u3002</p>"},{"location":"learning-path/stage4-expert/functional-features/#_1","title":"\u4ec0\u9ebc\u662f\u51fd\u6578\u5f0f\u7de8\u7a0b\u7279\u6027\uff1f","text":"<p>\u51fd\u6578\u5f0f\u7de8\u7a0b\u7279\u6027\u5305\u62ec\u4e0d\u53ef\u8b8a\u6578\u64da\u3001\u7d14\u51fd\u6578\uff08\u7121\u526f\u4f5c\u7528\uff09\u3001\u9589\u5305 (Closures)\u3001\u6a21\u5f0f\u5339\u914d\u8207\u9ad8\u968e\u51fd\u6578\u7b49\u3002</p> <p>Rust \u5c07\u9019\u4e9b\u7279\u6027\u8207\u5176\u6240\u6709\u6b0a\u7cfb\u7d71\u7d50\u5408\uff0c\u78ba\u4fdd\u5b89\u5168\u8207\u6027\u80fd\u3002</p> <p>Rust \u51fd\u6578\u5f0f\u7de8\u7a0b\u7684\u6838\u5fc3\u7406\u5ff5\u662f\uff1a\u901a\u904e\u62bd\u8c61\u8207\u4e0d\u53ef\u8b8a\u6027\uff0c\u63d0\u5347\u4ee3\u78bc\u7684\u53ef\u9810\u6e2c\u6027\u8207\u53ef\u7d44\u5408\u6027\u3002</p>"},{"location":"learning-path/stage4-expert/functional-features/#_2","title":"\u70ba\u4ec0\u9ebc\u9700\u8981\u51fd\u6578\u5f0f\u7de8\u7a0b\u7279\u6027\uff1f","text":"<p>\u5728\u8907\u96dc\u7a0b\u5f0f\u8a2d\u8a08\u4e2d\uff0c\u547d\u4ee4\u5f0f\u7de8\u7a0b\u53ef\u80fd\u5c0e\u81f4\u554f\u984c\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u526f\u4f5c\u7528\u96e3\u8ffd\u8e2a\uff1a\u53ef\u8b8a\u72c0\u614b\u8207\u526f\u4f5c\u7528\u4f7f\u4ee3\u78bc\u884c\u70ba\u96e3\u4ee5\u9810\u6e2c\u3002</li> <li>\u4ee3\u78bc\u96e3\u91cd\u7528\uff1a\u7f3a\u4e4f\u62bd\u8c61\u6a5f\u5236\u6642\uff0c\u529f\u80fd\u96e3\u4ee5\u7d44\u5408\u8207\u91cd\u7528\u3002</li> <li>\u4e26\u767c\u4e0d\u5b89\u5168\uff1a\u53ef\u8b8a\u5171\u4eab\u72c0\u614b\u53ef\u80fd\u5c0e\u81f4\u6578\u64da\u7af6\u8cfd\u3002</li> </ul> <p>Rust \u7684\u51fd\u6578\u5f0f\u7279\u6027\u901a\u904e\u4e0d\u53ef\u8b8a\u6027\u8207\u9ad8\u968e\u51fd\u6578\uff0c\u6e1b\u5c11\u526f\u4f5c\u7528\uff0c\u63d0\u5347\u4ee3\u78bc\u7684\u53ef\u8b80\u6027\u8207\u5b89\u5168\u6027\u3002</p>"},{"location":"learning-path/stage4-expert/functional-features/#_3","title":"\u51fd\u6578\u5f0f\u7de8\u7a0b\u7684\u4e3b\u8981\u7279\u6027","text":""},{"location":"learning-path/stage4-expert/functional-features/#_4","title":"\u4e0d\u53ef\u8b8a\u6027\u8207\u7d14\u51fd\u6578","text":"<p>Rust \u9810\u8a2d\u8b8a\u6578\u4e0d\u53ef\u8b8a\uff0c\u9f13\u52f5\u4f7f\u7528\u7d14\u51fd\u6578\uff08\u4e0d\u4f9d\u8cf4\u6216\u4fee\u6539\u5916\u90e8\u72c0\u614b\uff09\uff1a</p> <pre><code>fn double(x: i32) -&gt; i32 {\n    // \u7d14\u51fd\u6578\uff0c\u7121\u526f\u4f5c\u7528\n    x * 2 \n}\n\nfn main() {\n    let x = 5;\n    let result = double(x);\n    println!(\"Double of {} is {}\", x, result);\n}\n</code></pre> <p>\u4e0d\u53ef\u8b8a\u6027\u8207\u7d14\u51fd\u6578\u4f7f\u4ee3\u78bc\u884c\u70ba\u66f4\u53ef\u9810\u6e2c\uff0c\u7279\u5225\u662f\u5728\u4e26\u767c\u74b0\u5883\u4e2d\u3002</p>"},{"location":"learning-path/stage4-expert/functional-features/#closures","title":"\u9589\u5305 (Closures)\uff1a\u6355\u7372\u74b0\u5883","text":"<p>\u9589\u5305\u662f Rust \u4e2d\u7684\u533f\u540d\u51fd\u6578\uff0c\u53ef\u4ee5\u6355\u7372\u5176\u5b9a\u7fa9\u74b0\u5883\u4e2d\u7684\u8b8a\u6578\uff1a</p> <pre><code>fn main() {\n    let base = 10;\n\n    // \u9589\u5305\u6355\u7372 base\n    let add_base = |x: i32| x + base; \n    println!(\"Result: {}\", add_base(5)); // \u8f38\u51fa 15\n}\n</code></pre> <p>\u9589\u5305\u7d50\u5408\u6240\u6709\u6b0a\u898f\u5247\uff0c\u78ba\u4fdd\u6355\u7372\u8b8a\u6578\u7684\u5b89\u5168\u8a2a\u554f\u3002</p>"},{"location":"learning-path/stage4-expert/functional-features/#_5","title":"\u9ad8\u968e\u51fd\u6578\u8207\u8fed\u4ee3\u5668","text":"<p>Rust \u652f\u63f4\u9ad8\u968e\u51fd\u6578\uff08\u63a5\u53d7\u51fd\u6578\u4f5c\u70ba\u53c3\u6578\u6216\u8fd4\u56de\u51fd\u6578\uff09\uff0c\u4e26\u63d0\u4f9b\u5f37\u5927\u7684\u8fed\u4ee3\u5668 API\uff1a</p> <pre><code>fn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let doubled: Vec&lt;i32&gt; = numbers.into_iter().map(|x| x * 2).collect();\n    println!(\"Doubled: {:?}\", doubled); // \u8f38\u51fa [2, 4, 6, 8, 10]\n}\n</code></pre> <p>\u8fed\u4ee3\u5668\u65b9\u6cd5\u5982 <code>map</code>\u3001<code>filter</code> \u548c <code>fold</code> \u63d0\u4f9b\u51fd\u6578\u5f0f\u98a8\u683c\u7684\u64cd\u4f5c\uff0c\u7c21\u5316\u6578\u64da\u8655\u7406\u3002</p>"},{"location":"learning-path/stage4-expert/functional-features/#resultoption","title":"\u6a21\u5f0f\u5339\u914d\u8207 Result/Option \u7d44\u5408","text":"<p>\u6a21\u5f0f\u5339\u914d\u8207 <code>Result</code>/<code>Option</code> \u7684\u51fd\u6578\u5f0f\u8655\u7406\u65b9\u5f0f\uff0c\u4f7f\u932f\u8aa4\u8655\u7406\u66f4\u5177\u8868\u9054\u529b\uff1a</p> <pre><code>fn process_data(data: Option&lt;i32&gt;) -&gt; Option&lt;i32&gt; {\n    data.and_then(|x| if x &gt; 0 { Some(x * 2) } else { None })\n}\n\nfn main() {\n    let value = Some(3);\n    println!(\"Processed: {:?}\", process_data(value)); // \u8f38\u51fa Some(6)\n    let none = Some(-1);\n    println!(\"Processed: {:?}\", process_data(none)); // \u8f38\u51fa None\n}\n</code></pre> <p>\u9019\u7a2e\u7d44\u5408\u65b9\u5f0f\u907f\u514d\u4e86\u5de2\u72c0\u689d\u4ef6\uff0c\u63d0\u5347\u4ee3\u78bc\u6e05\u6670\u5ea6\u3002</p>"},{"location":"learning-path/stage4-expert/functional-features/#_6","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u7df4\u7fd2\u9589\u5305\u61c9\u7528\uff1a\u4f7f\u7528\u9589\u5305\u8655\u7406\u6578\u64da\uff0c\u7406\u89e3\u5176\u8207\u74b0\u5883\u8b8a\u6578\u7684\u4ea4\u4e92\u3002</li> <li>\u63a2\u7d22\u8fed\u4ee3\u5668 API\uff1a\u4f7f\u7528 <code>map</code>\u3001<code>filter</code> \u7b49\u65b9\u6cd5\u8655\u7406\u96c6\u5408\uff0c\u719f\u6089\u51fd\u6578\u5f0f\u98a8\u683c\u3002</li> <li>\u8a2d\u8a08\u7d14\u51fd\u6578\uff1a\u5617\u8a66\u5c07\u529f\u80fd\u5206\u89e3\u70ba\u7121\u526f\u4f5c\u7528\u7684\u51fd\u6578\uff0c\u63d0\u5347\u4ee3\u78bc\u53ef\u9810\u6e2c\u6027\u3002</li> </ul>"},{"location":"learning-path/stage4-expert/macros-metaprogramming/","title":"\u5b8f\u8207\u5143\u7de8\u7a0b\uff1aRust \u7684\u4ee3\u78bc\u751f\u6210\u8207\u62bd\u8c61","text":"<p>\u5b8f (Macros) \u8207\u5143\u7de8\u7a0b (Metaprogramming) \u662f Rust \u8a9e\u8a00\u4e2d\u7684\u9ad8\u7d1a\u7279\u6027\uff0c\u5141\u8a31\u958b\u767c\u8005\u5728\u7de8\u8b6f\u6642\u751f\u6210\u8207\u64cd\u4f5c\u4ee3\u78bc\uff0c\u63d0\u5347\u62bd\u8c61\u80fd\u529b\u8207\u958b\u767c\u6548\u7387\u3002</p> <p>\u5c0d\u65bc\u6709\u8f03\u6df1 Rust \u57fa\u790e\u7684\u5b78\u7fd2\u8005\u4f86\u8aaa\uff0c\u638c\u63e1\u5b8f\u8207\u5143\u7de8\u7a0b\u662f\u7de8\u5beb\u9ad8\u5ea6\u62bd\u8c61\u8207\u53ef\u5b9a\u88fd\u4ee3\u78bc\u7684\u95dc\u9375\u4e00\u6b65\u3002</p>"},{"location":"learning-path/stage4-expert/macros-metaprogramming/#_1","title":"\u4ec0\u9ebc\u662f\u5b8f\u8207\u5143\u7de8\u7a0b\uff1f","text":"<p>\u5b8f\u662f Rust \u4e2d\u7528\u65bc\u7de8\u8b6f\u6642\u4ee3\u78bc\u751f\u6210\u7684\u5de5\u5177\uff0c\u5141\u8a31\u60a8\u5b9a\u7fa9\u91cd\u8907\u6216\u8907\u96dc\u7684\u4ee3\u78bc\u6a21\u5f0f\uff0c\u4e26\u81ea\u52d5\u751f\u6210\u5177\u9ad4\u5be6\u73fe\u3002</p> <p>\u5143\u7de8\u7a0b\u5247\u662f\u66f4\u5ee3\u6cdb\u7684\u6982\u5ff5\uff0c\u6307\u5728\u7de8\u8b6f\u6642\u64cd\u4f5c\u8207\u751f\u6210\u4ee3\u78bc\u7684\u6280\u8853\u3002</p> <p>Rust \u5b8f\u8207\u5143\u7de8\u7a0b\u7684\u6838\u5fc3\u7406\u5ff5\u662f\uff1a\u901a\u904e\u7de8\u8b6f\u6642\u4ee3\u78bc\u751f\u6210\uff0c\u6e1b\u5c11\u91cd\u8907\uff0c\u63d0\u5347\u62bd\u8c61\uff0c\u540c\u6642\u4fdd\u6301\u6027\u80fd\u3002</p>"},{"location":"learning-path/stage4-expert/macros-metaprogramming/#_2","title":"\u70ba\u4ec0\u9ebc\u9700\u8981\u5b8f\u8207\u5143\u7de8\u7a0b\uff1f","text":"<p>\u5728\u8907\u96dc\u5c08\u6848\u4e2d\uff0c\u624b\u52d5\u7de8\u5beb\u4ee3\u78bc\u53ef\u80fd\u5c0e\u81f4\u554f\u984c\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u91cd\u8907\u4ee3\u78bc\uff1a\u985e\u4f3c\u6a21\u5f0f\u9700\u8981\u5728\u591a\u8655\u624b\u52d5\u5be6\u73fe\uff0c\u589e\u52a0\u7dad\u8b77\u6210\u672c\u3002</li> <li>\u62bd\u8c61\u4e0d\u8db3\uff1a\u7f3a\u4e4f\u5f37\u5927\u5de5\u5177\u6642\uff0c\u96e3\u4ee5\u5b9a\u7fa9\u901a\u7528\u4e14\u53ef\u5b9a\u88fd\u7684\u529f\u80fd\u3002</li> <li>\u958b\u767c\u6548\u7387\u4f4e\uff1a\u91cd\u8907\u6027\u4efb\u52d9\u7121\u6cd5\u81ea\u52d5\u5316\uff0c\u5f71\u97ff\u958b\u767c\u901f\u5ea6\u3002</li> </ul> <p>Rust \u7684\u5b8f\u7cfb\u7d71\u63d0\u4f9b\u4e86\u5f37\u5927\u7684\u5143\u7de8\u7a0b\u80fd\u529b\uff0c\u7279\u5225\u9069\u7528\u65bc\u5b9a\u7fa9 DSL (\u9818\u57df\u7279\u5b9a\u8a9e\u8a00) \u8207\u6e1b\u5c11\u6a23\u677f\u4ee3\u78bc\u3002</p>"},{"location":"learning-path/stage4-expert/macros-metaprogramming/#_3","title":"\u5b8f\u8207\u5143\u7de8\u7a0b\u7684\u57fa\u672c\u5de5\u5177","text":""},{"location":"learning-path/stage4-expert/macros-metaprogramming/#declarative-macros","title":"\u8072\u660e\u5f0f\u5b8f (Declarative Macros)","text":"<p>\u8072\u660e\u5f0f\u5b8f\u4f7f\u7528 <code>macro_rules!</code> \u5b9a\u7fa9\uff0c\u901a\u904e\u6a21\u5f0f\u5339\u914d\u751f\u6210\u4ee3\u78bc\uff1a</p> <pre><code>// \u5b9a\u7fa9\u4e00\u500b\u7c21\u55ae\u7684\u5b8f\nmacro_rules! say_hello {\n    ($name:expr) =&gt; {\n        println!(\"Hello, {}!\", $name);\n    };\n}\n\nfn main() {\n    say_hello!(\"Alice\"); // \u5c55\u958b\u70ba println!(\"Hello, {}!\", \"Alice\");\n}\n</code></pre> <p>\u8072\u660e\u5f0f\u5b8f\u9069\u5408\u7c21\u55ae\u7684\u4ee3\u78bc\u66ff\u63db\u8207\u6a21\u5f0f\u751f\u6210\u3002</p>"},{"location":"learning-path/stage4-expert/macros-metaprogramming/#procedural-macros","title":"\u904e\u7a0b\u5f0f\u5b8f (Procedural Macros)","text":"<p>\u904e\u7a0b\u5f0f\u5b8f\u66f4\u5f37\u5927\uff0c\u5141\u8a31\u60a8\u7de8\u5beb\u81ea\u5b9a\u7fa9\u4ee3\u78bc\u751f\u6210\u908f\u8f2f\uff0c\u5206\u70ba\u4e09\u985e\uff1a</p> <ul> <li>\u51fd\u6578\u5f0f\u5b8f\uff1a\u985e\u4f3c\u51fd\u6578\uff0c\u8655\u7406\u8f38\u5165\u4e26\u751f\u6210\u4ee3\u78bc\u3002</li> <li>\u6d3e\u751f\u5b8f (Derive Macros)\uff1a\u70ba\u7d50\u69cb\u9ad4\u6216\u679a\u8209\u81ea\u52d5\u5be6\u73fe\u7279\u5fb5\u3002</li> <li>\u5c6c\u6027\u5b8f (Attribute Macros)\uff1a\u81ea\u5b9a\u7fa9\u5c6c\u6027\uff0c\u4fee\u6539\u4ee3\u78bc\u884c\u70ba\u3002</li> </ul> <p>\u793a\u4f8b\uff08\u7c21\u55ae\u6d3e\u751f\u5b8f\uff0c\u9700\u8981\u7368\u7acb crate\uff09\uff1a</p> <pre><code>// \u5728\u7368\u7acb crate \u4e2d\u5b9a\u7fa9\nuse proc_macro::TokenStream;\nuse quote::quote;\nuse syn;\n\n#[proc_macro_derive(CustomDebug)]\npub fn custom_debug_derive(input: TokenStream) -&gt; TokenStream {\n    // \u89e3\u6790\u8207\u751f\u6210\u4ee3\u78bc\u908f\u8f2f\n    let ast = syn::parse(input).unwrap();\n\n    // \u7c21\u5316\u793a\u4f8b\uff0c\u5be6\u969b\u61c9\u751f\u6210 Debug \u5be6\u73fe\n    let gen = quote! { /* \u751f\u6210\u4ee3\u78bc */ };\n    gen.into()\n}\n</code></pre> <p>\u904e\u7a0b\u5f0f\u5b8f\u9700\u8981\u66f4\u591a\u5de5\u5177\uff08\u5982 <code>syn</code> \u548c <code>quote</code>\uff09\uff0c\u9069\u5408\u8907\u96dc\u4ee3\u78bc\u751f\u6210\u3002</p>"},{"location":"learning-path/stage4-expert/macros-metaprogramming/#_4","title":"\u5e38\u898b\u5b8f\u61c9\u7528\uff1a\u6e1b\u5c11\u6a23\u677f\u4ee3\u78bc","text":"<p>\u5b8f\u5e38\u7528\u65bc\u6e1b\u5c11\u91cd\u8907\u4ee3\u78bc\uff0c\u4f8b\u5982\u81ea\u52d5\u5be6\u73fe\u7279\u5fb5\u6216\u751f\u6210\u6e2c\u8a66\uff1a</p> <pre><code>macro_rules! vec_str {\n    ($($x:expr),*) =&gt; {\n        vec![$($x.to_string()),*]\n    };\n}\n\nfn main() {\n    let v = vec_str![1, 2, 3];\n    println!(\"Vector: {:?}\", v); // \u8f38\u51fa [\"1\", \"2\", \"3\"]\n}\n</code></pre> <p>\u9019\u7a2e\u5b8f\u6e1b\u5c11\u4e86\u624b\u52d5\u8f49\u63db\u7684\u91cd\u8907\u5de5\u4f5c\u3002</p>"},{"location":"learning-path/stage4-expert/macros-metaprogramming/#_5","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u5f9e\u8072\u660e\u5f0f\u5b8f\u958b\u59cb\uff1a\u4f7f\u7528 <code>macro_rules!</code> \u5b9a\u7fa9\u7c21\u55ae\u5b8f\uff0c\u7406\u89e3\u6a21\u5f0f\u5339\u914d\u8207\u4ee3\u78bc\u5c55\u958b\u3002</li> <li>\u63a2\u7d22\u904e\u7a0b\u5f0f\u5b8f\uff1a\u5b78\u7fd2 <code>syn</code> \u548c <code>quote</code> \u5de5\u5177\uff0c\u5617\u8a66\u70ba\u7d50\u69cb\u9ad4\u5be6\u73fe\u81ea\u5b9a\u7fa9\u6d3e\u751f\u5b8f\u3002</li> <li>\u95b1\u8b80\u6a19\u6e96\u5eab\u5b8f\uff1a\u7814\u7a76 Rust \u6a19\u6e96\u5eab\u8207\u793e\u7fa4 crate \u4e2d\u7684\u5b8f\u7528\u6cd5\uff0c\u5982 <code>serde_derive</code>\uff0c\u7406\u89e3\u5be6\u969b\u61c9\u7528\u3002</li> </ul>"},{"location":"learning-path/stage5-mastery/interoperability-systems-programming/","title":"\u4e92\u64cd\u4f5c\u6027\u8207\u7cfb\u7d71\u7de8\u7a0b\uff1aRust \u7684\u5e95\u5c64\u6574\u5408\u8207\u63a7\u5236","text":"<p>\u4e92\u64cd\u4f5c\u6027 (Interoperability) \u8207\u7cfb\u7d71\u7de8\u7a0b (Systems Programming) \u662f Rust \u8a9e\u8a00\u7684\u6838\u5fc3\u61c9\u7528\u9818\u57df\uff0c\u6d89\u53ca\u8207\u5176\u4ed6\u8a9e\u8a00\u6574\u5408\u3001\u76f4\u63a5\u64cd\u4f5c\u7cfb\u7d71\u8cc7\u6e90\u8207\u786c\u9ad4\u4ea4\u4e92\u3002</p> <p>\u5c0d\u65bc\u6709\u6df1\u539a Rust \u57fa\u790e\u7684\u5b78\u7fd2\u8005\u4f86\u8aaa\uff0c\u638c\u63e1\u4e92\u64cd\u4f5c\u6027\u8207\u7cfb\u7d71\u7de8\u7a0b\u662f\u6210\u70ba\u5c08\u5bb6\u7d1a\u958b\u767c\u8005\u7684\u95dc\u9375\u4e00\u6b65\u3002</p>"},{"location":"learning-path/stage5-mastery/interoperability-systems-programming/#_1","title":"\u4ec0\u9ebc\u662f\u4e92\u64cd\u4f5c\u6027\u8207\u7cfb\u7d71\u7de8\u7a0b\uff1f","text":"<p>\u4e92\u64cd\u4f5c\u6027\u6307 Rust \u8207\u5176\u4ed6\u8a9e\u8a00\uff08\u5982 C/C++\uff09\u6216\u7cfb\u7d71\u7684\u6574\u5408\u80fd\u529b\uff0c\u901a\u904e\u5916\u90e8\u51fd\u6578\u4ecb\u9762 (Foreign Function Interface, FFI) \u5be6\u73fe\u3002</p> <p>\u7cfb\u7d71\u7de8\u7a0b\u5247\u6d89\u53ca\u76f4\u63a5\u64cd\u4f5c\u64cd\u4f5c\u7cfb\u7d71\u8cc7\u6e90\uff08\u5982\u6587\u4ef6\u3001\u7db2\u7d61\u3001\u9032\u7a0b\uff09\u3001\u786c\u9ad4\u4ecb\u9762\u8207\u5e95\u5c64\u8a18\u61b6\u9ad4\u7ba1\u7406\uff0c\u65e8\u5728\u5be6\u73fe\u9ad8\u6548\u80fd\u8207\u7cbe\u78ba\u63a7\u5236\u3002</p> <p>Rust \u4e92\u64cd\u4f5c\u6027\u8207\u7cfb\u7d71\u7de8\u7a0b\u7684\u6838\u5fc3\u7406\u5ff5\u662f\uff1a\u901a\u904e\u5b89\u5168\u8207\u9ad8\u6548\u7684\u5e95\u5c64\u64cd\u4f5c\u8207\u5916\u90e8\u4ea4\u4e92\uff0c\u5be6\u73fe\u5c0d\u7cfb\u7d71\u8cc7\u6e90\u7684\u7cbe\u78ba\u63a7\u5236\uff0c\u540c\u6642\u907f\u514d\u5e38\u898b\u932f\u8aa4\u3002</p>"},{"location":"learning-path/stage5-mastery/interoperability-systems-programming/#_2","title":"\u70ba\u4ec0\u9ebc\u9700\u8981\u4e92\u64cd\u4f5c\u6027\u8207\u7cfb\u7d71\u7de8\u7a0b\uff1f","text":"<p>\u5728\u5e95\u5c64\u958b\u767c\u8207\u5927\u578b\u5c08\u6848\u4e2d\uff0c\u55ae\u4e00\u8a9e\u8a00\u53ef\u80fd\u7121\u6cd5\u6eff\u8db3\u6240\u6709\u9700\u6c42\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u907a\u7559\u4ee3\u78bc\u91cd\u7528\uff1a\u9700\u8981\u6574\u5408\u73fe\u6709\u7684 C/C++ \u5eab\u6216\u7cfb\u7d71\u7d44\u4ef6\u3002</li> <li>\u5e95\u5c64\u6027\u80fd\u9700\u6c42\uff1a\u67d0\u4e9b\u64cd\u4f5c\u53ef\u80fd\u9700\u8981\u76f4\u63a5\u8abf\u7528\u7cfb\u7d71\u8abf\u7528\u6216\u532f\u7de8\u3002</li> <li>\u8de8\u5e73\u53f0\u6574\u5408\uff1a\u9700\u8981\u5728\u4e0d\u540c\u8a9e\u8a00\u6216\u74b0\u5883\u9593\u5171\u4eab\u529f\u80fd\u3002</li> <li>\u8a18\u61b6\u9ad4\u4e0d\u5b89\u5168\uff1a\u50b3\u7d71\u8a9e\u8a00\u624b\u52d5\u8a18\u61b6\u9ad4\u7ba1\u7406\u6613\u5c0e\u81f4\u6d29\u6f0f\u8207\u61f8\u5782\u6307\u91dd\u3002</li> </ul> <p>Rust \u901a\u904e\u6240\u6709\u6b0a\u7cfb\u7d71\u8207\u5b89\u5168\u62bd\u8c61\uff0c\u89e3\u6c7a\u4e86\u9019\u4e9b\u554f\u984c\uff0c\u7279\u5225\u9069\u7528\u65bc\u64cd\u4f5c\u7cfb\u7d71\u958b\u767c\u3001\u9a45\u52d5\u7a0b\u5f0f\u8207\u5d4c\u5165\u5f0f\u7cfb\u7d71\u3002</p>"},{"location":"learning-path/stage5-mastery/interoperability-systems-programming/#_3","title":"\u4e92\u64cd\u4f5c\u6027\u8207\u7cfb\u7d71\u7de8\u7a0b\u7684\u9ad8\u7d1a\u6280\u8853","text":""},{"location":"learning-path/stage5-mastery/interoperability-systems-programming/#ffi","title":"FFI \u8207\u4e92\u64cd\u4f5c\u6027\uff1a\u8abf\u7528\u8207\u66b4\u9732\u51fd\u6578","text":"<p>Rust \u4f7f\u7528 <code>extern \"C\"</code> \u8072\u660e\u5916\u90e8 C \u51fd\u6578\uff0c\u4e26\u901a\u904e <code>unsafe</code> \u584a\u8abf\u7528\uff1a</p> <pre><code>// \u8072\u660e\u5916\u90e8 C \u51fd\u6578\nextern \"C\" {\n    fn abs(input: i32) -&gt; i32;\n}\n\nfn main() {\n    // \u5728 unsafe \u584a\u4e2d\u8abf\u7528 C \u51fd\u6578\n    let result = unsafe {\n        abs(-5)\n    };\n    println!(\"Absolute value: {}\", result); // \u8f38\u51fa 5\n}\n</code></pre> <p>Rust \u51fd\u6578\u4e5f\u53ef\u4ee5\u901a\u904e <code>#[no_mangle]</code> \u66b4\u9732\u7d66\u5916\u90e8\u7a0b\u5f0f\uff1a</p> <pre><code>#[no_mangle]\npub extern \"C\" fn rust_hello() {\n    println!(\"Hello from Rust!\");\n}\n</code></pre>"},{"location":"learning-path/stage5-mastery/interoperability-systems-programming/#_4","title":"\u8a18\u61b6\u9ad4\u7ba1\u7406\u8207\u5b89\u5168\u8003\u91cf","text":"<p>FFI \u64cd\u4f5c\u4e2d\uff0c\u8a18\u61b6\u9ad4\u7ba1\u7406\u662f\u95dc\u9375\u554f\u984c\uff0cRust \u4e0d\u6703\u81ea\u52d5\u7ba1\u7406\u5916\u90e8\u5206\u914d\u7684\u8a18\u61b6\u9ad4\uff0c\u9700\u624b\u52d5\u91cb\u653e\uff1a</p> <pre><code>use std::ptr;\n\nextern \"C\" {\n    fn malloc(size: usize) -&gt; *mut u8;\n    fn free(ptr: *mut u8);\n}\n\nfn main() {\n    unsafe {\n        let ptr = malloc(10);\n        if !ptr.is_null() {\n            // \u4f7f\u7528\u5206\u914d\u7684\u8a18\u61b6\u9ad4\n            free(ptr); // \u624b\u52d5\u91cb\u653e\n        }\n    }\n}\n</code></pre>"},{"location":"learning-path/stage5-mastery/interoperability-systems-programming/#raw-pointers-unsafe","title":"\u5e95\u5c64\u8a18\u61b6\u9ad4\u64cd\u4f5c\uff1aRaw Pointers \u8207 unsafe","text":"<p>Rust \u5141\u8a31\u4f7f\u7528\u539f\u59cb\u6307\u91dd\u9032\u884c\u5e95\u5c64\u8a18\u61b6\u9ad4\u64cd\u4f5c\uff0c\u4f46\u9700\u5728 <code>unsafe</code> \u584a\u4e2d\u57f7\u884c\uff1a</p> <pre><code>fn main() {\n    let mut value: i32 = 42;\n    let ptr: *mut i32 = &amp;mut value as *mut i32;\n\n    unsafe {\n        *ptr = 100; // \u4fee\u6539\u8a18\u61b6\u9ad4\u5167\u5bb9\n        println!(\"Value: {}\", *ptr); // \u8f38\u51fa 100\n    }\n}\n</code></pre>"},{"location":"learning-path/stage5-mastery/interoperability-systems-programming/#no_std","title":"\u5d4c\u5165\u5f0f\u7cfb\u7d71\u8207 no_std \u74b0\u5883","text":"<p>Rust \u652f\u63f4\u7121\u6a19\u6e96\u5eab (<code>no_std</code>) \u74b0\u5883\uff0c\u9069\u7528\u65bc\u5d4c\u5165\u5f0f\u7cfb\u7d71\u8207\u64cd\u4f5c\u7cfb\u7d71\u958b\u767c\uff1a</p> <pre><code>#![no_std]\n\nuse core::panic::PanicInfo;\n\n#[panic_handler]\nfn panic(_info: &amp;PanicInfo) -&gt; ! {\n    loop {}\n}\n\n#[no_mangle]\npub extern \"C\" fn _start() -&gt; ! {\n    loop {}\n}\n</code></pre> <p><code>no_std</code> \u74b0\u5883\u6e1b\u5c11\u4e86\u904b\u884c\u6642\u4f9d\u8cf4\uff0c\u9069\u5408\u8cc7\u6e90\u53d7\u9650\u7684\u786c\u9ad4\u3002</p>"},{"location":"learning-path/stage5-mastery/interoperability-systems-programming/#_5","title":"\u64cd\u4f5c\u7cfb\u7d71\u4ea4\u4e92\u8207\u9032\u7a0b\u63a7\u5236","text":"<p>Rust \u901a\u904e <code>std::os</code> \u6a21\u7d44\u63d0\u4f9b\u64cd\u4f5c\u7cfb\u7d71\u7279\u5b9a\u529f\u80fd\uff0c\u4e5f\u652f\u63f4\u76f4\u63a5\u8abf\u7528\u7cfb\u7d71\u8abf\u7528 (syscalls)\uff1a</p> <pre><code>use std::fs::File;\nuse std::os::unix::io::AsRawFd;\n\nfn main() {\n    let file = File::open(\"example.txt\").unwrap();\n    let fd = file.as_raw_fd();\n    println!(\"File descriptor: {}\", fd);\n}\n</code></pre> <p>\u4f7f\u7528 <code>nix</code> crate \u9032\u884c\u9032\u7a0b\u63a7\u5236\uff1a</p> <pre><code>use nix::unistd::{fork, ForkResult};\n\nfn main() {\n    match unsafe { fork() } {\n        Ok(ForkResult::Parent { child, .. }) =&gt; {\n            println!(\"Parent: Child PID is {}\", child);\n        }\n        Ok(ForkResult::Child) =&gt; {\n            println!(\"Child: I'm alive!\");\n        }\n        Err(e) =&gt; {\n            println!(\"Fork failed: {}\", e);\n        }\n    }\n}\n</code></pre>"},{"location":"learning-path/stage5-mastery/interoperability-systems-programming/#bindgen-cxx","title":"\u5de5\u5177\u652f\u63f4\uff1abindgen \u8207 cxx","text":"<p>Rust \u793e\u7fa4\u63d0\u4f9b\u4e86\u5de5\u5177\u7c21\u5316 FFI \u958b\u767c\uff1a</p> <ul> <li><code>bindgen</code>\uff1a\u81ea\u52d5\u751f\u6210 C \u982d\u6587\u4ef6\u7684 Rust \u7d81\u5b9a\u3002</li> <li><code>cxx</code>\uff1a\u652f\u63f4 Rust \u8207 C++ \u7684\u5b89\u5168\u4ea4\u4e92\u3002</li> </ul>"},{"location":"learning-path/stage5-mastery/interoperability-systems-programming/#_6","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u5f9e\u7c21\u55ae C \u4ea4\u4e92\u958b\u59cb\uff1a\u7df4\u7fd2\u8abf\u7528\u6a19\u6e96 C \u5eab\u51fd\u6578\uff0c\u7406\u89e3 <code>unsafe</code> \u7684\u4f7f\u7528\u8207\u98a8\u96aa\u3002</li> <li>\u63a2\u7d22 no_std \u958b\u767c\uff1a\u5617\u8a66\u70ba\u5d4c\u5165\u5f0f\u8a2d\u5099\u7de8\u5beb\u7c21\u55ae\u7a0b\u5f0f\uff0c\u719f\u6089\u8cc7\u6e90\u53d7\u9650\u74b0\u5883\u3002</li> <li>\u5be6\u73fe\u5e95\u5c64\u529f\u80fd\uff1a\u4f7f\u7528 <code>nix</code> \u6216\u76f4\u63a5\u7cfb\u7d71\u8abf\u7528\uff0c\u5be6\u73fe\u9032\u7a0b\u6216\u7db2\u7d61\u63a7\u5236\u3002</li> <li>\u4f7f\u7528\u793e\u7fa4\u5de5\u5177\uff1a\u5617\u8a66 <code>bindgen</code> \u8207 <code>cxx</code>\uff0c\u7c21\u5316\u8207 C/C++ \u7684\u6574\u5408\u3002</li> <li>\u6ce8\u91cd\u5b89\u5168\u908a\u754c\uff1a\u5728 FFI \u8207\u7cfb\u7d71\u7de8\u7a0b\u4ee3\u78bc\u4e2d\u660e\u78ba\u5b89\u5168\u8207\u4e0d\u5b89\u5168\u908a\u754c\uff0c\u6e1b\u5c11\u6f5b\u5728\u932f\u8aa4\u3002</li> </ul>"},{"location":"learning-path/stage5-mastery/tooling-ecosystem-applications/","title":"\u5de5\u5177\u751f\u614b\u61c9\u7528\uff1aRust \u7684\u5c08\u696d\u958b\u767c\u74b0\u5883","text":"<p>Rust \u7684\u5de5\u5177\u751f\u614b\u662f\u5176\u6210\u529f\u7684\u91cd\u8981\u56e0\u7d20\u4e4b\u4e00\uff0c\u63d0\u4f9b\u4e86\u5f9e\u7de8\u8b6f\u3001\u6e2c\u8a66\u5230\u90e8\u7f72\u7684\u5168\u65b9\u4f4d\u652f\u63f4\uff0c\u5e6b\u52a9\u958b\u767c\u8005\u69cb\u5efa\u9ad8\u6548\u4e14\u53ef\u9760\u7684\u5c08\u6848\u3002</p> <p>\u5c0d\u65bc\u6709\u6df1\u539a Rust \u57fa\u790e\u7684\u5b78\u7fd2\u8005\u4f86\u8aaa\uff0c\u638c\u63e1\u5de5\u5177\u751f\u614b\u7684\u61c9\u7528\u662f\u6210\u70ba\u5c08\u5bb6\u7d1a\u958b\u767c\u8005\u7684\u95dc\u9375\u4e00\u6b65\u3002</p>"},{"location":"learning-path/stage5-mastery/tooling-ecosystem-applications/#_1","title":"\u4ec0\u9ebc\u662f\u5de5\u5177\u751f\u614b\u61c9\u7528\uff1f","text":"<p>Rust \u7684\u5de5\u5177\u751f\u614b\u5305\u62ec\u5b98\u65b9\u5de5\u5177\uff08\u5982 <code>Cargo</code>\u3001<code>rustc</code>\uff09\u3001\u793e\u7fa4 crate \u4ee5\u53ca\u6574\u5408\u958b\u767c\u74b0\u5883\uff0c\u65e8\u5728\u7c21\u5316\u958b\u767c\u6d41\u7a0b\u3001\u63d0\u5347\u4ee3\u78bc\u54c1\u8cea\u8207\u5c08\u6848\u7ba1\u7406\u6548\u7387\u3002</p> <p>\u9019\u4e9b\u5de5\u5177\u8986\u84cb\u4e86\u5f9e\u4ee3\u78bc\u7de8\u5beb\u3001\u6e2c\u8a66\u5230\u6027\u80fd\u512a\u5316\u7684\u5404\u500b\u74b0\u7bc0\u3002</p> <p>Rust \u5de5\u5177\u751f\u614b\u7684\u6838\u5fc3\u7406\u5ff5\u662f\uff1a\u901a\u904e\u81ea\u52d5\u5316\u8207\u6574\u5408\u5de5\u5177\uff0c\u63d0\u5347\u958b\u767c\u6548\u7387\uff0c\u78ba\u4fdd\u4ee3\u78bc\u54c1\u8cea\u8207\u5c08\u6848\u53ef\u6301\u7e8c\u6027\u3002</p>"},{"location":"learning-path/stage5-mastery/tooling-ecosystem-applications/#_2","title":"\u70ba\u4ec0\u9ebc\u9700\u8981\u5de5\u5177\u751f\u614b\u61c9\u7528\uff1f","text":"<p>\u5728\u5927\u578b\u5c08\u6848\u8207\u5c08\u696d\u958b\u767c\u4e2d\uff0c\u7f3a\u4e4f\u5de5\u5177\u652f\u63f4\u53ef\u80fd\u5c0e\u81f4\u554f\u984c\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u6d41\u7a0b\u4f4e\u6548\uff1a\u624b\u52d5\u7ba1\u7406\u4f9d\u8cf4\u3001\u5efa\u7f6e\u8207\u6e2c\u8a66\uff0c\u6d6a\u8cbb\u6642\u9593\u3002</li> <li>\u54c1\u8cea\u96e3\u4fdd\u8b49\uff1a\u7f3a\u4e4f\u975c\u614b\u5206\u6790\u8207\u6e2c\u8a66\u5de5\u5177\uff0c\u6613\u5f15\u5165\u932f\u8aa4\u3002</li> <li>\u5718\u968a\u5354\u4f5c\u56f0\u96e3\uff1a\u7f3a\u4e4f\u6a19\u6e96\u5316\u5de5\u5177\u6642\uff0c\u5718\u968a\u6210\u54e1\u96e3\u4ee5\u7d71\u4e00\u6d41\u7a0b\u3002</li> </ul> <p>Rust \u7684\u5de5\u5177\u751f\u614b\u63d0\u4f9b\u4e86\u5168\u9762\u89e3\u6c7a\u65b9\u6848\uff0c\u7279\u5225\u9069\u7528\u65bc\u5c08\u696d\u5718\u968a\u8207\u8907\u96dc\u5c08\u6848\u3002</p>"},{"location":"learning-path/stage5-mastery/tooling-ecosystem-applications/#_3","title":"\u5de5\u5177\u751f\u614b\u7684\u6838\u5fc3\u5de5\u5177\u8207\u61c9\u7528","text":""},{"location":"learning-path/stage5-mastery/tooling-ecosystem-applications/#cargo","title":"Cargo\uff1a\u5c08\u6848\u7ba1\u7406\u8207\u5efa\u7f6e","text":"<p><code>Cargo</code> \u662f Rust \u7684\u5b98\u65b9\u5efa\u7f6e\u5de5\u5177\u8207\u5305\u7ba1\u7406\u5668\uff0c\u652f\u63f4\u4f9d\u8cf4\u7ba1\u7406\u3001\u5efa\u7f6e\u8a2d\u5b9a\u8207\u6e2c\u8a66\u57f7\u884c\uff1a</p> <pre><code># \u65b0\u5efa\u5c08\u6848\ncargo new my_project\n\n# \u5efa\u7f6e\u5c08\u6848\ncargo build\n\n# \u904b\u884c\u6e2c\u8a66\ncargo test\n\n# \u767c\u5e03 crate \u5230 crates.io\ncargo publish\n</code></pre> <p>\u9032\u968e\u7528\u6cd5\u5305\u62ec\u81ea\u5b9a\u7fa9\u5efa\u7f6e\u8173\u672c\u8207\u5de5\u4f5c\u5340 (workspace) \u7ba1\u7406\u591a\u6a21\u7d44\u5c08\u6848\uff1a</p> <pre><code># Cargo.toml \u5de5\u4f5c\u5340\u914d\u7f6e\n[workspace]\nmembers = [\"crate1\", \"crate2\"]\n</code></pre>"},{"location":"learning-path/stage5-mastery/tooling-ecosystem-applications/#rustfmt-clippy","title":"rustfmt \u8207 clippy\uff1a\u4ee3\u78bc\u898f\u7bc4\u8207\u975c\u614b\u5206\u6790","text":"<ul> <li><code>rustfmt</code>\uff1a\u81ea\u52d5\u683c\u5f0f\u5316\u4ee3\u78bc\uff0c\u78ba\u4fdd\u98a8\u683c\u4e00\u81f4\u3002</li> <li><code>clippy</code>\uff1a\u63d0\u4f9b\u975c\u614b\u5206\u6790\uff0c\u6aa2\u6e2c\u6f5b\u5728\u932f\u8aa4\u8207\u4ee3\u78bc\u7570\u5473\u3002</li> </ul> <p>\u5b89\u88dd\u8207\u4f7f\u7528\uff1a</p> <pre><code># \u5b89\u88dd\u5de5\u5177\nrustup component add rustfmt\nrustup component add clippy\n\n# \u683c\u5f0f\u5316\u4ee3\u78bc\ncargo fmt\n\n# \u904b\u884c\u975c\u614b\u5206\u6790\ncargo clippy --all-features -- -D warnings\n</code></pre> <p>\u9019\u4e9b\u5de5\u5177\u5e6b\u52a9\u5718\u968a\u4fdd\u6301\u4ee3\u78bc\u54c1\u8cea\u8207\u4e00\u81f4\u6027\u3002</p>"},{"location":"learning-path/stage5-mastery/tooling-ecosystem-applications/#rust-analyzer-ide","title":"rust-analyzer\uff1a\u667a\u80fd IDE \u652f\u63f4","text":"<p><code>rust-analyzer</code> \u662f Rust \u7684\u8a9e\u8a00\u4f3a\u670d\u5668\uff0c\u70ba IDE \u63d0\u4f9b\u667a\u80fd\u88dc\u5168\u3001\u932f\u8aa4\u6aa2\u67e5\u8207\u91cd\u69cb\u652f\u63f4\uff0c\u7279\u5225\u9069\u5408\u5927\u578b\u5c08\u6848\uff1a</p> <ul> <li>\u5728 VS Code \u4e2d\u5b89\u88dd <code>rust-analyzer</code> \u63d2\u4ef6\u3002</li> <li>\u914d\u7f6e\u5c08\u6848\u7279\u5b9a\u8a2d\u5b9a\uff0c\u63d0\u5347\u5206\u6790\u6e96\u78ba\u6027\u3002</li> </ul>"},{"location":"learning-path/stage5-mastery/tooling-ecosystem-applications/#criterion-flamegraph","title":"\u6027\u80fd\u5206\u6790\u5de5\u5177\uff1acriterion \u8207 flamegraph","text":"<p>\u6027\u80fd\u512a\u5316\u662f\u5c08\u5bb6\u7d1a\u958b\u767c\u7684\u91cd\u8981\u90e8\u5206\uff0cRust \u63d0\u4f9b\u591a\u7a2e\u5de5\u5177\uff1a</p> <ul> <li><code>criterion</code>\uff1a\u57fa\u6e96\u6e2c\u8a66\u5de5\u5177\uff0c\u7528\u65bc\u7cbe\u78ba\u6e2c\u91cf\u4ee3\u78bc\u6027\u80fd\u3002</li> <li><code>flamegraph</code>\uff1a\u751f\u6210\u6027\u80fd\u706b\u7130\u5716\uff0c\u5e6b\u52a9\u5b9a\u4f4d\u74f6\u9838\u3002</li> </ul> <p>\u7c21\u55ae <code>criterion</code> \u793a\u4f8b\uff1a</p> <pre><code>use criterion::{black_box, criterion_group, criterion_main, Criterion};\n\nfn fibonacci(n: u64) -&gt; u64 {\n    if n &lt;= 1 {\n        n\n    } else {\n        fibonacci(n - 1) + fibonacci(n - 2)\n    }\n}\n\nfn criterion_benchmark(c: &amp;mut Criterion) {\n    c.bench_function(\"fib 20\", |b| b.iter(|| fibonacci(black_box(20))));\n}\n\ncriterion_group!(benches, criterion_benchmark);\ncriterion_main!(benches);\n</code></pre> <p>\u9019\u4e9b\u5de5\u5177\u5e6b\u52a9\u60a8\u7cbe\u78ba\u5206\u6790\u8207\u512a\u5316 Rust \u7a0b\u5f0f\u6027\u80fd\u3002</p>"},{"location":"learning-path/stage5-mastery/tooling-ecosystem-applications/#cicd-github-actions-docker","title":"CI/CD \u6574\u5408\uff1aGitHub Actions \u8207 Docker","text":"<p>Rust \u5c08\u6848\u5e38\u8207 CI/CD \u5de5\u5177\u6574\u5408\uff0c\u81ea\u52d5\u5316\u6e2c\u8a66\u8207\u90e8\u7f72\uff1a</p> <ul> <li>\u4f7f\u7528 GitHub Actions \u904b\u884c\u6e2c\u8a66\u8207\u5efa\u7f6e\u3002</li> <li>\u4f7f\u7528 Docker \u5bb9\u5668\u5316 Rust \u61c9\u7528\uff0c\u78ba\u4fdd\u74b0\u5883\u4e00\u81f4\u6027\u3002</li> </ul> <p>\u7c21\u55ae GitHub Actions \u914d\u7f6e (<code>rust-ci.yml</code>)\uff1a</p> <pre><code>name: Rust CI\non: [push, pull_request]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Build\n        run: cargo build --verbose\n      - name: Run tests\n        run: cargo test --verbose\n</code></pre>"},{"location":"learning-path/stage5-mastery/tooling-ecosystem-applications/#_4","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u638c\u63e1 Cargo \u9032\u968e\u529f\u80fd\uff1a\u63a2\u7d22\u5de5\u4f5c\u5340\u8207\u81ea\u5b9a\u7fa9\u5efa\u7f6e\u8173\u672c\uff0c\u7ba1\u7406\u8907\u96dc\u5c08\u6848\u3002</li> <li>\u6574\u5408\u54c1\u8cea\u5de5\u5177\uff1a\u5728\u5c08\u6848\u4e2d\u914d\u7f6e <code>rustfmt</code> \u8207 <code>clippy</code>\uff0c\u5236\u5b9a\u5718\u968a\u4ee3\u78bc\u898f\u7bc4\u3002</li> <li>\u9032\u884c\u6027\u80fd\u512a\u5316\uff1a\u4f7f\u7528 <code>criterion</code> \u8207\u706b\u7130\u5716\u5206\u6790\u5c08\u6848\u74f6\u9838\uff0c\u5be6\u8e10\u512a\u5316\u7b56\u7565\u3002</li> <li>\u8a2d\u7f6e CI/CD \u6d41\u7a0b\uff1a\u70ba\u5c08\u6848\u914d\u7f6e\u81ea\u52d5\u5316\u6e2c\u8a66\u8207\u90e8\u7f72\uff0c\u63d0\u5347\u958b\u767c\u6548\u7387\u3002</li> </ul>"},{"location":"learning-tips-resources/learning_rust_directions/","title":"Rust \u5b78\u7fd2\u65b9\u5411\u8207\u9032\u7a0b","text":"<p>\u5b78\u7fd2 Rust \u662f\u4e00\u500b\u5faa\u5e8f\u6f38\u9032\u7684\u904e\u7a0b\u3002\u4e86\u89e3\u4e0d\u540c\u968e\u6bb5\u7684\u5b78\u7fd2\u91cd\u9ede\u53ef\u4ee5\u5e6b\u52a9\u60a8\u66f4\u6709\u6548\u5730\u898f\u5283\u5b78\u7fd2\u8def\u5f91\u3002</p>"},{"location":"learning-tips-resources/learning_rust_directions/#_1","title":"\u5b78\u7fd2\u968e\u6bb5\u6982\u89bd","text":""},{"location":"learning-tips-resources/learning_rust_directions/#1","title":"1. \u5165\u9580\u968e\u6bb5\uff1a\u638c\u63e1\u57fa\u790e","text":"<ul> <li>\u6838\u5fc3\u76ee\u6a19\uff1a\u7406\u89e3 Rust \u7684\u57fa\u672c\u8a9e\u6cd5\u3001\u8b8a\u6578\u3001\u8cc7\u6599\u985e\u578b\u3001\u63a7\u5236\u6d41\u7a0b\u3002</li> <li>\u95dc\u9375\u6982\u5ff5\uff1a\u521d\u6b65\u63a5\u89f8\u6240\u6709\u6b0a (Ownership)\u3001\u501f\u7528 (Borrowing) \u8207\u5207\u7247 (Slices)\u3002</li> <li>\u5be6\u8e10\uff1a\u7de8\u5beb\u7c21\u55ae\u7684\u547d\u4ee4\u5217\u7a0b\u5f0f\uff0c\u4f8b\u5982\u731c\u6578\u5b57\u904a\u6232\u3001\u7c21\u55ae\u8a08\u7b97\u6a5f\u3002</li> <li>\u8cc7\u6e90\uff1a\u300aThe Rust Programming Language\u300b (The Book) \u7684\u524d\u5e7e\u7ae0\u3002</li> </ul>"},{"location":"learning-tips-resources/learning_rust_directions/#2","title":"2. \u57fa\u790e\u9032\u968e\uff1a\u978f\u56fa\u6838\u5fc3\u6a5f\u5236","text":"<ul> <li>\u6838\u5fc3\u76ee\u6a19\uff1a\u6df1\u5165\u7406\u89e3\u6240\u6709\u6b0a\u3001\u501f\u7528\u3001\u751f\u547d\u9031\u671f (Lifetimes)\u3002\u5b78\u7fd2\u7d50\u69cb (Structs)\u3001\u679a\u8209 (Enums)\u3001\u6a21\u5f0f\u5339\u914d (Pattern Matching)\u3002</li> <li>\u95dc\u9375\u6982\u5ff5\uff1a\u932f\u8aa4\u8655\u7406 (Error Handling)\u6a5f\u5236 (<code>Result</code>, <code>panic!</code>)\uff0c\u6a21\u7d44\u7cfb\u7d71 (Modules)\u3002</li> <li>\u5be6\u8e10\uff1a\u7de8\u5beb\u66f4\u8907\u96dc\u7684\u7a0b\u5f0f\uff0c\u4f8b\u5982\u5be6\u73fe\u7c21\u55ae\u7684\u8cc7\u6599\u7d50\u69cb\u3001\u8655\u7406\u6a94\u6848\u8f38\u5165\u8f38\u51fa\u3002</li> <li>\u8cc7\u6e90\uff1a\u300aThe Book\u300b\u7684\u4e2d\u9593\u7ae0\u7bc0\uff0cRust by Example\u3002</li> </ul>"},{"location":"learning-tips-resources/learning_rust_directions/#3","title":"3. \u4e2d\u7d1a\u968e\u6bb5\uff1a\u63a2\u7d22\u5e38\u7528\u529f\u80fd\u8207\u751f\u614b","text":"<ul> <li>\u6838\u5fc3\u76ee\u6a19\uff1a\u5b78\u7fd2\u6cdb\u578b (Generics)\u3001\u7279\u6027 (Traits)\u3001\u9589\u5305 (Closures)\u3001\u8fed\u4ee3\u5668 (Iterators)\u3002</li> <li>\u95dc\u9375\u6982\u5ff5\uff1a\u667a\u6167\u6307\u91dd (Smart Pointers)\uff0c\u521d\u6b65\u4e86\u89e3\u4e26\u767c (Concurrency) \u6982\u5ff5\u3002</li> <li>\u5be6\u8e10\uff1a\u958b\u59cb\u4f7f\u7528 crates.io \u4e0a\u7684\u5957\u4ef6\uff0c\u69cb\u5efa\u4e2d\u7b49\u898f\u6a21\u7684\u5c08\u6848\uff0c\u4f8b\u5982\u4e00\u500b\u7c21\u55ae\u7684 Web API \u6216\u4e00\u500b\u5c0f\u578b\u5de5\u5177\u5eab\u3002</li> <li>\u8cc7\u6e90\uff1a\u300aThe Book\u300b\u7684\u5f8c\u7e8c\u7ae0\u7bc0\uff0c\u6a19\u6e96\u5eab\u6587\u6a94\u3002</li> </ul>"},{"location":"learning-tips-resources/learning_rust_directions/#4","title":"4. \u9ad8\u7d1a\u968e\u6bb5\uff1a\u6df1\u5165\u5e95\u5c64\u8207\u8907\u96dc\u61c9\u7528","text":"<ul> <li>\u6838\u5fc3\u76ee\u6a19\uff1a\u7cbe\u901a\u7570\u6b65\u7de8\u7a0b (<code>async/await</code>)\uff0c\u4e86\u89e3\u5b8f (Macros) \u8207\u5143\u7de8\u7a0b\u3002</li> <li>\u95dc\u9375\u6982\u5ff5\uff1a\u4e0d\u5b89\u5168 Rust (<code>unsafe</code> Rust)\uff0cFFI (Foreign Function Interface) \u8207 C \u8a9e\u8a00\u7b49\u4e92\u64cd\u4f5c\u3002</li> <li>\u5be6\u8e10\uff1a\u53c3\u8207\u6216\u958b\u767c\u9700\u8981\u9ad8\u6027\u80fd\u3001\u9ad8\u4e26\u767c\u7684\u5c08\u6848\uff0c\u4f8b\u5982\u7db2\u8def\u4f3a\u670d\u5668\u3001\u7cfb\u7d71\u5de5\u5177\u3002</li> <li>\u8cc7\u6e90\uff1aRustonomicon, The Async Book, \u76f8\u95dc crates (Tokio, async-std) \u7684\u6587\u6a94\u3002</li> </ul>"},{"location":"learning-tips-resources/learning_rust_directions/#5","title":"5. \u5c08\u5bb6\u7d1a\u968e\u6bb5\uff1a\u8ca2\u737b\u8207\u7cbe\u901a","text":"<ul> <li>\u6838\u5fc3\u76ee\u6a19\uff1a\u6df1\u5165\u7406\u89e3 Rust \u7de8\u8b6f\u5668\u5167\u90e8\u3001\u8a9e\u8a00\u8a2d\u8a08\u54f2\u5b78\u3002</li> <li>\u95dc\u9375\u6982\u5ff5\uff1a\u53c3\u8207 Rust \u8a9e\u8a00\u6216\u6838\u5fc3\u5de5\u5177\u7684\u958b\u767c\u8207\u8ca2\u737b\uff0c\u8a2d\u8a08\u8907\u96dc\u7cfb\u7d71\u67b6\u69cb\u3002</li> <li>\u5be6\u8e10\uff1a\u9818\u5c0e Rust \u5c08\u6848\uff0c\u70ba\u793e\u7fa4\u8ca2\u737b\u91cd\u8981\u7684\u51fd\u5f0f\u5eab\u6216\u5de5\u5177\uff0c\u9032\u884c\u6027\u80fd\u512a\u5316\u3002</li> <li>\u8cc7\u6e90\uff1aRust \u8a9e\u8a00\u6e90\u78bc\u3001\u7de8\u8b6f\u5668\u6e90\u78bc\u3001\u793e\u7fa4\u6df1\u5ea6\u6280\u8853\u8a0e\u8ad6\u3002</li> </ul> <p>\u9019\u500b\u5b78\u7fd2\u65b9\u5411\u63d0\u4f9b\u4e86\u4e00\u500b\u5927\u81f4\u7684\u6846\u67b6\u3002\u91cd\u8981\u7684\u662f\u4fdd\u6301\u597d\u5947\u5fc3\uff0c\u4e0d\u65b7\u5be6\u8e10\uff0c\u4e26\u7a4d\u6975\u53c3\u8207\u793e\u7fa4\u4ea4\u6d41\u3002</p>"},{"location":"learning-tips-resources/learning_rust_tips/","title":"\u5b78\u7fd2 Rust \u7684\u6280\u5de7","text":"<p>\u638c\u63e1 Rust \u9700\u8981\u6709\u6548\u7684\u65b9\u6cd5\u548c\u7b56\u7565\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u95dc\u9375\u6280\u5de7\uff0c\u52a9\u60a8\u9ad8\u6548\u5b78\u7fd2\uff1a</p>"},{"location":"learning-tips-resources/learning_rust_tips/#1","title":"1. \u5efa\u7acb\u7a69\u56fa\u57fa\u790e","text":"<ul> <li>\u9075\u5faa\u5b78\u7fd2\u8def\u5f91\uff1aRust \u7684\u5b78\u7fd2\u6709\u5176\u968e\u6bb5\u6027\u3002\u5efa\u8b70\u53c3\u8003\u300cRust \u5b78\u7fd2\u65b9\u5411\u8207\u9032\u7a0b\u300d\u4f86\u898f\u5283\u60a8\u7684\u5b78\u7fd2\u6b65\u9a5f\uff0c\u5f9e\u57fa\u790e\u9010\u6b65\u6df1\u5165\u3002</li> <li>\u6df1\u5165\u6838\u5fc3\u6982\u5ff5\uff1a\u91cd\u9ede\u7406\u89e3 Rust \u7684\u6240\u6709\u6b0a\u7cfb\u7d71\u3001\u501f\u7528\u898f\u5247\u8207\u751f\u547d\u9031\u671f\u3002\u53cd\u8986\u95b1\u8b80\u5b98\u65b9\u6587\u6a94\uff0c\u4e26\u900f\u904e\u7de8\u5beb\u5c0f\u4f8b\u5b50\u4f86\u9a57\u8b49\u7406\u89e3\u3002</li> <li>\u5584\u7528\u5de5\u5177\uff1a<ul> <li><code>rust-analyzer</code>\uff1a\u5728 IDE \u4e2d\u7372\u5f97\u5373\u6642\u932f\u8aa4\u63d0\u793a\u3001\u4ee3\u78bc\u88dc\u5168\u8207\u5c0e\u822a\u3002</li> <li><code>cargo</code>\uff1a\u719f\u6089\u5176\u5c08\u6848\u7ba1\u7406\u3001\u5efa\u7f6e\u3001\u6e2c\u8a66\u3001\u4f9d\u8cf4\u7ba1\u7406\u7b49\u547d\u4ee4\u3002</li> <li><code>rustfmt</code> \u8207 <code>clippy</code>\uff1a\u5f9e\u4e00\u958b\u59cb\u5c31\u990a\u6210\u683c\u5f0f\u5316\u4ee3\u78bc\u548c\u6aa2\u67e5\u6f5b\u5728\u554f\u984c\u7684\u7fd2\u6163\u3002</li> </ul> </li> </ul>"},{"location":"learning-tips-resources/learning_rust_tips/#2","title":"2. \u4e3b\u52d5\u5be6\u8e10\u8207\u53c3\u8207","text":"<ul> <li>\u591a\u5beb\u4ee3\u78bc\uff1a\u7406\u8ad6\u7d50\u5408\u5be6\u8e10\u81f3\u95dc\u91cd\u8981\u3002\u5617\u8a66\u5b8c\u6210\u5c0f\u5c08\u6848\uff08\u5982 CLI \u5de5\u5177\u3001\u7c21\u55ae Web \u61c9\u7528\uff09\u3001\u89e3\u6c7a\u7de8\u7a0b\u6311\u6230\uff08\u5982 Exercism\u3001LeetCode\uff09\u3002</li> <li>\u6709\u6548\u63d0\u554f\uff1a\u9047\u5230\u554f\u984c\u6642\uff0c\u6e05\u6670\u63cf\u8ff0\u80cc\u666f\u3001\u60a8\u5df2\u5617\u8a66\u7684\u65b9\u6cd5\u4ee5\u53ca\u5177\u9ad4\u7684\u932f\u8aa4\u8a0a\u606f\u3002\u9019\u6709\u52a9\u65bc\u4ed6\u4eba\u66f4\u5feb\u7406\u89e3\u4e26\u63d0\u4f9b\u5e6b\u52a9\u3002</li> <li>\u53c3\u8207\u793e\u7fa4\uff1a<ul> <li>\u5b78\u7fd2\u4ed6\u4eba\u7d93\u9a57\uff1a\u5728\u8ad6\u58c7\u3001Discord \u7b49\u793e\u7fa4\u4e2d\uff0c\u89c0\u5bdf\u4ed6\u4eba\u5982\u4f55\u89e3\u6c7a\u554f\u984c\uff0c\u5b78\u7fd2\u6700\u4f73\u5be6\u8e10\u3002</li> <li>\u5206\u4eab\u8207\u4e92\u52a9\uff1a\u5617\u8a66\u56de\u7b54\u4ed6\u4eba\u7684\u554f\u984c\uff0c\u9019\u80fd\u978f\u56fa\u81ea\u8eab\u77e5\u8b58\uff0c\u4e5f\u662f\u8ca2\u737b\u793e\u7fa4\u7684\u597d\u65b9\u6cd5\u3002</li> </ul> </li> </ul>"},{"location":"learning-tips-resources/learning_rust_tips/#3","title":"3. \u6301\u7e8c\u9032\u968e","text":"<ul> <li>\u5b9a\u671f\u8907\u7fd2\uff1a\u5b9a\u671f\u56de\u9867\u6240\u5b78\u6982\u5ff5\u8207\u5c08\u6848\u4ee3\u78bc\uff0c\u6574\u7406\u7b46\u8a18\uff0c\u5f62\u6210\u7cfb\u7d71\u5316\u77e5\u8b58\u3002</li> <li>\u95b1\u8b80\u512a\u8cea\u6e90\u78bc\uff1a\u7576\u5177\u5099\u4e00\u5b9a\u57fa\u790e\u5f8c\uff0c\u5617\u8a66\u95b1\u8b80 Rust \u6a19\u6e96\u5eab\u3001\u77e5\u540d crates \u6216 Rust \u7de8\u8b6f\u5668\u672c\u8eab\u7684\u6e90\u78bc\u3002\u9019\u662f\u7406\u89e3\u9ad8\u7d1a\u7528\u6cd5\u548c\u8a2d\u8a08\u6a21\u5f0f\u7684\u7d55\u4f73\u9014\u5f91\u3002</li> </ul> <p>\u9075\u5faa\u9019\u4e9b\u6280\u5de7\uff0c\u4e26\u4fdd\u6301\u8010\u5fc3\u8207\u6301\u7e8c\u7684\u52aa\u529b\uff0c\u60a8\u5c07\u80fd\u9010\u6b65\u7cbe\u901a Rust\u3002</p>"},{"location":"learning-tips-resources/rust_learning_resources/","title":"Rust \u5b78\u7fd2\u8cc7\u6e90","text":"<p>Rust \u64c1\u6709\u8c50\u5bcc\u7684\u5b98\u65b9\u8207\u793e\u7fa4\u8cc7\u6e90\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u6838\u5fc3\u7684\u5b78\u7fd2\u9014\u5f91\uff1a</p>"},{"location":"learning-tips-resources/rust_learning_resources/#1","title":"1. \u5b98\u65b9\u6838\u5fc3\u8cc7\u6e90","text":"<p>\u9019\u4e9b\u8cc7\u6e90\u7531 Rust \u5b98\u65b9\u7dad\u8b77\uff0c\u5177\u6709\u6b0a\u5a01\u6027\u548c\u6e96\u78ba\u6027\uff1a</p> <ul> <li>Rust \u5b98\u65b9\u7db2\u7ad9 (rust-lang.org)\uff1a\u7372\u53d6\u8a9e\u8a00\u4ecb\u7d39\u3001\u5b89\u88dd\u6307\u5357\u3001\u6700\u65b0\u6d88\u606f\u548c\u793e\u7fa4\u5165\u53e3\u3002</li> <li>\u300aThe Rust Programming Language\u300b (The Book)\uff1a\u6700\u6b0a\u5a01\u7684 Rust \u5165\u9580\u66f8\u7c4d\uff0c\u8a73\u7d30\u4ecb\u7d39\u4e86\u5f9e\u57fa\u790e\u5230\u9032\u968e\u7684\u5404\u7a2e\u6982\u5ff5\u3002\u514d\u8cbb\u7dda\u4e0a\u95b1\u8b80\u3002</li> <li>Rust by Example\uff1a\u901a\u904e\u5927\u91cf\u53ef\u904b\u884c\u7684\u4ee3\u78bc\u793a\u4f8b\u4f86\u5b78\u7fd2 Rust \u7684\u5404\u7a2e\u7279\u6027\uff0c\u9069\u5408\u52d5\u624b\u5be6\u8e10\u3002</li> <li>\u6a19\u6e96\u5eab\u6587\u6a94 (Standard Library Documentation)\uff1a\u958b\u767c\u65e5\u5e38\u5fc5\u5099\uff0c\u8a73\u7d30\u5217\u51fa\u6240\u6709\u6a19\u6e96\u5eab API \u53ca\u5176\u7528\u6cd5\u3002\u53ef\u901a\u904e <code>rustup doc --std</code> \u5728\u672c\u5730\u958b\u555f\u3002</li> <li>\u9032\u968e\u5b98\u65b9\u6587\u6a94\uff1a<ul> <li>The Rust Reference\uff1a\u8a9e\u8a00\u7684\u8a73\u7d30\u6280\u8853\u898f\u7bc4\u3002</li> <li>Rustonomicon\uff1a\u6df1\u5165\u63a2\u8a0e <code>unsafe</code> Rust \u548c\u5e95\u5c64\u7de8\u7a0b\u3002</li> <li>Edition Guide\uff1a\u89e3\u91cb\u4e0d\u540c Rust \u7248\u672c (Editions) \u4e4b\u9593\u7684\u5dee\u7570\u8207\u9077\u79fb\u3002</li> </ul> </li> </ul>"},{"location":"learning-tips-resources/rust_learning_resources/#2","title":"2. \u793e\u7fa4\u8207\u751f\u614b\u8cc7\u6e90","text":"<p>Rust \u793e\u7fa4\u6d3b\u8e8d\u4e14\u6a02\u65bc\u52a9\u4eba\uff0c\u63d0\u4f9b\u4e86\u5927\u91cf\u88dc\u5145\u5b78\u7fd2\u6750\u6599\uff1a</p> <ul> <li>\u5b98\u65b9\u793e\u7fa4\u5e73\u53f0\uff1a<ul> <li>Rust \u7528\u6236\u8ad6\u58c7 (users.rust-lang.org)\uff1a\u9069\u5408\u63d0\u554f\u3001\u8a0e\u8ad6\u548c\u5206\u4eab\u3002</li> <li>\u5b98\u65b9 Discord \u4f3a\u670d\u5668\uff1a\u5373\u6642\u4ea4\u6d41\u548c\u7372\u53d6\u5e6b\u52a9\u3002</li> <li>Reddit (r/rust)\uff1a\u65b0\u805e\u3001\u5c08\u6848\u5206\u4eab\u548c\u8a0e\u8ad6\u3002</li> </ul> </li> <li>GitHub \u8207\u958b\u6e90\u5c08\u6848\uff1a<ul> <li><code>rust-lang/rust</code>\uff1aRust \u8a9e\u8a00\u672c\u8eab\u7684\u6e90\u78bc\u5009\u5eab\u3002</li> <li>crates.io \u4e0a\u7684\u5c08\u6848\uff1a\u95b1\u8b80\u512a\u79c0\u7684\u958b\u6e90\u5eab\u4ee3\u78bc\u662f\u6975\u4f73\u7684\u5b78\u7fd2\u65b9\u5f0f\u3002\u5c0b\u627e\u6a19\u6709 \"good first issue\" \u7684\u554f\u984c\u53c3\u8207\u8ca2\u737b\u3002</li> </ul> </li> <li>\u793e\u7fa4\u5206\u4eab\u7684\u5b78\u7fd2\u6750\u6599\uff1a<ul> <li>\u90e8\u843d\u683c\u6587\u7ae0\uff1a\u8a31\u591a\u7d93\u9a57\u8c50\u5bcc\u7684 Rust \u958b\u767c\u8005\u6703\u5206\u4eab\u4ed6\u5011\u7684\u5b78\u7fd2\u5fc3\u5f97\u548c\u6280\u8853\u898b\u89e3\u3002</li> <li>\u6559\u5b78\u5f71\u7247\u8207\u983b\u9053\uff1aYouTube \u7b49\u5e73\u53f0\u4e0a\u6709\u4e0d\u5c11\u512a\u8cea\u7684 Rust \u6559\u5b78\u5167\u5bb9\u3002</li> <li>Podcast\uff1a\u5982 \"New Rustacean\" \u7b49\uff0c\u63d0\u4f9b\u97f3\u983b\u5b78\u7fd2\u8cc7\u6e90\u3002</li> </ul> </li> <li>Rust \u8a9e\u8a00\u8207\u5de5\u5177\u6e90\u78bc\uff1a\u5c0d\u65bc\u5e0c\u671b\u6df1\u5165\u7406\u89e3 Rust \u7684\u5b78\u7fd2\u8005\uff0cRust \u53ca\u5176\u6838\u5fc3\u5de5\u5177\uff08\u5982 Cargo\uff09\u7684\u6e90\u78bc\u672c\u8eab\u5c31\u662f\u6700\u6839\u672c\u7684\u5b78\u7fd2\u8cc7\u6e90\u3002</li> </ul>"},{"location":"learning-tips-resources/rust_learning_resources/#3","title":"3. \u7cbe\u9078\u7dda\u4e0a\u8ab2\u7a0b\u8207\u4e92\u52d5\u7df4\u7fd2","text":"<ul> <li>Rustlings (https://github.com/rust-lang/rustlings) \u2013 \u900f\u904e\u5c0f\u578b\u7fd2\u984c\u8207\u81ea\u52d5\u6e2c\u8a66\u7df4\u7fd2 Rust \u57fa\u790e\u8a9e\u6cd5\u8207\u6982\u5ff5\u3002</li> <li>Comprehensive Rust (https://google.github.io/comprehensive-rust/) \u2013 Google \u63a8\u51fa\u7684\u514d\u8cbb\u5b8c\u6574\u8ab2\u7a0b\uff0c\u6db5\u84cb\u57fa\u790e\u81f3\u9032\u968e\u4e3b\u984c\uff0c\u63d0\u4f9b\u7e41\u9ad4\u4e2d\u6587\u7ffb\u8b6f\u3002</li> <li>Exercism Rust Track (https://exercism.org/tracks/rust) \u2013 \u7dda\u4e0a\u7df4\u7fd2\u5e73\u53f0\uff0c\u63d0\u4f9b\u984c\u5eab\u8207\u5c0e\u5e2b\u53cd\u994b\u3002</li> <li>Tour of Rust (https://tourofrust.com) \u2013 \u7c21\u6f54\u4e92\u52d5\u5f0f\u5165\u9580\u6559\u7a0b\u3002</li> <li>Rust Crash Course (YouTube, freeCodeCamp) \u2013 \u901f\u6210\u8996\u983b\u6559\u7a0b\uff0c\u9069\u5408\u5feb\u901f\u4e0a\u624b\u3002</li> </ul>"},{"location":"learning-tips-resources/rust_learning_resources/#4","title":"4. \u512a\u8cea\u5f71\u7247\u8207\u983b\u9053","text":"<ul> <li>Crust of Rust \u2013 Jon Gjengset (YouTube) \u2013 \u6df1\u5165\u8b1b\u89e3 Rust \u9032\u968e\u4e3b\u984c\u8207\u5167\u90e8\u6a5f\u5236\u3002</li> <li>Let's Get Rusty (YouTube) \u2013 \u8986\u84cb\u5165\u9580\u5230\u9032\u968e\u7684\u6559\u5b78\u8207\u65b0\u805e\u3002</li> <li>Ryan Levick \u2013 Live Coding (YouTube/Twitch) \u2013 \u5be6\u6230\u7bc4\u4f8b\u8207\u751f\u614b\u89e3\u8aaa\u3002</li> </ul>"},{"location":"learning-tips-resources/rust_learning_resources/#5","title":"5. \u53c3\u8003\u984c\u5eab\u8207\u6311\u6230","text":"<ul> <li>Advent of Code (https://adventofcode.com) \u2013 \u6bcf\u5e74 12 \u6708\u7684\u7de8\u7a0b\u6311\u6230\uff0c\u53ef\u4f7f\u7528 Rust \u4f5c\u7b54\u4e26\u95b1\u8b80\u4ed6\u4eba\u89e3\u7b54\u3002</li> <li>LeetCode \u2013 Rust \u652f\u63f4 (https://leetcode.com) \u2013 \u6f14\u7b97\u6cd5\u984c\u5eab\uff0c\u7df4\u7fd2\u8cc7\u6599\u7d50\u69cb\u8207\u6f14\u7b97\u6cd5\u3002</li> </ul> <p>\u5584\u7528\u9019\u4e9b\u8cc7\u6e90\uff0c\u4e26\u7d50\u5408\u5be6\u969b\u7df4\u7fd2\uff0c\u60a8\u7684 Rust \u5b78\u7fd2\u4e4b\u65c5\u5c07\u66f4\u52a0\u9806\u5229\u3002</p>"},{"location":"rust-cheat-sheet/advanced-features/","title":"Rust Cheat Sheet\uff1a\u9032\u968e\u7279\u6027\u901f\u67e5","text":"<p>\u672c\u901f\u67e5\u8868\u6db5\u84cb Rust \u7684\u9032\u968e\u7279\u6027\uff0c\u9069\u5408\u5feb\u901f\u53c3\u8003\u6cdb\u578b\u3001\u7279\u5fb5\u3001\u751f\u547d\u9031\u671f\u3001\u5b8f\u8207\u4e0d\u5b89\u5168\u4ee3\u78bc\u7b49\u6982\u5ff5\u3002</p> <p>Rust \u63d0\u4f9b\u4e86\u5f37\u5927\u7684\u5de5\u5177\u8207\u6a5f\u5236\uff0c\u652f\u63f4\u8907\u96dc\u7cfb\u7d71\u7684\u8a2d\u8a08\u8207\u9ad8\u6548\u5be6\u73fe\u3002</p>"},{"location":"rust-cheat-sheet/advanced-features/#generics","title":"\u6cdb\u578b (Generics)","text":"<ul> <li>\u6cdb\u578b\u51fd\u6578\uff1a\u5141\u8a31\u51fd\u6578\u8655\u7406\u591a\u7a2e\u985e\u578b\uff0c\u9700\u6307\u5b9a\u985e\u578b\u53c3\u6578\u3002   <pre><code>fn max&lt;T: PartialOrd&gt;(a: T, b: T) -&gt; T {\n    if a &gt; b { a } else { b }\n}\nlet int_max = max(5, 10); // \u8f38\u51fa: 10\nlet float_max = max(3.14, 2.71); // \u8f38\u51fa: 3.14\nprintln!(\"\u6574\u6578\u6700\u5927\u503c: {}, \u6d6e\u9ede\u6578\u6700\u5927\u503c: {}\", int_max, float_max);\n</code></pre></li> <li>\u6cdb\u578b\u7d50\u69cb\u9ad4\uff1a\u7d50\u69cb\u9ad4\u5b57\u6bb5\u4f7f\u7528\u6cdb\u578b\u985e\u578b\u3002   <pre><code>struct Pair&lt;T&gt; {\n    first: T,\n    second: T,\n}\nlet pair = Pair { first: 1, second: 2 };\nprintln!(\"Pair: {}, {}\", pair.first, pair.second);\n</code></pre></li> <li>\u6cdb\u578b\u7d04\u675f\uff1a\u4f7f\u7528\u7279\u5fb5\u9650\u5236\u6cdb\u578b\u985e\u578b\u3002   <pre><code>fn print_debug&lt;T: std::fmt::Debug&gt;(item: T) {\n    println!(\"{:?}\", item);\n}\nprint_debug(42); // \u8f38\u51fa: 42\n</code></pre></li> </ul>"},{"location":"rust-cheat-sheet/advanced-features/#traits","title":"\u7279\u5fb5 (Traits)","text":"<ul> <li>\u5b9a\u7fa9\u7279\u5fb5\uff1a\u985e\u4f3c\u63a5\u53e3\uff0c\u5b9a\u7fa9\u884c\u70ba\u898f\u7bc4\u3002   <pre><code>trait Printable {\n    fn print(&amp;self);\n}\nstruct MyStruct(i32);\nimpl Printable for MyStruct {\n    fn print(&amp;self) {\n        println!(\"\u503c: {}\", self.0);\n    }\n}\nlet item = MyStruct(100);\nitem.print(); // \u8f38\u51fa: \u503c: 100\n</code></pre></li> <li>\u7279\u5fb5\u4f5c\u70ba\u53c3\u6578\uff1a\u9650\u5236\u51fd\u6578\u53c3\u6578\u985e\u578b\u3002   <pre><code>fn display&lt;T: Printable&gt;(item: &amp;T) {\n    item.print();\n}\ndisplay(&amp;MyStruct(200)); // \u8f38\u51fa: \u503c: 200\n</code></pre></li> <li>\u7279\u5fb5\u7269\u4ef6\uff1a\u52d5\u614b\u5206\u767c\uff0c\u4f7f\u7528 <code>dyn</code> \u95dc\u9375\u5b57\u3002   <pre><code>let item: Box&lt;dyn Printable&gt; = Box::new(MyStruct(300));\nitem.print(); // \u8f38\u51fa: \u503c: 300\n</code></pre></li> </ul>"},{"location":"rust-cheat-sheet/advanced-features/#lifetimes","title":"\u751f\u547d\u9031\u671f (Lifetimes)","text":"<ul> <li>\u751f\u547d\u9031\u671f\u6a19\u8a18\uff1a\u78ba\u4fdd\u5f15\u7528\u6709\u6548\uff0c\u4f7f\u7528 <code>'a</code> \u4e4b\u985e\u7684\u6a19\u8a18\u3002   <pre><code>fn longest&lt;'a&gt;(s1: &amp;'a str, s2: &amp;'a str) -&gt; &amp;'a str {\n    if s1.len() &gt; s2.len() { s1 } else { s2 }\n}\nlet str1 = String::from(\"short\");\nlet str2 = String::from(\"longer string\");\nlet result = longest(&amp;str1, &amp;str2);\nprintln!(\"\u6700\u9577\u5b57\u4e32: {}\", result); // \u8f38\u51fa: longer string\n</code></pre></li> <li>\u7d50\u69cb\u9ad4\u4e2d\u7684\u751f\u547d\u9031\u671f\uff1a\u5f15\u7528\u5b57\u6bb5\u9700\u6a19\u8a18\u751f\u547d\u9031\u671f\u3002   <pre><code>struct Holder&lt;'a&gt; {\n    data: &amp;'a str,\n}\nlet text = String::from(\"Hello\");\nlet holder = Holder { data: &amp;text };\nprintln!(\"\u6301\u6709\u6578\u64da: {}\", holder.data);\n</code></pre></li> </ul>"},{"location":"rust-cheat-sheet/advanced-features/#macros","title":"\u5b8f (Macros)","text":"<ul> <li>\u8072\u660e\u5f0f\u5b8f\uff1a\u4f7f\u7528 <code>macro_rules!</code> \u5b9a\u7fa9\u7c21\u55ae\u5b8f\u3002   <pre><code>macro_rules! say_hello {\n    () =&gt; {\n        println!(\"Hello, Macro!\");\n    };\n}\nsay_hello!(); // \u8f38\u51fa: Hello, Macro!\n</code></pre></li> <li>\u5e36\u53c3\u6578\u7684\u5b8f\uff1a\u652f\u63f4\u53c3\u6578\u5316\u4ee3\u78bc\u751f\u6210\u3002   <pre><code>macro_rules! repeat {\n    ($msg:expr, $times:expr) =&gt; {\n        for _ in 0..$times {\n            println!(\"{}\", $msg);\n        }\n    };\n}\nrepeat!(\"\u91cd\u8907\", 3); // \u8f38\u51fa: \u91cd\u8907 (3 \u6b21)\n</code></pre></li> <li>\u904e\u7a0b\u5f0f\u5b8f\uff1a\u66f4\u5f37\u5927\u7684\u5b8f\uff0c\u9700\u5916\u90e8 crate\uff0c\u5982 <code>proc-macro2</code>\u3002</li> <li>\u53c3\u8003 <code>derive</code> \u5b8f\uff0c\u5982 <code>#[derive(Debug)]</code>\u3002</li> </ul>"},{"location":"rust-cheat-sheet/advanced-features/#unsafe","title":"\u4e0d\u5b89\u5168\u4ee3\u78bc (Unsafe)","text":"<ul> <li>unsafe \u584a\uff1a\u5141\u8a31\u7e5e\u904e Rust \u5b89\u5168\u6aa2\u67e5\uff0c\u9700\u8b39\u614e\u4f7f\u7528\u3002   <pre><code>let mut num = 5;\nlet ptr = &amp;mut num as *mut i32;\nunsafe {\n    *ptr = 10; // \u76f4\u63a5\u4fee\u6539\u8a18\u61b6\u9ad4\n}\nprintln!(\"\u4fee\u6539\u5f8c: {}\", num); // \u8f38\u51fa: 10\n</code></pre></li> <li>\u5e38\u898b\u7528\u9014\uff1a\u8abf\u7528 C \u51fd\u6578\u3001\u64cd\u4f5c\u88f8\u6307\u91dd\u3002   <pre><code>extern \"C\" {\n    fn abs(input: i32) -&gt; i32;\n}\nlet result = unsafe { abs(-5) };\nprintln!(\"\u7d55\u5c0d\u503c: {}\", result); // \u8f38\u51fa: 5\n</code></pre></li> <li>\u6ce8\u610f\u4e8b\u9805\uff1a\u4e0d\u5b89\u5168\u4ee3\u78bc\u9700\u660e\u78ba\u6a19\u8a18\uff0c\u907f\u514d\u8a18\u61b6\u9ad4\u6d29\u6f0f\u6216\u672a\u5b9a\u7fa9\u884c\u70ba\u3002</li> </ul>"},{"location":"rust-cheat-sheet/advanced-features/#advanced-concurrency","title":"\u4e26\u767c\u9032\u968e (Advanced Concurrency)","text":"<ul> <li>Send \u548c Sync \u7279\u5fb5\uff1a\u78ba\u4fdd\u4e26\u767c\u5b89\u5168\u3002<ul> <li><code>Send</code>\uff1a\u985e\u578b\u53ef\u5b89\u5168\u8de8\u57f7\u884c\u7dd2\u79fb\u52d5\u3002</li> <li><code>Sync</code>\uff1a\u985e\u578b\u53ef\u5b89\u5168\u8de8\u57f7\u884c\u7dd2\u5171\u4eab\u3002 <pre><code>use std::sync::Arc;\nlet data = Arc::new(42); // Arc \u5be6\u73fe Send \u548c Sync\nlet clone = Arc::clone(&amp;data);\nstd::thread::spawn(move || {\n    println!(\"\u5728\u65b0\u57f7\u884c\u7dd2\u4e2d: {}\", clone);\n});\n</code></pre></li> </ul> </li> <li>RwLock\uff1a\u652f\u63f4\u591a\u8b80\u55ae\u5beb\u7684\u9396\u3002   <pre><code>use std::sync::RwLock;\nlet lock = RwLock::new(5);\nlet read_guard = lock.read().unwrap();\nprintln!(\"\u8b80\u53d6\u503c: {}\", *read_guard); // \u8f38\u51fa: 5\ndrop(read_guard);\nlet mut write_guard = lock.write().unwrap();\n*write_guard = 10;\nprintln!(\"\u4fee\u6539\u5f8c: {}\", *write_guard); // \u8f38\u51fa: 10\n</code></pre></li> </ul>"},{"location":"rust-cheat-sheet/basic-syntax/","title":"Rust Cheat Sheet\uff1a\u57fa\u672c\u8a9e\u6cd5\u901f\u67e5","text":"<p>\u672c\u901f\u67e5\u8868\u6db5\u84cb Rust \u7684\u57fa\u672c\u8a9e\u6cd5\uff0c\u9069\u5408\u5feb\u901f\u53c3\u8003\u8b8a\u6578\u5ba3\u544a\u3001\u63a7\u5236\u6d41\u3001\u51fd\u6578\u5b9a\u7fa9\u7b49\u6838\u5fc3\u6982\u5ff5\u3002</p> <p>Rust \u662f\u4e00\u9580\u6ce8\u91cd\u5b89\u5168\u8207\u6548\u80fd\u7684\u7cfb\u7d71\u7a0b\u5f0f\u8a9e\u8a00\uff0c\u5176\u8a9e\u6cd5\u8a2d\u8a08\u7c21\u6f54\u4e14\u56b4\u8b39\u3002</p>"},{"location":"rust-cheat-sheet/basic-syntax/#_1","title":"\u8b8a\u6578\u8207\u8cc7\u6599\u985e\u578b","text":"<ul> <li>\u8b8a\u6578\u5ba3\u544a\uff1a\u4f7f\u7528 <code>let</code> \u5ba3\u544a\u8b8a\u6578\uff0c\u9810\u8a2d\u4e0d\u53ef\u8b8a\uff1b\u4f7f\u7528 <code>mut</code> \u5141\u8a31\u53ef\u8b8a\u3002   <pre><code>let x = 5; // \u4e0d\u53ef\u8b8a\u8b8a\u6578\nlet mut y = 10; // \u53ef\u8b8a\u8b8a\u6578\ny = 15; // \u6b63\u78ba\n// x = 20; // \u932f\u8aa4\uff1a\u4e0d\u53ef\u8b8a\u8b8a\u6578\u7121\u6cd5\u91cd\u65b0\u8ce6\u503c\n</code></pre></li> <li>\u8cc7\u6599\u985e\u578b\uff1aRust \u662f\u975c\u614b\u985e\u578b\u8a9e\u8a00\uff0c\u652f\u63f4\u985e\u578b\u63a8\u65b7\u3002   <pre><code>let integer: i32 = 42; // \u6574\u6578\nlet float: f64 = 3.14; // \u6d6e\u9ede\u6578\nlet boolean: bool = true; // \u5e03\u6797\u503c\nlet character: char = 'A'; // \u5b57\u5143 (UTF-8)\nlet string_slice: &amp;str = \"Hello\"; // \u5b57\u4e32\u5207\u7247\nlet string: String = String::from(\"World\"); // \u64c1\u6709\u6240\u6709\u6b0a\u7684\u5b57\u4e32\n</code></pre></li> <li>\u5e38\u91cf\uff1a\u4f7f\u7528 <code>const</code> \u5ba3\u544a\uff0c\u5fc5\u9808\u660e\u78ba\u985e\u578b\u4e14\u503c\u5728\u7de8\u8b6f\u6642\u78ba\u5b9a\u3002   <pre><code>const MAX_VALUE: i32 = 100;\n</code></pre></li> </ul>"},{"location":"rust-cheat-sheet/basic-syntax/#_2","title":"\u63a7\u5236\u6d41","text":"<ul> <li>\u689d\u4ef6\u8a9e\u53e5\uff1a\u4f7f\u7528 <code>if</code>\u3001<code>else if</code> \u548c <code>else</code>\u3002   <pre><code>let number = 7;\nif number &lt; 5 {\n    println!(\"\u5c0f\u65bc 5\");\n} else if number == 5 {\n    println!(\"\u7b49\u65bc 5\");\n} else {\n    println!(\"\u5927\u65bc 5\");\n}\n</code></pre></li> <li>\u689d\u4ef6\u8868\u9054\u5f0f\uff1a<code>if</code> \u53ef\u4ee5\u4f5c\u70ba\u8868\u9054\u5f0f\u8fd4\u56de\u7d50\u679c\u3002   <pre><code>let result = if number &gt; 0 { \"\u6b63\u6578\" } else { \"\u975e\u6b63\u6578\" };\nprintln!(\"\u7d50\u679c: {}\", result);\n</code></pre></li> <li>\u5faa\u74b0\uff1a\u652f\u63f4 <code>loop</code>\uff08\u7121\u9650\u5faa\u74b0\uff09\u3001<code>while</code> \u548c <code>for</code>\u3002   <pre><code>// \u7121\u9650\u5faa\u74b0\uff0c\u76f4\u5230 break\nlet mut counter = 0;\nloop {\n    counter += 1;\n    if counter == 3 { break; }\n    println!(\"\u8a08\u6578: {}\", counter);\n}\n// while \u5faa\u74b0\nwhile counter &lt; 5 {\n    counter += 1;\n    println!(\"while \u8a08\u6578: {}\", counter);\n}\n// for \u5faa\u74b0 (\u7bc4\u570d)\nfor i in 1..4 { // 1 \u5230 3\n    println!(\"for \u8a08\u6578: {}\", i);\n}\n</code></pre></li> </ul>"},{"location":"rust-cheat-sheet/basic-syntax/#_3","title":"\u51fd\u6578","text":"<ul> <li>\u51fd\u6578\u5b9a\u7fa9\uff1a\u4f7f\u7528 <code>fn</code> \u95dc\u9375\u5b57\uff0c\u53c3\u6578\u9700\u660e\u78ba\u985e\u578b\uff0c\u8fd4\u56de\u503c\u53ef\u9078\u3002   <pre><code>fn add(a: i32, b: i32) -&gt; i32 {\n    a + b // \u7121\u5206\u865f\u8868\u793a\u8fd4\u56de\u503c\n}\nfn main() {\n    let sum = add(3, 5);\n    println!(\"\u7e3d\u548c: {}\", sum); // \u8f38\u51fa: 8\n}\n</code></pre></li> <li>\u7121\u8fd4\u56de\u503c\uff1a\u7701\u7565 <code>-&gt;</code> \u90e8\u5206\uff0c\u9810\u8a2d\u8fd4\u56de <code>()</code>\u3002   <pre><code>fn print_hello() {\n    println!(\"Hello, Rust!\");\n}\n</code></pre></li> </ul>"},{"location":"rust-cheat-sheet/basic-syntax/#_4","title":"\u9663\u5217\u8207\u5207\u7247","text":"<ul> <li>\u9663\u5217\uff1a\u56fa\u5b9a\u5927\u5c0f\uff0c\u985e\u578b\u8207\u9577\u5ea6\u5728\u7de8\u8b6f\u6642\u78ba\u5b9a\u3002   <pre><code>let arr: [i32; 3] = [1, 2, 3];\nprintln!(\"\u7b2c\u4e00\u500b\u5143\u7d20: {}\", arr[0]);\n</code></pre></li> <li>\u5207\u7247\uff1a\u9663\u5217\u6216 <code>Vec</code> \u7684\u5f15\u7528\uff0c\u9577\u5ea6\u52d5\u614b\u3002   <pre><code>let slice: &amp;[i32] = &amp;arr[1..3]; // \u5305\u542b\u7d22\u5f15 1 \u548c 2\nprintln!(\"\u5207\u7247: {:?}\", slice); // \u8f38\u51fa: [2, 3]\n</code></pre></li> </ul>"},{"location":"rust-cheat-sheet/basic-syntax/#vec","title":"\u5411\u91cf (Vec)","text":"<ul> <li>\u5411\u91cf\uff1a\u52d5\u614b\u9663\u5217\uff0c\u652f\u63f4\u589e\u9577\u8207\u7e2e\u6e1b\u3002   <pre><code>let mut vec: Vec&lt;i32&gt; = Vec::new();\nvec.push(1);\nvec.push(2);\nprintln!(\"\u5411\u91cf: {:?}\", vec); // \u8f38\u51fa: [1, 2]\nlet first = vec.get(0); // \u5b89\u5168\u8a2a\u554f\nprintln!(\"\u7b2c\u4e00\u500b\u5143\u7d20: {:?}\", first); // \u8f38\u51fa: Some(1)\nvec.pop(); // \u79fb\u9664\u6700\u5f8c\u5143\u7d20\nprintln!(\"\u79fb\u9664\u5f8c: {:?}\", vec); // \u8f38\u51fa: [1]\n</code></pre></li> </ul>"},{"location":"rust-cheat-sheet/basic-syntax/#_5","title":"\u6240\u6709\u6b0a\u8207\u501f\u7528\u7c21\u4ecb","text":"<ul> <li>\u6240\u6709\u6b0a\uff1a\u6bcf\u500b\u503c\u53ea\u6709\u4e00\u500b\u64c1\u6709\u8005\uff0c\u79fb\u52d5\u5f8c\u539f\u8b8a\u6578\u4e0d\u53ef\u7528\u3002   <pre><code>let s1 = String::from(\"Hello\");\nlet s2 = s1; // \u6240\u6709\u6b0a\u79fb\u52d5\n// println!(\"s1: {}\", s1); // \u932f\u8aa4\uff1as1 \u5df2\u79fb\u52d5\nprintln!(\"s2: {}\", s2);\n</code></pre></li> <li>\u501f\u7528\uff1a\u4f7f\u7528 <code>&amp;</code> \u501f\u7528\u4e0d\u53ef\u8b8a\u5f15\u7528\uff0c<code>&amp;mut</code> \u501f\u7528\u53ef\u8b8a\u5f15\u7528\u3002   <pre><code>let mut s = String::from(\"Hello\");\nlet r1 = &amp;s; // \u4e0d\u53ef\u8b8a\u501f\u7528\nlet r2 = &amp;mut s; // \u53ef\u8b8a\u501f\u7528\n// println!(\"r1: {}\", r1); // \u932f\u8aa4\uff1a\u4e0d\u53ef\u8b8a\u501f\u7528\u8207\u53ef\u8b8a\u501f\u7528\u885d\u7a81\nr2.push_str(\", World\");\nprintln!(\"r2: {}\", r2);\n</code></pre></li> </ul>"},{"location":"rust-cheat-sheet/error-handling-patterns/","title":"Rust Cheat Sheet\uff1a\u932f\u8aa4\u8655\u7406\u8207\u6a21\u5f0f\u5339\u914d","text":"<p>\u672c\u901f\u67e5\u8868\u6db5\u84cb Rust \u4e2d\u7684\u932f\u8aa4\u8655\u7406\u8207\u6a21\u5f0f\u5339\u914d\u6a5f\u5236\uff0c\u9069\u5408\u5feb\u901f\u53c3\u8003\u5982\u4f55\u4f7f\u7528 <code>Result</code>\u3001<code>Option</code> \u8207 <code>match</code>\u3001<code>if let</code> \u7b49\u5de5\u5177\u8655\u7406\u932f\u8aa4\u8207\u7d50\u69cb\u5316\u6578\u64da\u3002</p> <p>Rust \u7684\u8a2d\u8a08\u5f37\u8abf\u986f\u5f0f\u932f\u8aa4\u8655\u7406\uff0c\u78ba\u4fdd\u7a0b\u5f0f\u5065\u58ef\u6027\u8207\u53ef\u9760\u6027\u3002</p>"},{"location":"rust-cheat-sheet/error-handling-patterns/#_1","title":"\u932f\u8aa4\u8655\u7406","text":"<ul> <li>Option\uff1a\u7528\u65bc\u8655\u7406\u53ef\u80fd\u70ba\u7a7a\u7684\u503c\uff0c\u5305\u542b <code>Some(T)</code> \u6216 <code>None</code>\u3002   <pre><code>let value: Option&lt;i32&gt; = Some(42);\nif let Some(num) = value {\n    println!(\"\u503c\u70ba: {}\", num); // \u8f38\u51fa: 42\n} else {\n    println!(\"\u503c\u70ba None\");\n}\n// \u4f7f\u7528 unwrap_or \u63d0\u4f9b\u9810\u8a2d\u503c\nlet fallback = value.unwrap_or(0);\nprintln!(\"\u503c\u6216\u9810\u8a2d: {}\", fallback); // \u8f38\u51fa: 42\n</code></pre> <li>Result\uff1a\u7528\u65bc\u8655\u7406\u53ef\u80fd\u5931\u6557\u7684\u64cd\u4f5c\uff0c\u5305\u542b <code>Ok(T)</code> \u6216 <code>Err(E)</code>\u3002   <pre><code>fn divide(a: i32, b: i32) -&gt; Result&lt;i32, &amp;'static str&gt; {\n    if b == 0 {\n        Err(\"\u9664\u4ee5\u96f6\u932f\u8aa4\")\n    } else {\n        Ok(a / b)\n    }\n}\nmatch divide(10, 2) {\n    Ok(result) =&gt; println!(\"\u7d50\u679c: {}\", result), // \u8f38\u51fa: 5\n    Err(e) =&gt; println!(\"\u932f\u8aa4: {}\", e),\n}\n// \u4f7f\u7528 unwrap_or_else \u8655\u7406\u932f\u8aa4\nlet result = divide(10, 0).unwrap_or_else(|e| {\n    println!(\"\u932f\u8aa4: {}\", e);\n    0\n});\nprintln!(\"\u7d50\u679c\u6216\u9810\u8a2d: {}\", result); // \u8f38\u51fa: 0\n</code></pre> <li>? \u904b\u7b97\u5b50\uff1a\u7c21\u5316\u932f\u8aa4\u50b3\u64ad\uff0c\u50c5\u5728\u51fd\u6578\u8fd4\u56de <code>Result</code> \u6216 <code>Option</code> \u6642\u4f7f\u7528\u3002   <pre><code>fn might_fail() -&gt; Result&lt;i32, &amp;'static str&gt; {\n    let value = divide(10, 2)?; // \u5982\u679c Err\uff0c\u63d0\u524d\u8fd4\u56de\n    Ok(value * 2)\n}\nprintln!(\"\u7d50\u679c: {:?}\", might_fail()); // \u8f38\u51fa: Ok(10)\n</code></pre></li> <li>panic! \u5b8f\uff1a\u7528\u65bc\u4e0d\u53ef\u6062\u5fa9\u7684\u932f\u8aa4\uff0c\u5c0e\u81f4\u7a0b\u5f0f\u5d29\u6f70\u3002   <pre><code>fn critical_error() {\n    panic!(\"\u767c\u751f\u81f4\u547d\u932f\u8aa4\uff0c\u7a0b\u5f0f\u7d42\u6b62\");\n}\n// \u7a0b\u5f0f\u57f7\u884c\u5230\u6b64\u5c07\u5d29\u6f70\n</code></pre></li>"},{"location":"rust-cheat-sheet/error-handling-patterns/#_2","title":"\u6a21\u5f0f\u5339\u914d","text":"<ul> <li>match \u8868\u9054\u5f0f\uff1a\u7528\u65bc\u7d50\u69cb\u5316\u6578\u64da\u7684\u5206\u652f\u8655\u7406\uff0c\u5fc5\u9808\u7aae\u76e1\u6240\u6709\u53ef\u80fd\u3002   <pre><code>let number = 3;\nmatch number {\n    1 =&gt; println!(\"\u4e00\"),\n    2 =&gt; println!(\"\u4e8c\"),\n    3 =&gt; println!(\"\u4e09\"),\n    _ =&gt; println!(\"\u5176\u4ed6\"), // _ \u901a\u914d\u7b26\u5339\u914d\u5269\u9918\u60c5\u6cc1\n}\n// \u5339\u914d Option\nlet opt: Option&lt;i32&gt; = Some(5);\nmatch opt {\n    Some(value) =&gt; println!(\"\u503c: {}\", value), // \u8f38\u51fa: 5\n    None =&gt; println!(\"\u7121\u503c\"),\n}\n</code></pre></li> <li>if let \u8868\u9054\u5f0f\uff1a\u7c21\u5316\u55ae\u4e00\u6a21\u5f0f\u5339\u914d\uff0c\u9069\u5408\u7c21\u55ae\u5834\u666f\u3002   <pre><code>let opt: Option&lt;i32&gt; = Some(7);\nif let Some(value) = opt {\n    println!(\"\u503c: {}\", value); // \u8f38\u51fa: 7\n} else {\n    println!(\"\u7121\u503c\");\n}\n</code></pre></li> <li>while let \u8868\u9054\u5f0f\uff1a\u7528\u65bc\u5faa\u74b0\u4e2d\u5339\u914d\u6a21\u5f0f\u3002   <pre><code>let mut opt = Some(3);\nwhile let Some(value) = opt {\n    println!(\"\u503c: {}\", value);\n    opt = if value &gt; 1 { Some(value - 1) } else { None };\n}\n// \u8f38\u51fa: 3, 2\n</code></pre></li> <li>let \u89e3\u69cb\uff1a\u76f4\u63a5\u5728\u8b8a\u6578\u5ba3\u544a\u6642\u5339\u914d\u6a21\u5f0f\u3002   <pre><code>let (x, y) = (1, 2); // \u89e3\u69cb\u5143\u7d44\nprintln!(\"x: {}, y: {}\", x, y); // \u8f38\u51fa: 1, 2\nlet point = (3, 4);\nif let (x, 0) = point {\n    println!(\"\u5728 x \u8ef8\u4e0a\");\n} else {\n    println!(\"\u4e0d\u5728 x \u8ef8\u4e0a\"); // \u8f38\u51fa: \u4e0d\u5728 x \u8ef8\u4e0a\n}\n</code></pre></li> </ul>"},{"location":"rust-cheat-sheet/error-handling-patterns/#_3","title":"\u5e38\u898b\u6a21\u5f0f\u8207\u6280\u5de7","text":"<ul> <li>\u5339\u914d\u7bc4\u570d\uff1a\u4f7f\u7528 <code>..=</code> \u5339\u914d\u6578\u5b57\u7bc4\u570d\u3002   <pre><code>let score = 75;\nmatch score {\n    90..=100 =&gt; println!(\"\u512a\u79c0\"),\n    60..=89 =&gt; println!(\"\u5408\u683c\"), // \u8f38\u51fa: \u5408\u683c\n    _ =&gt; println!(\"\u4e0d\u5408\u683c\"),\n}\n</code></pre></li> <li>\u5339\u914d\u7d50\u69cb\u9ad4\u8207\u679a\u8209\uff1a\u89e3\u69cb\u8907\u96dc\u985e\u578b\u3002   <pre><code>enum Color {\n    RGB(u8, u8, u8),\n    Gray(u8),\n}\nlet color = Color::RGB(255, 128, 0);\nmatch color {\n    Color::RGB(r, g, b) =&gt; println!(\"RGB({}, {}, {})\", r, g, b), // \u8f38\u51fa: RGB(255, 128, 0)\n    Color::Gray(value) =&gt; println!(\"Gray({})\", value),\n}\n</code></pre></li> <li>\u5ffd\u7565\u90e8\u5206\u503c\uff1a\u4f7f\u7528 <code>_</code> \u5ffd\u7565\u4e0d\u9700\u8981\u7684\u503c\u3002   <pre><code>let tuple = (1, 2, 3);\nmatch tuple {\n    (first, _, third) =&gt; println!(\"\u7b2c\u4e00: {}, \u7b2c\u4e09: {}\", first, third), // \u8f38\u51fa: 1, 3\n}\n</code></pre></li> </ul>"},{"location":"rust-cheat-sheet/standard-library/","title":"Rust Cheat Sheet\uff1a\u6a19\u6e96\u51fd\u6578\u5eab\u901f\u67e5","text":"<p>\u672c\u901f\u67e5\u8868\u6db5\u84cb Rust \u6a19\u6e96\u51fd\u6578\u5eab (<code>std</code>) \u7684\u5e38\u7528\u6a21\u7d44\u8207\u529f\u80fd\uff0c\u9069\u5408\u5feb\u901f\u53c3\u8003\u8cc7\u6599\u7d50\u69cb\u3001\u6a94\u6848\u64cd\u4f5c\u3001\u4e26\u767c\u5de5\u5177\u7b49\u6838\u5fc3\u7d44\u4ef6\u3002</p> <p>Rust \u7684\u6a19\u6e96\u51fd\u6578\u5eab\u63d0\u4f9b\u4e86\u8c50\u5bcc\u7684\u529f\u80fd\uff0c\u652f\u63f4\u9ad8\u6548\u8207\u5b89\u5168\u7684\u7a0b\u5f0f\u958b\u767c\u3002</p>"},{"location":"rust-cheat-sheet/standard-library/#stdcollections","title":"\u5e38\u7528\u8cc7\u6599\u7d50\u69cb (std::collections)","text":"<ul> <li>Vec\uff1a\u52d5\u614b\u9663\u5217\uff0c\u652f\u63f4\u53ef\u8b8a\u5927\u5c0f\u3002   <pre><code>let mut vec = vec![1, 2, 3];\nvec.push(4);\nvec.pop(); // \u79fb\u9664\u4e26\u8fd4\u56de\u6700\u5f8c\u5143\u7d20\nprintln!(\"Vec: {:?}\", vec); // \u8f38\u51fa: [1, 2, 3]\n</code></pre> <li>HashMap\uff1a\u96dc\u6e4a\u8868\uff0c\u9375\u503c\u5c0d\u5b58\u5132\u3002   <pre><code>use std::collections::HashMap;\nlet mut map = HashMap::new();\nmap.insert(\"key\", 42);\nif let Some(value) = map.get(\"key\") {\n    println!(\"Value: {}\", value); // \u8f38\u51fa: 42\n}\n</code></pre> <li>HashSet\uff1a\u7121\u5e8f\u552f\u4e00\u96c6\u5408\u3002   <pre><code>use std::collections::HashSet;\nlet mut set = HashSet::new();\nset.insert(1);\nset.insert(2);\nprintln!(\"Set contains 2: {}\", set.contains(&amp;2)); // \u8f38\u51fa: true\n</code></pre> <li>BTreeMap \u548c BTreeSet\uff1a\u6709\u5e8f\u6620\u5c04\u8207\u96c6\u5408\u3002   <pre><code>use std::collections::BTreeMap;\nlet mut map = BTreeMap::new();\nmap.insert(2, \"two\");\nmap.insert(1, \"one\");\nfor (key, value) in map {\n    println!(\"{}: {}\", key, value); // \u6309\u9375\u6709\u5e8f\u8f38\u51fa\n}\n</code></pre> <li>VecDeque\uff1a\u96d9\u7aef\u4f47\u5217\u3002   <pre><code>use std::collections::VecDeque;\nlet mut deque = VecDeque::new();\ndeque.push_back(1);\ndeque.push_front(0);\nprintln!(\"Deque: {:?}\", deque); // \u8f38\u51fa: [0, 1]\n</code></pre> <li>BinaryHeap\uff1a\u4e8c\u9032\u4f4d\u5806\uff0c\u9810\u8a2d\u70ba\u6700\u5927\u5806\u3002   <pre><code>use std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::new();\nheap.push(3);\nheap.push(1);\nprintln!(\"Top: {:?}\", heap.pop()); // \u8f38\u51fa: Some(3)\n</code></pre>"},{"location":"rust-cheat-sheet/standard-library/#stdstr-stdstring","title":"\u5b57\u4e32\u8207\u6587\u672c\u8655\u7406 (std::str, std::string)","text":"<ul> <li>String\uff1a\u64c1\u6709\u6240\u6709\u6b0a\u7684\u53ef\u8b8a\u5b57\u4e32\u3002   <pre><code>let mut s = String::from(\"Hello\");\ns.push_str(\", World\");\nprintln!(\"String: {}\", s); // \u8f38\u51fa: Hello, World\n</code></pre></li> <li>&amp;str\uff1a\u5b57\u4e32\u5207\u7247\uff0c\u4e0d\u53ef\u8b8a\u5f15\u7528\u3002   <pre><code>let s: &amp;str = \"Hello\";\nlet slice = &amp;s[0..3];\nprintln!(\"Slice: {}\", slice); // \u8f38\u51fa: Hel\n</code></pre></li> </ul>"},{"location":"rust-cheat-sheet/standard-library/#io-stdfs-stdio","title":"\u6a94\u6848\u8207 I/O (std::fs, std::io)","text":"<ul> <li>\u8b80\u53d6\u6a94\u6848\uff1a\u4f7f\u7528 <code>fs::File</code> \u548c <code>io::BufReader</code>\u3002   <pre><code>use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nlet file = File::open(\"file.txt\")?;\nlet reader = BufReader::new(file);\nfor line in reader.lines() {\n    println!(\"{}\", line?);\n}\n</code></pre></li> <li>\u5beb\u5165\u6a94\u6848\uff1a\u4f7f\u7528 <code>fs::File</code> \u548c <code>io::Write</code>\u3002   <pre><code>use std::fs::File;\nuse std::io::Write;\nlet mut file = File::create(\"output.txt\")?;\nfile.write_all(b\"Hello, Rust!\")?;\n</code></pre></li> </ul>"},{"location":"rust-cheat-sheet/standard-library/#stdthread-stdsync","title":"\u4e26\u767c\u8207\u540c\u6b65 (std::thread, std::sync)","text":"<ul> <li>\u57f7\u884c\u7dd2\uff1a\u4f7f\u7528 <code>thread::spawn</code> \u5275\u5efa\u65b0\u57f7\u884c\u7dd2\u3002   <pre><code>use std::thread;\nlet handle = thread::spawn(|| {\n    println!(\"\u4f86\u81ea\u65b0\u57f7\u884c\u7dd2!\");\n});\nhandle.join().unwrap();\n</code></pre></li> <li>Mutex\uff1a\u7528\u65bc\u4e92\u65a5\u9396\uff0c\u4fdd\u8b77\u5171\u4eab\u6578\u64da\u3002   <pre><code>use std::sync::Mutex;\nlet data = Mutex::new(0);\nlet mut guard = data.lock().unwrap();\n*guard += 1;\nprintln!(\"Value: {}\", *guard); // \u8f38\u51fa: 1\n</code></pre></li> <li>Arc\uff1a\u539f\u5b50\u5f15\u7528\u8a08\u6578\uff0c\u652f\u63f4\u591a\u57f7\u884c\u7dd2\u5171\u4eab\u3002   <pre><code>use std::sync::Arc;\nlet data = Arc::new(42);\nlet clone = Arc::clone(&amp;data);\nprintln!(\"Cloned value: {}\", clone); // \u8f38\u51fa: 42\n</code></pre></li> </ul>"},{"location":"rust-cheat-sheet/standard-library/#stdtime","title":"\u6642\u9593\u8207\u65e5\u671f (std::time)","text":"<ul> <li>\u7cfb\u7d71\u6642\u9593\uff1a\u7372\u53d6\u7576\u524d\u6642\u9593\u3002   <pre><code>use std::time::SystemTime;\nlet now = SystemTime::now();\nprintln!(\"\u7576\u524d\u6642\u9593: {:?}\", now);\n</code></pre></li> <li>\u6301\u7e8c\u6642\u9593\uff1a\u8a08\u7b97\u6642\u9593\u9593\u9694\u3002   <pre><code>use std::time::{Duration, SystemTime};\nlet start = SystemTime::now();\nthread::sleep(Duration::from_millis(100));\nlet elapsed = start.elapsed().unwrap();\nprintln!(\"\u7d93\u904e\u6642\u9593: {:?}\", elapsed);\n</code></pre></li> </ul>"},{"location":"rust-cheat-sheet/standard-library/#stdenv","title":"\u74b0\u5883\u8207\u547d\u4ee4\u5217 (std::env)","text":"<ul> <li>\u547d\u4ee4\u5217\u53c3\u6578\uff1a\u7372\u53d6\u7a0b\u5f0f\u57f7\u884c\u6642\u7684\u53c3\u6578\u3002   <pre><code>use std::env;\nlet args: Vec&lt;String&gt; = env::args().collect();\nprintln!(\"\u53c3\u6578: {:?}\", args);\n</code></pre></li> <li>\u74b0\u5883\u8b8a\u6578\uff1a\u8b80\u53d6\u7cfb\u7d71\u74b0\u5883\u8b8a\u6578\u3002   <pre><code>use std::env;\nif let Ok(value) = env::var(\"PATH\") {\n    println!(\"PATH: {}\", value);\n}\n</code></pre></li> </ul>"},{"location":"rust-cheat-sheet/tools-debugging/","title":"Rust Cheat Sheet\uff1a\u5e38\u7528\u5de5\u5177\u8207\u8abf\u8a66","text":"<p>\u672c\u901f\u67e5\u8868\u6db5\u84cb Rust \u958b\u767c\u4e2d\u5e38\u7528\u7684\u5de5\u5177\u8207\u8abf\u8a66\u6280\u5de7\uff0c\u9069\u5408\u5feb\u901f\u53c3\u8003\u5982\u4f55\u4f7f\u7528 Cargo\u3001\u683c\u5f0f\u5316\u5de5\u5177\u3001\u57fa\u6e96\u6e2c\u8a66\u8207\u8abf\u8a66\u65b9\u6cd5\u3002</p> <p>Rust \u751f\u614b\u7cfb\u7d71\u63d0\u4f9b\u4e86\u5f37\u5927\u7684\u5de5\u5177\u652f\u63f4\u9ad8\u6548\u958b\u767c\u8207\u554f\u984c\u8a3a\u65b7\u3002</p>"},{"location":"rust-cheat-sheet/tools-debugging/#cargo","title":"\u6838\u5fc3\u5de5\u5177\uff1aCargo","text":"<ul> <li>\u5efa\u7acb\u65b0\u5c08\u6848\uff1a\u5275\u5efa\u65b0 Rust \u5c08\u6848\u3002   <pre><code>cargo new my_project --bin # \u53ef\u57f7\u884c\u5c08\u6848\ncargo new my_lib --lib # \u51fd\u6578\u5eab\u5c08\u6848\n</code></pre></li> <li>\u5efa\u7f6e\u8207\u57f7\u884c\uff1a\u7de8\u8b6f\u8207\u904b\u884c\u7a0b\u5f0f\u3002   <pre><code>cargo build # \u5efa\u7f6e\u5c08\u6848 (debug \u6a21\u5f0f)\ncargo build --release # \u5efa\u7f6e\u512a\u5316\u7248\u672c\ncargo run # \u5efa\u7f6e\u4e26\u57f7\u884c (\u9069\u7528\u65bc bin \u5c08\u6848)\n</code></pre></li> <li>\u6e2c\u8a66\uff1a\u57f7\u884c\u55ae\u5143\u8207\u6574\u5408\u6e2c\u8a66\u3002   <pre><code>cargo test # \u57f7\u884c\u6240\u6709\u6e2c\u8a66\ncargo test -- --show-output # \u986f\u793a\u6e2c\u8a66\u8f38\u51fa\n</code></pre></li> <li>\u4f9d\u8cf4\u7ba1\u7406\uff1a\u7ba1\u7406\u5c08\u6848\u4f9d\u8cf4\u3002   <pre><code>cargo add serde # \u65b0\u589e\u4f9d\u8cf4\u5230 Cargo.toml\ncargo update # \u66f4\u65b0\u4f9d\u8cf4\u7248\u672c\n</code></pre></li> <li>\u6aa2\u67e5\u8207\u6587\u6a94\uff1a\u6aa2\u67e5\u4ee3\u78bc\u8207\u751f\u6210\u6587\u6a94\u3002   <pre><code>cargo check # \u5feb\u901f\u6aa2\u67e5\u8a9e\u6cd5\u932f\u8aa4\uff0c\u4e0d\u7de8\u8b6f\ncargo doc --open # \u751f\u6210\u4e26\u6253\u958b API \u6587\u6a94\n</code></pre></li> </ul>"},{"location":"rust-cheat-sheet/tools-debugging/#_1","title":"\u4ee3\u78bc\u683c\u5f0f\u5316\u8207\u975c\u614b\u5206\u6790","text":"<ul> <li>rustfmt\uff1a\u81ea\u52d5\u683c\u5f0f\u5316 Rust \u4ee3\u78bc\uff0c\u78ba\u4fdd\u4e00\u81f4\u6027\u3002   <pre><code>cargo fmt # \u683c\u5f0f\u5316\u5c08\u6848\u4e2d\u6240\u6709\u4ee3\u78bc\ncargo fmt -- --check # \u6aa2\u67e5\u683c\u5f0f\u662f\u5426\u7b26\u5408\u898f\u7bc4\n</code></pre></li> <li>Clippy\uff1a\u975c\u614b\u5206\u6790\u5de5\u5177\uff0c\u6aa2\u6e2c\u6f5b\u5728\u554f\u984c\u8207\u58de\u5473\u9053\u3002   <pre><code>cargo clippy # \u57f7\u884c Clippy \u6aa2\u67e5\ncargo clippy --fix # \u81ea\u52d5\u4fee\u5fa9\u90e8\u5206\u554f\u984c\n</code></pre></li> </ul>"},{"location":"rust-cheat-sheet/tools-debugging/#_2","title":"\u8abf\u8a66\u5de5\u5177\u8207\u6280\u5de7","text":"<ul> <li>println! \u8abf\u8a66\uff1a\u6700\u7c21\u55ae\u7684\u8abf\u8a66\u65b9\u6cd5\uff0c\u8f38\u51fa\u8b8a\u6578\u503c\u3002   <pre><code>let x = 42;\nprintln!(\"x \u7684\u503c\u662f: {}\", x);\n</code></pre></li> <li>dbg! \u5b8f\uff1a\u5feb\u901f\u8abf\u8a66\uff0c\u8f38\u51fa\u8868\u9054\u5f0f\u503c\u8207\u6a94\u6848\u4f4d\u7f6e\u3002   <pre><code>let x = 42;\ndbg!(x); // \u8f38\u51fa: [src/main.rs:2] x = 42\n</code></pre></li> <li>Rust Analyzer\uff1a\u5f37\u5927\u7684 IDE \u652f\u63f4\u5de5\u5177\uff0c\u63d0\u4f9b\u5373\u6642\u932f\u8aa4\u6aa2\u67e5\u8207\u88dc\u5168\u3002</li> <li>\u5b89\u88dd\uff1a\u901a\u904e VS Code \u64f4\u5145\u529f\u80fd\u6216\u76f4\u63a5\u4e0b\u8f09\u3002</li> <li>\u529f\u80fd\uff1a\u8a9e\u6cd5\u9ad8\u4eae\u3001\u5373\u6642\u932f\u8aa4\u3001\u8df3\u8f49\u5230\u5b9a\u7fa9\u3002</li> <li>GDB/LLDB\uff1a\u50b3\u7d71\u8abf\u8a66\u5668\uff0c\u9069\u5408\u6df1\u5165\u8abf\u8a66\u3002   <pre><code>rust-gdb target/debug/my_program # \u4f7f\u7528 GDB \u8abf\u8a66\nlldb target/debug/my_program # \u4f7f\u7528 LLDB \u8abf\u8a66\n</code></pre></li> </ul>"},{"location":"rust-cheat-sheet/tools-debugging/#_3","title":"\u6548\u80fd\u5206\u6790\u8207\u57fa\u6e96\u6e2c\u8a66","text":"<ul> <li>Criterion\uff1aRust \u57fa\u6e96\u6e2c\u8a66\u6846\u67b6\uff0c\u7528\u65bc\u5fae\u57fa\u6e96\u6e2c\u8a66\u3002   <pre><code>use criterion::{black_box, criterion_group, criterion_main, Criterion};\nfn benchmark_example(c: &amp;mut Criterion) {\n    c.bench_function(\"example\", |b| b.iter(|| black_box(1 + 1)));\n}\ncriterion_group!(benches, benchmark_example);\ncriterion_main!(benches);\n</code></pre>   \u57f7\u884c\uff1a<code>cargo bench</code></li> <li>perf\uff1aLinux \u6548\u80fd\u5206\u6790\u5de5\u5177\uff0c\u5206\u6790\u7a0b\u5f0f\u71b1\u9ede\u3002   <pre><code>cargo build --release\nperf record ./target/release/my_program\nperf report\n</code></pre></li> <li>Flamegraph\uff1a\u8996\u89ba\u5316\u6548\u80fd\u5206\u6790\u7d50\u679c\u3002   <pre><code>cargo flamegraph # \u9700\u8981\u5b89\u88dd cargo-flamegraph\n</code></pre></li> </ul>"},{"location":"rust-cheat-sheet/tools-debugging/#_4","title":"\u5176\u4ed6\u5be6\u7528\u5de5\u5177","text":"<ul> <li>cargo-watch\uff1a\u81ea\u52d5\u91cd\u65b0\u5efa\u7f6e\u8207\u57f7\u884c\uff0c\u9069\u5408\u958b\u767c\u968e\u6bb5\u3002   <pre><code>cargo watch -x run # \u6a94\u6848\u8b8a\u66f4\u6642\u91cd\u65b0\u57f7\u884c\n</code></pre></li> <li>cargo-expand\uff1a\u5c55\u958b\u5b8f\uff0c\u6aa2\u67e5\u751f\u6210\u7684\u4ee3\u78bc\u3002   <pre><code>cargo expand # \u5c55\u958b\u5c08\u6848\u4e2d\u7684\u5b8f\n</code></pre></li> <li>rustup\uff1a\u7ba1\u7406 Rust \u5de5\u5177\u93c8\u8207\u7248\u672c\u3002   <pre><code>rustup update # \u66f4\u65b0 Rust \u7248\u672c\nrustup toolchain install nightly # \u5b89\u88dd nightly \u7248\u672c\nrustup component add rustfmt # \u5b89\u88dd rustfmt\n</code></pre></li> </ul>"},{"location":"standard-library-usage/advanced-use-cases/","title":"\u6a19\u6e96\u51fd\u6578\u5eab\u7684\u4f7f\u7528\uff1a\u9032\u968e\u61c9\u7528\u6848\u4f8b","text":"<p>Rust \u7684\u6a19\u6e96\u51fd\u6578\u5eab\u63d0\u4f9b\u4e86\u5f37\u5927\u7684\u5de5\u5177\uff0c\u652f\u63f4\u5f9e\u57fa\u790e\u8cc7\u6599\u8655\u7406\u5230\u8907\u96dc\u7cfb\u7d71\u8a2d\u8a08\u7684\u5404\u7a2e\u5834\u666f\u3002</p>"},{"location":"standard-library-usage/advanced-use-cases/#_2","title":"\u70ba\u4ec0\u9ebc\u5b78\u7fd2\u9032\u968e\u61c9\u7528\u6848\u4f8b\uff1f","text":"<p>\u9032\u968e\u61c9\u7528\u6848\u4f8b\u5c07\u6a19\u6e96\u51fd\u6578\u5eab\u7684\u5404\u500b\u90e8\u5206\u6574\u5408\u5230\u5be6\u969b\u5c08\u6848\u4e2d\uff0c\u5b78\u7fd2\u5b83\u5011\u6709\u4ee5\u4e0b\u597d\u8655\uff1a</p> <ul> <li>\u7d9c\u5408\u61c9\u7528\uff1a\u7406\u89e3\u5982\u4f55\u5c07\u591a\u500b\u6a21\u7d44\u7d50\u5408\u4f7f\u7528\uff0c\u89e3\u6c7a\u8907\u96dc\u554f\u984c\u3002</li> <li>\u6548\u80fd\u512a\u5316\uff1a\u901a\u904e\u771f\u5be6\u5834\u666f\u5b78\u7fd2\u5982\u4f55\u5206\u6790\u8207\u512a\u5316\u7a0b\u5f0f\u6548\u80fd\u3002</li> <li>\u8a2d\u8a08\u601d\u7dad\uff1a\u57f9\u990a\u7cfb\u7d71\u8a2d\u8a08\u8207\u67b6\u69cb\u80fd\u529b\uff0c\u69cb\u5efa\u53ef\u9760\u4e14\u9ad8\u6548\u7684\u61c9\u7528\u7a0b\u5f0f\u3002</li> </ul> <p>\u672c\u7ae0\u5c07\u901a\u904e\u5177\u9ad4\u6848\u4f8b\uff0c\u6df1\u5165\u63a2\u7d22\u6a19\u6e96\u51fd\u6578\u5eab\u7684\u9032\u968e\u61c9\u7528\u3002</p>"},{"location":"standard-library-usage/advanced-use-cases/#_3","title":"\u9032\u968e\u61c9\u7528\u6848\u4f8b","text":""},{"location":"standard-library-usage/advanced-use-cases/#1","title":"1. \u5927\u898f\u6a21\u8cc7\u6599\u8655\u7406\u7ba1\u9053","text":"<p>\u5834\u666f\uff1a\u8655\u7406\u4e00\u500b\u5305\u542b\u767e\u842c\u7b46\u8a18\u9304\u7684 CSV \u6a94\u6848\uff0c\u9032\u884c\u904e\u6ffe\u3001\u8f49\u63db\u8207\u532f\u7e3d\uff0c\u751f\u6210\u5831\u544a\u3002</p> <p>\u5be6\u73fe\uff1a</p> <ul> <li>\u4f7f\u7528 <code>std::fs</code> \u548c <code>std::io</code> \u9032\u884c\u9ad8\u6548\u6a94\u6848\u8b80\u53d6\u3002</li> <li>\u4f7f\u7528 <code>std::collections</code> \u548c\u8fed\u4ee3\u5668\u9032\u884c\u8cc7\u6599\u8655\u7406\u3002</li> <li>\u4f7f\u7528 <code>std::thread</code> \u8207 <code>std::sync::mpsc</code> \u5be6\u73fe\u4e26\u884c\u8655\u7406\u3002   <pre><code>use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::sync::mpsc;\nuse std::thread;\nuse std::collections::HashMap;\n\nfn process_csv(path: &amp;str) -&gt; io::Result&lt;()&gt; {\n    let file = File::open(path)?;\n    let reader = BufReader::new(file);\n    let (tx, rx) = mpsc::channel();\n    let mut handles = vec![];\n    let chunk_size = 10000;\n    let mut current_chunk = vec![];\n\n    // \u8b80\u53d6\u4e26\u5206\u584a\n    for line in reader.lines() {\n        current_chunk.push(line?);\n        if current_chunk.len() &gt;= chunk_size {\n            let tx = tx.clone();\n            let chunk = std::mem::take(&amp;mut current_chunk);\n            handles.push(thread::spawn(move || {\n                let mut counts = HashMap::new();\n                for line in chunk {\n                    if let Some(field) = line.split(',').next() {\n                        *counts.entry(field.to_string()).or_insert(0) += 1;\n                    }\n                }\n                tx.send(counts).unwrap();\n            }));\n        }\n    }\n\n    // \u8655\u7406\u5269\u9918\u6578\u64da\n    if !current_chunk.is_empty() {\n        let tx = tx.clone();\n        handles.push(thread::spawn(move || {\n            let mut counts = HashMap::new();\n            for line in current_chunk {\n                if let Some(field) = line.split(',').next() {\n                    *counts.entry(field.to_string()).or_insert(0) += 1;\n                }\n            }\n            tx.send(counts).unwrap();\n        }));\n    }\n\n    drop(tx); // \u95dc\u9589\u767c\u9001\u7aef\n    let mut final_counts = HashMap::new();\n    for received in rx {\n        for (key, value) in received {\n            *final_counts.entry(key).or_insert(0) += value;\n        }\n    }\n\n    println!(\"Final counts: {:?}\", final_counts);\n    for handle in handles {\n        handle.join().unwrap();\n    }\n    Ok(())\n}\n\nfn main() {\n    process_csv(\"data.csv\").unwrap();\n}\n</code></pre></li> </ul> <p>\u512a\u5316\u7b56\u7565\uff1a</p> <ul> <li>\u4f7f\u7528 <code>BufReader</code> \u6e1b\u5c11\u7cfb\u7d71\u8abf\u7528\uff0c\u63d0\u5347\u8b80\u53d6\u6548\u7387\u3002</li> <li>\u5c07\u6578\u64da\u5206\u584a\u4e26\u884c\u8655\u7406\uff0c\u5145\u5206\u5229\u7528\u591a\u6838 CPU\u3002</li> <li>\u4f7f\u7528\u901a\u9053\u6536\u96c6\u7d50\u679c\uff0c\u907f\u514d\u9396\u722d\u7528\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u5728\u8655\u7406\u8d85\u5927\u6a94\u6848\u6642\uff0c\u8003\u616e\u4f7f\u7528\u6d41\u5f0f\u8655\u7406\u6846\u67b6\u6216\u5916\u90e8\u5eab\u5982 <code>csv</code> \u4f86\u7c21\u5316\u89e3\u6790\uff0c\u4e26\u7d50\u5408 <code>rayon</code> \u9032\u4e00\u6b65\u512a\u5316\u4e26\u884c\u8655\u7406\u3002</p>"},{"location":"standard-library-usage/advanced-use-cases/#2","title":"2. \u9ad8\u6027\u80fd\u65e5\u8a8c\u7cfb\u7d71","text":"<p>\u5834\u666f\uff1a\u69cb\u5efa\u4e00\u500b\u9ad8\u6027\u80fd\u65e5\u8a8c\u7cfb\u7d71\uff0c\u652f\u63f4\u591a\u57f7\u884c\u7dd2\u5beb\u5165\u65e5\u8a8c\u5230\u6a94\u6848\uff0c\u4fdd\u8b49\u4f4e\u5ef6\u9072\u8207\u8cc7\u6599\u5b8c\u6574\u6027\u3002</p> <p>\u5be6\u73fe\uff1a</p> <ul> <li>\u4f7f\u7528 <code>std::sync</code> \u9032\u884c\u540c\u6b65\u63a7\u5236\u3002</li> <li>\u4f7f\u7528 <code>std::fs</code> \u548c <code>std::io</code> \u9032\u884c\u6a94\u6848\u64cd\u4f5c\u3002</li> <li>\u4f7f\u7528 <code>std::thread</code> \u5be6\u73fe\u5f8c\u53f0\u5beb\u5165\u57f7\u884c\u7dd2\u3002   <pre><code>use std::fs::{File, OpenOptions};\nuse std::io::{self, Write};\nuse std::sync::{Arc, Mutex};\nuse std::thread;\nuse std::time::SystemTime;\n\nstruct Logger {\n    file: Arc&lt;Mutex&lt;File&gt;&gt;,\n}\n\nimpl Logger {\n    fn new(path: &amp;str) -&gt; io::Result&lt;Self&gt; {\n        let file = OpenOptions::new()\n            .write(true)\n            .create(true)\n            .append(true)\n            .open(path)?;\n        Ok(Logger { file: Arc::new(Mutex::new(file)) })\n    }\n\n    fn log(&amp;self, message: &amp;str) {\n        let mut file = self.file.lock().unwrap();\n        let timestamp = SystemTime::now()\n            .duration_since(std::time::UNIX_EPOCH)\n            .unwrap()\n            .as_secs();\n        let log_line = format!(\"[{}] {}\\n\", timestamp, message);\n        file.write_all(log_line.as_bytes()).unwrap();\n        file.flush().unwrap(); // \u4fdd\u8b49\u7acb\u5373\u5beb\u5165\n    }\n}\n\nfn main() {\n    let logger = Arc::new(Logger::new(\"app.log\").unwrap());\n    let mut handles = vec![];\n\n    for i in 0..5 {\n        let logger = Arc::clone(&amp;logger);\n        handles.push(thread::spawn(move || {\n            for j in 0..100 {\n                logger.log(&amp;format!(\"Thread {} - Log {}\", i, j));\n            }\n        }));\n    }\n\n    for handle in handles {\n        handle.join().unwrap();\n    }\n    println!(\"Logging completed\");\n}\n</code></pre></li> </ul> <p>\u512a\u5316\u7b56\u7565\uff1a</p> <ul> <li>\u4f7f\u7528 <code>Arc&lt;Mutex&lt;&gt;&gt;</code> \u4fdd\u8b49\u591a\u57f7\u884c\u7dd2\u5b89\u5168\u5beb\u5165\u3002</li> <li>\u8003\u616e\u4f7f\u7528\u7de9\u885d\u5340\u6e1b\u5c11 <code>flush()</code> \u983b\u7387\uff0c\u63d0\u5347\u6548\u80fd\u3002</li> <li>\u53ef\u9032\u4e00\u6b65\u4f7f\u7528\u5f8c\u53f0\u57f7\u884c\u7dd2\u8207\u901a\u9053\uff0c\u5c07\u65e5\u8a8c\u5beb\u5165\u8207\u61c9\u7528\u908f\u8f2f\u5206\u96e2\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u5728\u9ad8\u541e\u5410\u91cf\u5834\u666f\u4e2d\uff0c\u8003\u616e\u4f7f\u7528 <code>log</code> \u8207 <code>env_logger</code> \u5eab\uff0c\u4e26\u7d50\u5408\u65cb\u8f49\u65e5\u8a8c\u7b56\u7565\u907f\u514d\u6a94\u6848\u904e\u5927\u3002</p>"},{"location":"standard-library-usage/advanced-use-cases/#3","title":"3. \u4e26\u767c\u4f3a\u670d\u5668\u6a21\u64ec","text":"<p>\u5834\u666f\uff1a\u6a21\u64ec\u4e00\u500b\u7c21\u55ae\u7684\u4e26\u767c\u4f3a\u670d\u5668\uff0c\u8655\u7406\u591a\u500b\u5ba2\u6236\u7aef\u8acb\u6c42\uff0c\u652f\u63f4\u4efb\u52d9\u5206\u767c\u8207\u7d50\u679c\u6536\u96c6\u3002</p> <p>\u5be6\u73fe\uff1a</p> <ul> <li>\u4f7f\u7528 <code>std::thread</code> \u6a21\u64ec\u5ba2\u6236\u7aef\u8207\u5de5\u4f5c\u8005\u57f7\u884c\u7dd2\u3002</li> <li>\u4f7f\u7528 <code>std::sync::mpsc</code> \u5be6\u73fe\u8acb\u6c42\u5206\u767c\u8207\u7d50\u679c\u6536\u96c6\u3002</li> <li>\u4f7f\u7528 <code>std::sync::Arc</code> \u8207 <code>Mutex</code> \u5171\u4eab\u72c0\u614b\u3002   <pre><code>use std::sync::{mpsc, Arc, Mutex};\nuse std::thread;\nuse std::time::Duration;\n\nfn main() {\n    let (request_tx, request_rx) = mpsc::channel();\n    let (result_tx, result_rx) = mpsc::channel();\n    let active_workers = Arc::new(Mutex::new(0));\n    let mut worker_handles = vec![];\n\n    // \u555f\u52d5\u5de5\u4f5c\u8005\u57f7\u884c\u7dd2\n    for id in 0..3 {\n        let request_rx = request_rx.clone();\n        let result_tx = result_tx.clone();\n        let active_workers = Arc::clone(&amp;active_workers);\n        worker_handles.push(thread::spawn(move || {\n            *active_workers.lock().unwrap() += 1;\n            while let Ok(request) = request_rx.recv() {\n                println!(\"Worker {} processing request: {}\", id, request);\n                thread::sleep(Duration::from_millis(100)); // \u6a21\u64ec\u8655\u7406\u6642\u9593\n                result_tx.send(format!(\"Processed {}\", request)).unwrap();\n            }\n            *active_workers.lock().unwrap() -= 1;\n        }));\n    }\n\n    // \u6a21\u64ec\u5ba2\u6236\u7aef\u8acb\u6c42\n    let mut client_handles = vec![];\n    for i in 0..10 {\n        let request_tx = request_tx.clone();\n        client_handles.push(thread::spawn(move || {\n            request_tx.send(format!(\"Request {}\", i)).unwrap();\n        }));\n    }\n\n    drop(request_tx); // \u95dc\u9589\u6240\u6709\u767c\u9001\u7aef\n    for handle in client_handles {\n        handle.join().unwrap();\n    }\n\n    // \u6536\u96c6\u7d50\u679c\n    let results: Vec&lt;String&gt; = result_rx.iter().collect();\n    println!(\"Results: {:?}\", results);\n\n    // \u7b49\u5f85\u6240\u6709\u5de5\u4f5c\u8005\u5b8c\u6210\n    for handle in worker_handles {\n        handle.join().unwrap();\n    }\n    println!(\"Active workers at end: {}\", *active_workers.lock().unwrap());\n}\n</code></pre></li> </ul> <p>\u512a\u5316\u7b56\u7565\uff1a</p> <ul> <li>\u4f7f\u7528\u6709\u754c\u901a\u9053\u63a7\u5236\u80cc\u58d3\uff0c\u907f\u514d\u904e\u591a\u5f85\u8655\u7406\u8acb\u6c42\u3002</li> <li>\u4f7f\u7528 <code>Arc&lt;Mutex&lt;&gt;&gt;</code> \u8ffd\u8e64\u6d3b\u8e8d\u5de5\u4f5c\u8005\u6578\u91cf\uff0c\u52d5\u614b\u8abf\u6574\u8cc7\u6e90\u3002</li> <li>\u53ef\u9032\u4e00\u6b65\u4f7f\u7528\u689d\u4ef6\u8b8a\u6578 (<code>std::sync::Condvar</code>) \u5be6\u73fe\u66f4\u7cbe\u7d30\u7684\u540c\u6b65\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u5728\u771f\u5be6\u4f3a\u670d\u5668\u61c9\u7528\u4e2d\uff0c\u8003\u616e\u4f7f\u7528 <code>tokio</code> \u6216 <code>async-std</code> \u5be6\u73fe\u7570\u6b65 I/O\uff0c\u63d0\u5347\u4e26\u767c\u8655\u7406\u80fd\u529b\u3002</p>"},{"location":"standard-library-usage/advanced-use-cases/#4","title":"4. \u9ad8\u6548\u7de9\u5b58\u7cfb\u7d71","text":"<p>\u5834\u666f\uff1a\u69cb\u5efa\u4e00\u500b\u7c21\u55ae\u7684\u7de9\u5b58\u7cfb\u7d71\uff0c\u652f\u63f4\u5feb\u901f\u9375\u503c\u5c0d\u5b58\u53d6\u8207\u904e\u671f\u7b56\u7565\uff0c\u9069\u7528\u65bc\u9ad8\u983b\u67e5\u8a62\u5834\u666f\u3002</p> <p>\u5be6\u73fe\uff1a</p> <ul> <li>\u4f7f\u7528 <code>std::collections::HashMap</code> \u4f5c\u70ba\u7de9\u5b58\u5b58\u5132\u3002</li> <li>\u4f7f\u7528 <code>std::sync</code> \u4fdd\u8b49\u591a\u57f7\u884c\u7dd2\u5b89\u5168\u3002</li> <li>\u4f7f\u7528 <code>std::time</code> \u5be6\u73fe\u7de9\u5b58\u904e\u671f\u6a5f\u5236\u3002   <pre><code>use std::collections::HashMap;\nuse std::sync::{Arc, Mutex};\nuse std::thread;\nuse std::time::{Duration, SystemTime};\n\nstruct CacheEntry {\n    value: String,\n    expires_at: Option&lt;u64&gt;, // \u904e\u671f\u6642\u9593\u6233 (\u79d2)\n}\n\nstruct Cache {\n    store: Arc&lt;Mutex&lt;HashMap&lt;String, CacheEntry&gt;&gt;&gt;,\n}\n\nimpl Cache {\n    fn new() -&gt; Self {\n        Cache { store: Arc::new(Mutex::new(HashMap::new())) }\n    }\n\n    fn set(&amp;self, key: &amp;str, value: &amp;str, ttl_seconds: Option&lt;u64&gt;) {\n        let mut store = self.store.lock().unwrap();\n        let expires_at = ttl_seconds.map(|ttl| {\n            SystemTime::now()\n                .duration_since(std::time::UNIX_EPOCH)\n                .unwrap()\n                .as_secs() + ttl\n        });\n        store.insert(key.to_string(), CacheEntry {\n            value: value.to_string(),\n            expires_at,\n        });\n    }\n\n    fn get(&amp;self, key: &amp;str) -&gt; Option&lt;String&gt; {\n        let mut store = self.store.lock().unwrap();\n        if let Some(entry) = store.get(key) {\n            if let Some(expiry) = entry.expires_at {\n                let now = SystemTime::now()\n                    .duration_since(std::time::UNIX_EPOCH)\n                    .unwrap()\n                    .as_secs();\n                if now &gt; expiry {\n                    store.remove(key);\n                    return None;\n                }\n            }\n            return Some(entry.value.clone());\n        }\n        None\n    }\n}\n\nfn main() {\n    let cache = Arc::new(Cache::new());\n    let cache_clone = Arc::clone(&amp;cache);\n\n    // \u6a21\u64ec\u591a\u57f7\u884c\u7dd2\u8a2a\u554f\n    let mut handles = vec![];\n    cache.set(\"key1\", \"value1\", Some(2)); // \u8a2d\u7f6e 2 \u79d2\u904e\u671f\n    cache.set(\"key2\", \"value2\", None);    // \u6c38\u4e0d\u904e\u671f\n\n    for i in 0..3 {\n        let cache = Arc::clone(&amp;cache);\n        handles.push(thread::spawn(move || {\n            println!(\"Thread {} - key1: {:?}\", i, cache.get(\"key1\"));\n            println!(\"Thread {} - key2: {:?}\", i, cache.get(\"key2\"));\n        }));\n    }\n\n    thread::sleep(Duration::from_secs(3)); // \u7b49\u5f85 key1 \u904e\u671f\n    println!(\"After expiry - key1: {:?}\", cache_clone.get(\"key1\")); // \u61c9\u70ba None\n    println!(\"After expiry - key2: {:?}\", cache_clone.get(\"key2\")); // \u61c9\u6709\u503c\n\n    for handle in handles {\n        handle.join().unwrap();\n    }\n}\n</code></pre></li> </ul> <p>\u512a\u5316\u7b56\u7565\uff1a</p> <ul> <li>\u4f7f\u7528 <code>Arc&lt;Mutex&lt;&gt;&gt;</code> \u4fdd\u8b49\u591a\u57f7\u884c\u7dd2\u5b89\u5168\u5b58\u53d6\u3002</li> <li>\u5be6\u73fe\u60f0\u6027\u6e05\u7406\u6a5f\u5236\uff0c\u907f\u514d\u983b\u7e41\u6aa2\u67e5\u904e\u671f\u9805\u76ee\u3002</li> <li>\u53ef\u9032\u4e00\u6b65\u4f7f\u7528 <code>BTreeMap</code> \u6309\u904e\u671f\u6642\u9593\u6392\u5e8f\uff0c\u5be6\u73fe\u4e3b\u52d5\u6e05\u7406\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u5728\u771f\u5be6\u61c9\u7528\u4e2d\uff0c\u8003\u616e\u4f7f\u7528 <code>dashmap</code> \u6216 <code>lru-cache</code> \u5eab\uff0c\u63d0\u5347\u7de9\u5b58\u6548\u80fd\u8207\u529f\u80fd\u6027\u3002</p>"},{"location":"standard-library-usage/advanced-use-cases/#_4","title":"\u6280\u8853\u6311\u6230\u8207\u89e3\u6c7a\u65b9\u6848","text":"<ul> <li>\u8cc7\u6e90\u722d\u7528\uff1a\u591a\u57f7\u884c\u7dd2\u61c9\u7528\u53ef\u80fd\u5c0e\u81f4\u9396\u722d\u7528\u8207\u6548\u80fd\u4e0b\u964d\uff1b\u89e3\u6c7a\u65b9\u6848\u662f\u7d30\u5316\u9396\u7c92\u5ea6\u6216\u4f7f\u7528\u7121\u9396\u8cc7\u6599\u7d50\u69cb\u3002</li> <li>\u8a18\u61b6\u9ad4\u7ba1\u7406\uff1a\u5927\u898f\u6a21\u8cc7\u6599\u8655\u7406\u53ef\u80fd\u5c0e\u81f4\u8a18\u61b6\u9ad4\u904e\u5ea6\u4f7f\u7528\uff1b\u5efa\u8b70\u4f7f\u7528\u6d41\u5f0f\u8655\u7406\u8207\u9810\u5206\u914d\u7b56\u7565\u3002</li> <li>\u8de8\u5e73\u53f0\u517c\u5bb9\u6027\uff1a\u6a94\u6848\u8207 I/O \u64cd\u4f5c\u5728\u4e0d\u540c\u5e73\u53f0\u884c\u70ba\u4e0d\u4e00\u81f4\uff1b\u53ef\u4f7f\u7528\u689d\u4ef6\u7de8\u8b6f\u8207\u6a19\u6e96\u51fd\u6578\u5eab\u62bd\u8c61\u89e3\u6c7a\u3002</li> </ul>"},{"location":"standard-library-usage/advanced-use-cases/#_5","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u5c08\u6848\u5be6\u8e10\uff1a\u9078\u64c7\u4e00\u500b\u771f\u5be6\u554f\u984c\uff0c\u7d9c\u5408\u904b\u7528\u6a19\u6e96\u51fd\u6578\u5eab\u5be6\u73fe\u89e3\u6c7a\u65b9\u6848\uff0c\u5982\u547d\u4ee4\u5217\u5de5\u5177\u6216\u5c0f\u578b\u4f3a\u670d\u5668\u3002</li> <li>\u6548\u80fd\u5206\u6790\uff1a\u4f7f\u7528 <code>criterion</code> \u6216 <code>perf</code> \u5c0d\u6848\u4f8b\u9032\u884c\u57fa\u6e96\u6e2c\u8a66\uff0c\u8b58\u5225\u74f6\u9838\u8207\u512a\u5316\u7a7a\u9593\u3002</li> <li>\u793e\u7fa4\u53c3\u8207\uff1a\u53c3\u8207 Rust \u793e\u7fa4\uff0c\u5b78\u7fd2\u771f\u5be6\u5c08\u6848\u4e2d\u7684\u6a19\u6e96\u51fd\u6578\u5eab\u61c9\u7528\u6a21\u5f0f\u8207\u6700\u4f73\u5be6\u8e10\u3002</li> </ul> <p>\u76f8\u95dc\u8cc7\u6e90\uff1a</p> <ul> <li>Rust \u6a19\u6e96\u51fd\u6578\u5eab\u6587\u6a94 (<code>https://doc.rust-lang.org/std/</code>)\uff0c\u63d0\u4f9b\u8a73\u7d30 API \u8aaa\u660e\u3002</li> <li>Rust \u5c08\u6848\u7bc4\u4f8b (<code>https://github.com/rust-lang/rust-by-example</code>)\uff0c\u5305\u542b\u591a\u500b\u5be6\u7528\u6848\u4f8b\u3002</li> <li><code>crates.io</code> \u4e0a\u7684\u76f8\u95dc\u5eab\uff0c\u5982 <code>rayon</code>\u3001<code>tokio</code>\uff0c\u7528\u65bc\u64f4\u5c55\u6a19\u6e96\u51fd\u6578\u5eab\u529f\u80fd\u3002</li> </ul>"},{"location":"standard-library-usage/basic-modules/","title":"\u6a19\u6e96\u51fd\u6578\u5eab\u7684\u4f7f\u7528\uff1a\u57fa\u790e\u6a21\u7d44\u4ecb\u7d39 (\u9032\u968e)","text":"<p>Rust \u7684\u6a19\u6e96\u51fd\u6578\u5eab (Standard Library) \u662f\u8a9e\u8a00\u7684\u6838\u5fc3\u652f\u67f1\uff0c\u63d0\u4f9b\u4e86\u5f9e\u57fa\u672c\u8cc7\u6599\u7d50\u69cb\u5230\u7cfb\u7d71\u7d1a\u64cd\u4f5c\u7684\u8c50\u5bcc\u529f\u80fd\u3002</p>"},{"location":"standard-library-usage/basic-modules/#_2","title":"\u70ba\u4ec0\u9ebc\u6df1\u5165\u5b78\u7fd2\u57fa\u790e\u6a21\u7d44\uff1f","text":"<p>\u57fa\u790e\u6a21\u7d44\u662f Rust \u958b\u767c\u7684\u57fa\u77f3\uff0c\u6df1\u5165\u7406\u89e3\u5b83\u5011\u6709\u4ee5\u4e0b\u597d\u8655\uff1a</p> <ul> <li>\u7cbe\u78ba\u63a7\u5236\uff1a\u4e86\u89e3\u6a21\u7d44\u7684\u5e95\u5c64\u884c\u70ba\uff0c\u8b93\u60a8\u80fd\u7cbe\u78ba\u63a7\u5236\u7a0b\u5f0f\u884c\u70ba\u8207\u6548\u80fd\u3002</li> <li>\u81ea\u5b9a\u7fa9\u64f4\u5c55\uff1a\u638c\u63e1\u6a21\u7d44\u5be6\u73fe\u539f\u7406\uff0c\u70ba\u81ea\u5b9a\u7fa9\u5be6\u73fe\u6216\u64f4\u5c55\u529f\u80fd\u5960\u5b9a\u57fa\u790e\u3002</li> <li>\u8a3a\u65b7\u554f\u984c\uff1a\u6df1\u5165\u77e5\u8b58\u6709\u52a9\u65bc\u8abf\u8a66\u8907\u96dc\u554f\u984c\uff0c\u7279\u5225\u662f\u5728\u6d89\u53ca\u8a18\u61b6\u9ad4\u8207\u6548\u80fd\u6642\u3002</li> </ul> <p>\u672c\u7ae0\u5c07\u8d85\u8d8a\u57fa\u672c\u7528\u6cd5\uff0c\u805a\u7126\u65bc\u8a2d\u8a08\u7406\u5ff5\u8207\u9032\u968e\u61c9\u7528\u3002</p>"},{"location":"standard-library-usage/basic-modules/#_3","title":"\u6838\u5fc3\u57fa\u790e\u6a21\u7d44\u7684\u9032\u968e\u89e3\u6790","text":""},{"location":"standard-library-usage/basic-modules/#1-stdcollections","title":"1. \u57fa\u672c\u8cc7\u6599\u7d50\u69cb (<code>std::collections</code>)","text":"<p><code>std::collections</code> \u6a21\u7d44\u63d0\u4f9b\u4e86\u9ad8\u6548\u8cc7\u6599\u7d50\u69cb\uff0c\u5176\u8a2d\u8a08\u8207 Rust \u7684\u8a18\u61b6\u9ad4\u5b89\u5168\u8207\u96f6\u6210\u672c\u62bd\u8c61\u7406\u5ff5\u7dca\u5bc6\u7d50\u5408\uff1a</p> <ul> <li> <p><code>Vec&lt;T&gt;</code>\uff1a\u52d5\u614b\u9663\u5217\uff0c\u5167\u90e8\u4f7f\u7528\u6307\u6578\u589e\u9577\u7b56\u7565\u7ba1\u7406\u5bb9\u91cf\u3002</p> <ul> <li>\u5be6\u73fe\u7d30\u7bc0\uff1a<code>Vec&lt;T&gt;</code> \u901a\u904e\u4e09\u500b\u6307\u91dd (\u6307\u5411\u6578\u64da\u3001\u5bb9\u91cf\u3001\u9577\u5ea6) \u7ba1\u7406\u8a18\u61b6\u9ad4\uff0c\u7576\u5bb9\u91cf\u4e0d\u8db3\u6642\u4ee5 2 \u500d\u589e\u9577\u91cd\u65b0\u5206\u914d\u3002</li> <li>\u9032\u968e\u7528\u6cd5\uff1a\u4f7f\u7528 <code>with_capacity</code> \u9810\u5206\u914d\u5bb9\u91cf\u907f\u514d\u983b\u7e41\u91cd\u65b0\u5206\u914d\u3002   <pre><code>let mut vec = Vec::with_capacity(1000);\nfor i in 0..1000 {\n    vec.push(i);\n}\nprintln!(\"Capacity: {}\", vec.capacity()); // \u8f38\u51fa: 1000 (\u907f\u514d\u91cd\u65b0\u5206\u914d)\n</code></pre></li> <li>\u6548\u80fd\u8003\u91cf\uff1a\u6ce8\u610f <code>shrink_to_fit</code> \u53ef\u80fd\u5c0e\u81f4\u8a18\u61b6\u9ad4\u788e\u7247\uff0c\u8b39\u614e\u4f7f\u7528\u3002</li> </ul> </li> <li> <p><code>HashMap&lt;K, V&gt;</code>\uff1a\u57fa\u65bc Robin Hood \u54c8\u5e0c\u7684\u9375\u503c\u5c0d\u5b58\u5132\uff0c\u512a\u5316\u885d\u7a81\u8655\u7406\u3002</p> <ul> <li>\u5be6\u73fe\u7d30\u7bc0\uff1a\u4f7f\u7528\u958b\u653e\u5b9a\u5740\u6cd5\u8207\u53cd\u5411\u7d22\u5f15\u504f\u79fb\u4f86\u6e1b\u5c11\u885d\u7a81\u5f71\u97ff\uff0c\u8ca0\u8f09\u56e0\u5b50\u7d04\u70ba 0.9 \u6642\u64f4\u5bb9\u3002</li> <li>\u9032\u968e\u7528\u6cd5\uff1a\u81ea\u5b9a\u7fa9 <code>Hasher</code> \u4f86\u512a\u5316\u7279\u5b9a\u9375\u578b\u5225\u7684\u54c8\u5e0c\u6548\u80fd\u3002   <pre><code>use std::collections::HashMap;\nuse std::hash::{Hash, Hasher};\nuse std::collections::hash_map::DefaultHasher;\nlet mut map: HashMap&lt;&amp;str, i32&gt; = HashMap::new();\nmap.insert(\"key\", 42);\n</code></pre></li> <li>\u6548\u80fd\u8003\u91cf\uff1a\u907f\u514d\u983b\u7e41\u63d2\u5165/\u522a\u9664\u64cd\u4f5c\u5c0e\u81f4\u8ca0\u8f09\u56e0\u5b50\u6ce2\u52d5\uff0c\u5f71\u97ff\u6548\u80fd\u3002</li> </ul> </li> <li> <p><code>HashSet&lt;T&gt;</code>\uff1a\u57fa\u65bc <code>HashMap</code> \u5be6\u73fe\uff0c\u50c5\u5b58\u5132\u9375\u3002</p> <ul> <li>\u5be6\u73fe\u7d30\u7bc0\uff1a\u5167\u90e8\u5fa9\u7528 <code>HashMap</code> \u7684\u9375\u503c\u7d50\u69cb\uff0c\u503c\u90e8\u5206\u70ba\u7a7a\u7d50\u69cb\u3002</li> <li>\u9032\u968e\u7528\u6cd5\uff1a\u4f7f\u7528\u96c6\u5408\u904b\u7b97 (<code>union</code>, <code>intersection</code>) \u9032\u884c\u9ad8\u6548\u6578\u64da\u8655\u7406\u3002</li> </ul> </li> </ul> <p>\u5efa\u8b70\uff1a\u6df1\u5165\u95b1\u8b80 <code>std::collections</code> \u6e90\u78bc\uff0c\u7406\u89e3\u5176\u8a18\u61b6\u9ad4\u5e03\u5c40\u8207\u6210\u9577\u7b56\u7565\uff0c\u7279\u5225\u662f\u5c0d\u5927\u898f\u6a21\u6578\u64da\u8655\u7406\u6642\u7684\u5f71\u97ff\u3002</p>"},{"location":"standard-library-usage/basic-modules/#2-stdstr-stdstring","title":"2. \u5b57\u4e32\u8655\u7406 (<code>std::str</code> \u548c <code>std::string</code>)","text":"<p>Rust \u7684\u5b57\u4e32\u8655\u7406\u8a2d\u8a08\u8003\u616e\u4e86 UTF-8 \u7de8\u78bc\u8207\u8a18\u61b6\u9ad4\u5b89\u5168\uff1a</p> <ul> <li>\u8a2d\u8a08\u7406\u5ff5\uff1a<code>String</code> \u4f5c\u70ba\u64c1\u6709\u6240\u6709\u6b0a\u7684 UTF-8 \u7de9\u885d\u5340\uff0c<code>&amp;str</code> \u4f5c\u70ba\u4e0d\u53ef\u8b8a\u501f\u7528\u5207\u7247\uff0c\u4fdd\u8b49\u7de8\u78bc\u6b63\u78ba\u6027\u3002</li> <li>\u5be6\u73fe\u7d30\u7bc0\uff1a<code>String</code> \u5167\u90e8\u57fa\u65bc <code>Vec&lt;u8&gt;</code>\uff0c\u78ba\u4fdd UTF-8 \u908a\u754c\u6aa2\u67e5\uff0c\u5207\u7247\u64cd\u4f5c\u9700\u8655\u7406\u591a\u4f4d\u5143\u7d44\u5b57\u7b26\u3002</li> <li>\u9032\u968e\u7528\u6cd5\uff1a\u8655\u7406\u5927\u898f\u6a21\u6587\u672c\u6642\uff0c\u4f7f\u7528 <code>Cow&lt;str&gt;</code> \u907f\u514d\u4e0d\u5fc5\u8981\u8907\u88fd\u3002   <pre><code>use std::borrow::Cow;\nfn process_text(text: &amp;str) -&gt; Cow&lt;str&gt; {\n    if text.contains(\"old\") {\n        Cow::Owned(text.replace(\"old\", \"new\"))\n    } else {\n        Cow::Borrowed(text)\n    }\n}\nlet result = process_text(\"This is old text\");\nprintln!(\"{}\", result); // \u8f38\u51fa: This is new text\n</code></pre></li> <li>\u6548\u80fd\u8003\u91cf\uff1a\u907f\u514d\u983b\u7e41\u62fc\u63a5 <code>String</code> (\u5c0e\u81f4\u591a\u6b21\u5206\u914d)\uff0c\u8003\u616e\u4f7f\u7528 <code>String::with_capacity</code> \u6216 <code>format!</code> \u5b8f\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u7406\u89e3 UTF-8 \u908a\u754c\u5c0d\u5b57\u4e32\u64cd\u4f5c\u7684\u5f71\u97ff\uff0c\u7279\u5225\u662f\u5728\u8655\u7406\u975e ASCII \u6587\u672c\u6642\uff0c\u907f\u514d\u7121\u6548\u5207\u7247\u64cd\u4f5c\u3002</p>"},{"location":"standard-library-usage/basic-modules/#3-stdresult-stdoption","title":"3. \u932f\u8aa4\u8655\u7406 (<code>std::result</code> \u548c <code>std::option</code>)","text":"<p><code>Result</code> \u548c <code>Option</code> \u662f Rust \u932f\u8aa4\u8655\u7406\u7684\u6838\u5fc3\uff0c\u9ad4\u73fe\u4e86\u986f\u5f0f\u932f\u8aa4\u8655\u7406\u7684\u8a2d\u8a08\u7406\u5ff5\uff1a</p> <ul> <li>\u8a2d\u8a08\u7406\u5ff5\uff1a\u5f37\u5236\u958b\u767c\u8005\u8655\u7406\u932f\u8aa4\uff0c\u907f\u514d\u96b1\u85cf\u7570\u5e38\uff0c\u589e\u5f37\u7a0b\u5f0f\u53ef\u9760\u6027\u3002</li> <li>\u5be6\u73fe\u7d30\u7bc0\uff1a<code>Result</code> \u548c <code>Option</code> \u662f\u679a\u8209\u985e\u578b\uff0c\u7de8\u8b6f\u5668\u6703\u512a\u5316\u5176\u8a18\u61b6\u9ad4\u5e03\u5c40\uff0c\u63a5\u8fd1\u65bc\u96f6\u6210\u672c\u3002</li> <li>\u9032\u968e\u7528\u6cd5\uff1a\u4f7f\u7528 <code>and_then</code>\u3001<code>or_else</code> \u9032\u884c\u93c8\u5f0f\u932f\u8aa4\u8655\u7406\uff0c\u6e1b\u5c11\u5de2\u72c0\u4ee3\u78bc\u3002   <pre><code>fn parse_and_double(input: &amp;str) -&gt; Result&lt;i32, &amp;str&gt; {\n    input.parse::&lt;i32&gt;()\n         .map_err(|_| \"Parse error\")\n         .and_then(|n| Ok(n * 2))\n}\nprintln!(\"{:?}\", parse_and_double(\"5\")); // \u8f38\u51fa: Ok(10)\nprintln!(\"{:?}\", parse_and_double(\"abc\")); // \u8f38\u51fa: Err(\"Parse error\")\n</code></pre></li> <li>\u6548\u80fd\u8003\u91cf\uff1a\u907f\u514d\u904e\u5ea6\u4f7f\u7528 <code>unwrap_or_else</code> \u8207\u52d5\u614b\u5206\u914d\uff0c\u512a\u5148\u4f7f\u7528\u975c\u614b\u932f\u8aa4\u503c\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u81ea\u5b9a\u7fa9\u932f\u8aa4\u985e\u578b\u4e26\u5be6\u73fe <code>std::error::Error</code> \u7279\u5fb5\uff0c\u69cb\u5efa\u8907\u96dc\u61c9\u7528\u6642\u7684\u932f\u8aa4\u8655\u7406\u5c64\u6b21\u3002</p>"},{"location":"standard-library-usage/basic-modules/#4-stdtime","title":"4. \u6642\u9593\u8207\u65e5\u671f (<code>std::time</code>)","text":"<p><code>std::time</code> \u6a21\u7d44\u63d0\u4f9b\u4e86\u6642\u9593\u76f8\u95dc\u529f\u80fd\uff0c\u8a2d\u8a08\u8003\u616e\u4e86\u8de8\u5e73\u53f0\u4e00\u81f4\u6027\uff1a</p> <ul> <li>\u8a2d\u8a08\u7406\u5ff5\uff1a\u5340\u5206\u7cfb\u7d71\u6642\u9593 (<code>SystemTime</code>) \u8207\u55ae\u8abf\u6642\u9593 (<code>Instant</code>)\uff0c\u6eff\u8db3\u4e0d\u540c\u7cbe\u5ea6\u9700\u6c42\u3002</li> <li>\u5be6\u73fe\u7d30\u7bc0\uff1a<code>Instant</code> \u4fdd\u8b49\u55ae\u8abf\u905e\u589e\uff0c\u9069\u5408\u6548\u80fd\u6e2c\u91cf\uff1b<code>SystemTime</code> \u53ef\u80fd\u53d7\u7cfb\u7d71\u6642\u9418\u8abf\u6574\u5f71\u97ff\u3002</li> <li>\u9032\u968e\u7528\u6cd5\uff1a\u4f7f\u7528 <code>Instant</code> \u9032\u884c\u7cbe\u78ba\u7684\u6548\u80fd\u57fa\u6e96\u6e2c\u8a66\u3002   <pre><code>use std::time::Instant;\nlet start = Instant::now();\n// \u6a21\u64ec\u8a08\u7b97\u4efb\u52d9\nlet mut sum = 0;\nfor i in 0..1_000_000 {\n    sum += i;\n}\nlet duration = start.elapsed();\nprintln!(\"Time taken: {:?}\", duration);\nprintln!(\"Sum: {}\", sum);\n</code></pre></li> <li>\u6548\u80fd\u8003\u91cf\uff1a\u907f\u514d\u983b\u7e41\u8abf\u7528 <code>SystemTime::now()</code>\uff0c\u56e0\u5176\u53ef\u80fd\u6d89\u53ca\u7cfb\u7d71\u8abf\u7528\uff0c\u5f71\u97ff\u6548\u80fd\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u6839\u64da\u61c9\u7528\u5834\u666f\u9078\u64c7\u5408\u9069\u7684\u6642\u9593\u985e\u578b\uff0c\u7279\u5225\u662f\u5728\u9ad8\u7cbe\u5ea6\u8a08\u6642\u6216\u8de8\u5e73\u53f0\u61c9\u7528\u4e2d\u3002</p>"},{"location":"standard-library-usage/basic-modules/#_4","title":"\u6280\u8853\u6311\u6230\u8207\u89e3\u6c7a\u65b9\u6848","text":"<ul> <li>\u8a18\u61b6\u9ad4\u5b89\u5168\u9650\u5236\uff1a\u6a19\u6e96\u6a21\u7d44\u7684\u4f7f\u7528\u5fc5\u9808\u9075\u5b88\u6240\u6709\u6b0a\u8207\u501f\u7528\u898f\u5247\uff0c\u53ef\u80fd\u5c0e\u81f4 API \u4f7f\u7528\u8907\u96dc\u6027\uff1b\u89e3\u6c7a\u65b9\u6848\u662f\u5584\u7528\u501f\u7528\u6aa2\u67e5\u5668\u63d0\u793a\uff0c\u8a2d\u8a08\u5408\u7406\u7684\u6240\u6709\u6b0a\u7d50\u69cb\u3002</li> <li>\u8de8\u7248\u672c\u517c\u5bb9\u6027\uff1a\u6a19\u6e96\u51fd\u6578\u5eab\u96a8 Rust \u7248\u672c\u66f4\u65b0\uff0c\u67d0\u4e9b API \u53ef\u80fd\u68c4\u7528\uff1b\u5efa\u8b70\u9396\u5b9a Rust \u7248\u672c\u6216\u4f7f\u7528\u689d\u4ef6\u7de8\u8b6f\u3002</li> <li>\u9032\u968e\u8abf\u8a66\uff1a\u7576\u6a21\u7d44\u884c\u70ba\u4e0d\u7b26\u5408\u9810\u671f\u6642\uff0c\u6aa2\u67e5 Rust \u6e90\u78bc\u8207\u4f7f\u7528 <code>unsafe</code> \u4ee3\u78bc\u9032\u884c\u4f4e\u5c64\u8abf\u8a66\u3002</li> </ul>"},{"location":"standard-library-usage/basic-modules/#_5","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u6e90\u78bc\u95b1\u8b80\uff1a\u4e0b\u8f09 Rust \u6a19\u6e96\u51fd\u6578\u5eab\u6e90\u78bc\uff0c\u6df1\u5165\u7814\u7a76 <code>Vec</code>\u3001<code>HashMap</code> \u7b49\u7d50\u69cb\u7684\u5be6\u73fe\u7d30\u7bc0\u3002</li> <li>\u6548\u80fd\u5206\u6790\uff1a\u4f7f\u7528 <code>cargo bench</code> \u5c0d\u6a21\u7d44\u64cd\u4f5c\u9032\u884c\u57fa\u6e96\u6e2c\u8a66\uff0c\u7406\u89e3\u5176\u6548\u80fd\u7279\u6027\u3002</li> <li>\u793e\u7fa4\u8cc7\u6e90\uff1a\u53c3\u8207 Rust \u793e\u7fa4\u8a0e\u8ad6\uff0c\u5b78\u7fd2\u6a19\u6e96\u51fd\u6578\u5eab\u7684\u6700\u4f73\u5be6\u8e10\u8207\u5e38\u898b\u9677\u9631\u3002</li> </ul> <p>\u76f8\u95dc\u8cc7\u6e90\uff1a</p> <ul> <li>Rust \u6a19\u6e96\u51fd\u6578\u5eab\u6e90\u78bc (<code>https://github.com/rust-lang/rust/tree/master/library/std</code>)\uff0c\u63d0\u4f9b\u5e95\u5c64\u5be6\u73fe\u7d30\u7bc0\u3002</li> <li>Rust API \u6307\u5357 (<code>https://doc.rust-lang.org/std/</code>)\uff0c\u8a73\u7d30\u8aaa\u660e\u6bcf\u500b\u6a21\u7d44\u7684\u7528\u6cd5\u3002</li> </ul>"},{"location":"standard-library-usage/concurrency-threading/","title":"\u6a19\u6e96\u51fd\u6578\u5eab\u7684\u4f7f\u7528\uff1a\u4e26\u767c\u8207\u57f7\u884c\u7dd2\u7ba1\u7406 (\u9032\u968e)","text":"<p>Rust \u7684\u6a19\u6e96\u51fd\u6578\u5eab\u63d0\u4f9b\u4e86\u5f37\u5927\u7684\u4e26\u767c\u8207\u57f7\u884c\u7dd2\u7ba1\u7406\u5de5\u5177\uff0c\u901a\u904e\u8a18\u61b6\u9ad4\u5b89\u5168\u8207\u578b\u5225\u7cfb\u7d71\u4fdd\u8b49\u4e26\u767c\u64cd\u4f5c\u7684\u6b63\u78ba\u6027\u3002</p>"},{"location":"standard-library-usage/concurrency-threading/#_2","title":"\u70ba\u4ec0\u9ebc\u6df1\u5165\u5b78\u7fd2\u4e26\u767c\u8207\u57f7\u884c\u7dd2\u7ba1\u7406\uff1f","text":"<p>\u4e26\u767c\u8207\u57f7\u884c\u7dd2\u7ba1\u7406\u662f\u73fe\u4ee3\u61c9\u7528\u7a0b\u5f0f\u6548\u80fd\u512a\u5316\u7684\u6838\u5fc3\uff0c\u6df1\u5165\u638c\u63e1\u5b83\u5011\u6709\u4ee5\u4e0b\u597d\u8655\uff1a</p> <ul> <li>\u9ad8\u6548\u5229\u7528\u8cc7\u6e90\uff1a\u5145\u5206\u5229\u7528\u591a\u6838\u8655\u7406\u5668\uff0c\u63d0\u5347\u7a0b\u5f0f\u57f7\u884c\u6548\u7387\u3002</li> <li>\u5b89\u5168\u4e26\u767c\uff1a\u5229\u7528 Rust \u7684\u6240\u6709\u6b0a\u8207\u501f\u7528\u7cfb\u7d71\uff0c\u907f\u514d\u8cc7\u6599\u7af6\u722d\u8207\u6b7b\u9396\u3002</li> <li>\u8907\u96dc\u7cfb\u7d71\u8a2d\u8a08\uff1a\u638c\u63e1\u9032\u968e\u4e26\u767c\u6280\u8853\uff0c\u69cb\u5efa\u53ef\u9760\u7684\u5206\u4f48\u5f0f\u8207\u4e26\u884c\u7cfb\u7d71\u3002</li> </ul> <p>\u672c\u7ae0\u5c07\u805a\u7126\u65bc\u9032\u968e\u6280\u8853\u8207\u5e95\u5c64\u7d30\u7bc0\uff0c\u8d85\u8d8a\u57fa\u672c\u57f7\u884c\u7dd2\u5275\u5efa\u8207\u540c\u6b65\u3002</p>"},{"location":"standard-library-usage/concurrency-threading/#_3","title":"\u4e26\u767c\u8207\u57f7\u884c\u7dd2\u7ba1\u7406\u7684\u9032\u968e\u6280\u8853","text":""},{"location":"standard-library-usage/concurrency-threading/#1-stdthread","title":"1. \u57f7\u884c\u7dd2\u7ba1\u7406\u9032\u968e (<code>std::thread</code>)","text":"<p><code>std::thread</code> \u6a21\u7d44\u63d0\u4f9b\u4e86\u57f7\u884c\u7dd2\u5275\u5efa\u8207\u7ba1\u7406\u529f\u80fd\uff0c\u8a2d\u8a08\u8003\u616e\u4e86\u8de8\u5e73\u53f0\u6027\u8207\u5b89\u5168\u6027\uff1a</p> <ul> <li>\u5e95\u5c64\u6a5f\u5236\uff1a<code>std::thread</code> \u4f9d\u8cf4\u64cd\u4f5c\u7cfb\u7d71\u7684\u57f7\u884c\u7dd2 API\uff0cRust \u901a\u904e\u6240\u6709\u6b0a\u4fdd\u8b49\u57f7\u884c\u7dd2\u9593\u6578\u64da\u5b89\u5168\u3002</li> <li>\u9032\u968e\u7528\u6cd5\uff1a\u4f7f\u7528 <code>Builder</code> \u81ea\u5b9a\u7fa9\u57f7\u884c\u7dd2\u5c6c\u6027\uff0c\u5982\u5806\u758a\u5927\u5c0f\u8207\u540d\u7a31\u3002   <pre><code>use std::thread;\nlet builder = thread::Builder::new()\n    .name(\"worker\".to_string())\n    .stack_size(1024 * 1024); // 1MB \u5806\u758a\u5927\u5c0f\nlet handle = builder.spawn(|| {\n    println!(\"Running in thread: {}\", thread::current().name().unwrap());\n    // \u57f7\u884c\u4efb\u52d9\n    42\n}).unwrap();\nlet result = handle.join().unwrap();\nprintln!(\"Result: {}\", result); // \u8f38\u51fa: 42\n</code></pre></li> <li>\u57f7\u884c\u7dd2\u672c\u5730\u5b58\u5132\uff1a\u4f7f\u7528 <code>thread_local!</code> \u5b8f\u5be6\u73fe\u57f7\u884c\u7dd2\u672c\u5730\u6578\u64da\u3002   <pre><code>use std::thread;\nthread_local!(static COUNTER: std::cell::RefCell&lt;i32&gt; = std::cell::RefCell::new(0));\nCOUNTER.with(|c| {\n    *c.borrow_mut() += 1;\n    println!(\"Thread local counter: {}\", *c.borrow());\n});\n</code></pre></li> <li>\u6548\u80fd\u8003\u91cf\uff1a\u907f\u514d\u5275\u5efa\u904e\u591a\u57f7\u884c\u7dd2\u5c0e\u81f4\u4e0a\u4e0b\u6587\u5207\u63db\u958b\u92b7\uff0c\u8003\u616e\u57f7\u884c\u7dd2\u6c60\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u5c0d\u65bc\u9577\u671f\u904b\u884c\u4efb\u52d9\uff0c\u4f7f\u7528\u57f7\u884c\u7dd2\u6c60\u5eab\u5982 <code>threadpool</code> \u6216 <code>rayon</code>\uff0c\u6e1b\u5c11\u5275\u5efa\u8207\u92b7\u6bc0\u57f7\u884c\u7dd2\u7684\u6210\u672c\u3002</p>"},{"location":"standard-library-usage/concurrency-threading/#2-stdsync","title":"2. \u540c\u6b65\u539f\u8a9e\u9032\u968e (<code>std::sync</code>)","text":"<p><code>std::sync</code> \u6a21\u7d44\u63d0\u4f9b\u4e86\u57f7\u884c\u7dd2\u9593\u540c\u6b65\u7684\u5de5\u5177\uff0c\u4fdd\u8b49\u8cc7\u6599\u5b89\u5168\u8a2a\u554f\uff1a</p> <ul> <li>\u5e95\u5c64\u6a5f\u5236\uff1a\u540c\u6b65\u539f\u8a9e\u57fa\u65bc\u64cd\u4f5c\u7cfb\u7d71\u7684\u9396\u6a5f\u5236\u8207\u539f\u5b50\u64cd\u4f5c\uff0cRust \u901a\u904e\u578b\u5225\u7cfb\u7d71\u9632\u6b62\u8cc7\u6599\u7af6\u722d\u3002</li> <li>\u9032\u968e\u7528\u6cd5\uff1a\u4f7f\u7528 <code>RwLock</code> \u5be6\u73fe\u8b80\u5beb\u5206\u96e2\uff0c\u512a\u5316\u8b80\u591a\u5beb\u5c11\u7684\u5834\u666f\u3002   <pre><code>use std::sync::{RwLock, Arc};\nuse std::thread;\nlet data = Arc::new(RwLock::new(0));\nlet mut handles = vec![];\n// \u591a\u500b\u8b80\u8005\nfor _ in 0..5 {\n    let data = Arc::clone(&amp;data);\n    handles.push(thread::spawn(move || {\n        let read_guard = data.read().unwrap();\n        println!(\"Read value: {}\", *read_guard);\n    }));\n}\n// \u4e00\u500b\u5beb\u8005\nlet data = Arc::clone(&amp;data);\nhandles.push(thread::spawn(move || {\n    let mut write_guard = data.write().unwrap();\n    *write_guard += 1;\n    println!(\"Updated value: {}\", *write_guard);\n}));\nfor handle in handles {\n    handle.join().unwrap();\n}\n</code></pre></li> <li>\u539f\u5b50\u64cd\u4f5c\uff1a\u4f7f\u7528 <code>std::sync::atomic</code> \u9032\u884c\u7121\u9396\u4e26\u767c\u3002   <pre><code>use std::sync::atomic::{AtomicUsize, Ordering};\nuse std::thread;\nlet counter = AtomicUsize::new(0);\nlet mut handles = vec![];\nfor _ in 0..10 {\n    let counter = &amp;counter;\n    handles.push(thread::spawn(move || {\n        for _ in 0..1000 {\n            counter.fetch_add(1, Ordering::Relaxed);\n        }\n    }));\n}\nfor handle in handles {\n    handle.join().unwrap();\n}\nprintln!(\"Final count: {}\", counter.load(Ordering::Relaxed)); // \u8f38\u51fa\u63a5\u8fd1 10000\n</code></pre></li> <li>\u6548\u80fd\u8003\u91cf\uff1a\u907f\u514d\u904e\u5ea6\u4f7f\u7528\u9396\uff0c\u512a\u5148\u4f7f\u7528\u539f\u5b50\u64cd\u4f5c\u6216\u7121\u9396\u8cc7\u6599\u7d50\u69cb\uff0c\u6e1b\u5c11\u722d\u7528\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u6df1\u5165\u7814\u7a76 <code>Ordering</code> \u53c3\u6578\u5c0d\u539f\u5b50\u64cd\u4f5c\u7684\u5f71\u97ff\uff0c\u9078\u64c7\u5408\u9069\u7684\u8a18\u61b6\u9ad4\u5e8f\u4ee5\u5e73\u8861\u6548\u80fd\u8207\u6b63\u78ba\u6027\u3002</p>"},{"location":"standard-library-usage/concurrency-threading/#3-stdsyncmpsc","title":"3. \u901a\u9053\u9032\u968e (<code>std::sync::mpsc</code>)","text":"<p><code>std::sync::mpsc</code> \u63d0\u4f9b\u4e86\u591a\u751f\u7522\u8005\u55ae\u6d88\u8cbb\u8005\u901a\u9053\uff0c\u7528\u65bc\u57f7\u884c\u7dd2\u9593\u901a\u4fe1\uff1a</p> <ul> <li>\u5e95\u5c64\u6a5f\u5236\uff1a\u901a\u9053\u57fa\u65bc\u4f47\u5217\u5be6\u73fe\uff0c\u652f\u63f4\u6709\u754c\u8207\u7121\u754c\u6a21\u5f0f\uff0c\u5167\u90e8\u4f7f\u7528\u9396\u6216\u7121\u9396\u7b56\u7565\u3002</li> <li>\u9032\u968e\u7528\u6cd5\uff1a\u4f7f\u7528\u6709\u754c\u901a\u9053\u63a7\u5236\u80cc\u58d3\uff0c\u9632\u6b62\u8a18\u61b6\u9ad4\u904e\u5ea6\u6d88\u8017\u3002   <pre><code>use std::sync::mpsc;\nuse std::thread;\nlet (tx, rx) = mpsc::sync_channel(2); // \u6709\u754c\u901a\u9053\uff0c\u5bb9\u91cf\u70ba 2\nthread::spawn(move || {\n    for i in 0..5 {\n        tx.send(i).unwrap();\n        println!(\"Sent: {}\", i);\n    }\n});\nthread::sleep(std::time::Duration::from_millis(100)); // \u6a21\u64ec\u5ef6\u9072\nwhile let Ok(val) = rx.recv() {\n    println!(\"Received: {}\", val);\n}\n</code></pre></li> <li>\u6548\u80fd\u8003\u91cf\uff1a\u6709\u754c\u901a\u9053\u53ef\u80fd\u5c0e\u81f4\u963b\u585e\uff0c\u9700\u6839\u64da\u61c9\u7528\u5834\u666f\u8abf\u6574\u5bb9\u91cf\u6216\u4f7f\u7528\u975e\u963b\u585e <code>try_send</code>\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u5728\u9ad8\u541e\u5410\u91cf\u5834\u666f\u4e2d\uff0c\u8003\u616e\u4f7f\u7528\u5916\u90e8\u5eab\u5982 <code>crossbeam-channel</code>\uff0c\u652f\u63f4\u66f4\u9ad8\u6548\u7684\u7121\u9396\u901a\u9053\u3002</p>"},{"location":"standard-library-usage/concurrency-threading/#4","title":"4. \u4e26\u767c\u6a21\u5f0f\u8207\u8a2d\u8a08","text":"<p>Rust \u7684\u4e26\u767c\u5de5\u5177\u652f\u63f4\u591a\u7a2e\u8a2d\u8a08\u6a21\u5f0f\uff0c\u9032\u968e\u61c9\u7528\u6d89\u53ca\u8907\u96dc\u7cfb\u7d71\u67b6\u69cb\uff1a</p> <ul> <li>\u9032\u968e\u7528\u6cd5\uff1a\u5be6\u73fe\u5de5\u4f5c\u8005\u57f7\u884c\u7dd2\u6c60\u6a21\u5f0f\uff0c\u5206\u767c\u4efb\u52d9\u4e26\u6536\u96c6\u7d50\u679c\u3002   <pre><code>use std::sync::{mpsc, Arc, Mutex};\nuse std::thread;\nlet task_queue = Arc::new(Mutex::new(vec![1, 2, 3, 4, 5]));\nlet (tx, rx) = mpsc::channel();\nlet mut handles = vec![];\nfor _ in 0..3 {\n    let task_queue = Arc::clone(&amp;task_queue);\n    let tx = tx.clone();\n    handles.push(thread::spawn(move || {\n        while let Some(task) = task_queue.lock().unwrap().pop() {\n            let result = task * 2;\n            tx.send(result).unwrap();\n        }\n    }));\n}\ndrop(tx); // \u95dc\u9589\u767c\u9001\u7aef\nlet results: Vec&lt;i32&gt; = rx.iter().collect();\nprintln!(\"Results: {:?}\", results);\nfor handle in handles {\n    handle.join().unwrap();\n}\n</code></pre></li> <li>\u6548\u80fd\u8003\u91cf\uff1a\u907f\u514d\u904e\u5ea6\u540c\u6b65\u5c0e\u81f4\u6548\u80fd\u4e0b\u964d\uff0c\u8a2d\u8a08\u5408\u7406\u7684\u4efb\u52d9\u7c92\u5ea6\u8207\u540c\u6b65\u7bc4\u570d\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u5b78\u7fd2\u4e26\u767c\u8a2d\u8a08\u6a21\u5f0f\uff0c\u5982 Actor \u6a21\u578b\uff0c\u7d50\u5408 Rust \u5de5\u5177\u5be6\u73fe\u53ef\u9760\u7684\u4e26\u767c\u7cfb\u7d71\u3002</p>"},{"location":"standard-library-usage/concurrency-threading/#_4","title":"\u6280\u8853\u6311\u6230\u8207\u89e3\u6c7a\u65b9\u6848","text":"<ul> <li>\u6b7b\u9396\u8207\u722d\u7528\uff1a\u904e\u5ea6\u4f7f\u7528\u9396\u53ef\u80fd\u5c0e\u81f4\u6b7b\u9396\u6216\u6548\u80fd\u4e0b\u964d\uff1b\u89e3\u6c7a\u65b9\u6848\u662f\u4f7f\u7528\u9396\u5c64\u6b21\u8a2d\u8a08\u8207\u722d\u7528\u5206\u6790\u5de5\u5177\u3002</li> <li>\u8cc7\u6599\u7af6\u722d\uff1a\u96d6\u7136 Rust \u7de8\u8b6f\u5668\u9632\u6b62\u5927\u591a\u6578\u8cc7\u6599\u7af6\u722d\uff0c\u4f46\u52d5\u614b\u884c\u70ba\u53ef\u80fd\u5f15\u5165\u554f\u984c\uff1b\u5efa\u8b70\u4f7f\u7528 <code>cargo miri</code> \u6aa2\u6e2c\u6f5b\u5728\u554f\u984c\u3002</li> <li>\u57f7\u884c\u7dd2\u8abf\u5ea6\uff1a\u64cd\u4f5c\u7cfb\u7d71\u8abf\u5ea6\u53ef\u80fd\u5c0e\u81f4\u4e0d\u53ef\u9810\u6e2c\u7684\u6548\u80fd\uff1b\u53ef\u7d50\u5408 <code>affinity</code> \u5eab\u63a7\u5236\u57f7\u884c\u7dd2\u7d81\u5b9a\u3002</li> </ul>"},{"location":"standard-library-usage/concurrency-threading/#_5","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u6548\u80fd\u5206\u6790\uff1a\u4f7f\u7528 <code>perf</code> \u6216 <code>flamegraph</code> \u5206\u6790\u4e26\u767c\u7a0b\u5f0f\u7684\u722d\u7528\u8207\u74f6\u9838\u3002</li> <li>\u6e90\u78bc\u95b1\u8b80\uff1a\u7814\u7a76 <code>std::sync</code> \u8207 <code>std::thread</code> \u6e90\u78bc\uff0c\u7406\u89e3\u5176\u8207\u64cd\u4f5c\u7cfb\u7d71\u7684\u4ea4\u4e92\u3002</li> <li>\u9032\u968e\u5be6\u8e10\uff1a\u5be6\u73fe\u81ea\u5b9a\u7fa9\u540c\u6b65\u539f\u8a9e\u6216\u57f7\u884c\u7dd2\u6c60\uff0c\u61c9\u7528\u65bc\u5be6\u969b\u5c08\u6848\uff0c\u5982\u4f3a\u670d\u5668\u61c9\u7528\u3002</li> </ul> <p>\u76f8\u95dc\u8cc7\u6e90\uff1a</p> <ul> <li>Rust \u6a19\u6e96\u51fd\u6578\u5eab\u6e90\u78bc (<code>https://github.com/rust-lang/rust/tree/master/library/std/src/thread</code>)\uff0c\u6df1\u5165\u57f7\u884c\u7dd2\u7ba1\u7406\u5be6\u73fe\u3002</li> <li><code>rayon</code> \u5eab\u6587\u6a94\uff0c\u7528\u65bc\u4e26\u884c\u8a08\u7b97\u8207\u57f7\u884c\u7dd2\u6c60\u7ba1\u7406\u3002</li> <li><code>crossbeam</code> \u5eab\u6587\u6a94\uff0c\u63d0\u4f9b\u9ad8\u6548\u7684\u7121\u9396\u8cc7\u6599\u7d50\u69cb\u8207\u901a\u9053\u3002</li> </ul>"},{"location":"standard-library-usage/data-processing/","title":"\u6a19\u6e96\u51fd\u6578\u5eab\u7684\u4f7f\u7528\uff1a\u8cc7\u6599\u8655\u7406\u8207\u64cd\u4f5c (\u9032\u968e)","text":"<p>Rust \u7684\u6a19\u6e96\u51fd\u6578\u5eab\u63d0\u4f9b\u4e86\u5f37\u5927\u7684\u8cc7\u6599\u8655\u7406\u5de5\u5177\uff0c\u7279\u5225\u662f\u901a\u904e\u8fed\u4ee3\u5668\u8207\u96c6\u5408\u64cd\u4f5c\u5be6\u73fe\u9ad8\u6548\u4e14\u5b89\u5168\u7684\u6578\u64da\u64cd\u4f5c\u3002</p>"},{"location":"standard-library-usage/data-processing/#_2","title":"\u70ba\u4ec0\u9ebc\u6df1\u5165\u5b78\u7fd2\u8cc7\u6599\u8655\u7406\u8207\u64cd\u4f5c\uff1f","text":"<p>\u8cc7\u6599\u8655\u7406\u662f\u7a0b\u5f0f\u8a2d\u8a08\u7684\u6838\u5fc3\uff0c\u6df1\u5165\u638c\u63e1\u6a19\u6e96\u51fd\u6578\u5eab\u7684\u8cc7\u6599\u8655\u7406\u529f\u80fd\u6709\u4ee5\u4e0b\u597d\u8655\uff1a</p> <ul> <li>\u6975\u81f4\u6548\u80fd\uff1a\u7406\u89e3\u5e95\u5c64\u6a5f\u5236\u8207\u512a\u5316\u7b56\u7565\uff0c\u8b93\u60a8\u5728\u8655\u7406\u5927\u898f\u6a21\u6578\u64da\u6642\u7372\u5f97\u6700\u4f73\u6548\u80fd\u3002</li> <li>\u81ea\u5b9a\u7fa9\u80fd\u529b\uff1a\u638c\u63e1\u9032\u968e\u6280\u8853\uff0c\u8a2d\u8a08\u7b26\u5408\u7279\u5b9a\u9700\u6c42\u7684\u8cc7\u6599\u8655\u7406\u7ba1\u9053\u3002</li> <li>\u5b89\u5168\u8207\u53ef\u9760\uff1a\u5229\u7528 Rust \u7684\u578b\u5225\u7cfb\u7d71\u8207\u6240\u6709\u6b0a\u6a5f\u5236\uff0c\u69cb\u5efa\u7121\u6f0f\u6d1e\u7684\u8cc7\u6599\u8655\u7406\u908f\u8f2f\u3002</li> </ul> <p>\u672c\u7ae0\u5c07\u805a\u7126\u65bc\u9032\u968e\u6280\u8853\u8207\u5e95\u5c64\u7d30\u7bc0\uff0c\u8d85\u8d8a\u57fa\u672c\u64cd\u4f5c\u3002</p>"},{"location":"standard-library-usage/data-processing/#_3","title":"\u8cc7\u6599\u8655\u7406\u7684\u9032\u968e\u6280\u8853","text":"<p>\u4ee5\u4e0b\u662f Rust \u6a19\u6e96\u51fd\u6578\u5eab\u4e2d\u7528\u65bc\u8cc7\u6599\u8655\u7406\u7684\u6838\u5fc3\u5de5\u5177\u8207\u9032\u968e\u61c9\u7528\uff1a</p>"},{"location":"standard-library-usage/data-processing/#1-stditer","title":"1. \u8fed\u4ee3\u5668\u9032\u968e (<code>std::iter</code>)","text":"<p>\u8fed\u4ee3\u5668\u662f Rust \u8cc7\u6599\u8655\u7406\u7684\u6838\u5fc3\uff0c\u5176\u60f0\u6027\u6c42\u503c\u8207\u96f6\u6210\u672c\u62bd\u8c61\u7279\u6027\u4f7f\u5176\u6210\u70ba\u9ad8\u6548\u5de5\u5177\uff1a</p> <ul> <li>\u5e95\u5c64\u6a5f\u5236\uff1a\u8fed\u4ee3\u5668\u57fa\u65bc <code>Iterator</code> \u7279\u5fb5\uff0c\u7de8\u8b6f\u5668\u6703\u5c07\u5176\u64cd\u4f5c\u5c55\u958b\u70ba\u9ad8\u6548\u8ff4\u5708\uff0c\u7121\u904b\u884c\u6642\u958b\u92b7\u3002</li> <li>\u9032\u968e\u7528\u6cd5\uff1a\u4f7f\u7528 <code>zip</code>\u3001<code>chain</code> \u8207 <code>flat_map</code> \u69cb\u5efa\u8907\u96dc\u8655\u7406\u7ba1\u9053\u3002   <pre><code>let vec1 = vec![1, 2, 3];\nlet vec2 = vec![4, 5, 6];\nlet paired: Vec&lt;(i32, i32)&gt; = vec1.into_iter().zip(vec2).collect();\nprintln!(\"{:?}\", paired); // \u8f38\u51fa: [(1, 4), (2, 5), (3, 6)]\n\nlet nested = vec![vec![1, 2], vec![3, 4]];\nlet flattened: Vec&lt;i32&gt; = nested.into_iter().flatten().collect();\nprintln!(\"{:?}\", flattened); // \u8f38\u51fa: [1, 2, 3, 4]\n</code></pre></li> <li>\u81ea\u5b9a\u7fa9\u8fed\u4ee3\u5668\uff1a\u5be6\u73fe <code>Iterator</code> \u7279\u5fb5\uff0c\u5275\u5efa\u81ea\u5b9a\u7fa9\u8fed\u4ee3\u908f\u8f2f\u3002   <pre><code>struct Counter {\n    count: i32,\n    max: i32,\n}\nimpl Iterator for Counter {\n    type Item = i32;\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if self.count &lt; self.max {\n            self.count += 1;\n            Some(self.count)\n        } else {\n            None\n        }\n    }\n}\nlet counter = Counter { count: 0, max: 5 };\nlet result: Vec&lt;i32&gt; = counter.collect();\nprintln!(\"{:?}\", result); // \u8f38\u51fa: [1, 2, 3, 4, 5]\n</code></pre></li> <li>\u6548\u80fd\u8003\u91cf\uff1a\u907f\u514d\u4e0d\u5fc5\u8981\u7684 <code>collect()</code> \u64cd\u4f5c\uff0c\u512a\u5148\u4f7f\u7528\u60f0\u6027\u6c42\u503c\uff0c\u6e1b\u5c11\u8a18\u61b6\u9ad4\u4f7f\u7528\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u6df1\u5165\u7814\u7a76 <code>Iterator</code> \u7684\u9069\u914d\u5668\u8207\u6d88\u8cbb\u8005\uff0c\u7406\u89e3\u5176\u7de8\u8b6f\u6642\u5c55\u958b\u6a5f\u5236\uff0c\u512a\u5316\u5927\u6578\u64da\u8655\u7406\u3002</p>"},{"location":"standard-library-usage/data-processing/#2-stdcollections","title":"2. \u96c6\u5408\u64cd\u4f5c\u512a\u5316 (<code>std::collections</code>)","text":"<p>Rust \u7684\u96c6\u5408\u985e\u578b\u63d0\u4f9b\u4e86\u8c50\u5bcc\u7684\u64cd\u4f5c\uff0c\u5176\u5be6\u73fe\u91dd\u5c0d\u6548\u80fd\u8207\u5b89\u5168\u9032\u884c\u4e86\u512a\u5316\uff1a</p> <ul> <li><code>Vec&lt;T&gt;</code> \u9032\u968e\u64cd\u4f5c\uff1a\u4f7f\u7528 <code>drain</code> \u8207 <code>splice</code> \u9032\u884c\u9ad8\u6548\u6279\u91cf\u64cd\u4f5c\u3002   <pre><code>let mut vec = vec![1, 2, 3, 4, 5];\nlet drained: Vec&lt;i32&gt; = vec.drain(1..3).collect(); // \u79fb\u9664\u4e26\u8fd4\u56de\u7bc4\u570d\u5167\u5143\u7d20\nprintln!(\"Drained: {:?}\", drained); // \u8f38\u51fa: [2, 3]\nprintln!(\"Remaining: {:?}\", vec); // \u8f38\u51fa: [1, 4, 5]\n</code></pre></li> <li><code>HashMap&lt;K, V&gt;</code> \u9032\u968e\u64cd\u4f5c\uff1a\u4f7f\u7528 <code>entry</code> API \u907f\u514d\u91cd\u8907\u67e5\u627e\u3002   <pre><code>use std::collections::HashMap;\nlet mut map = HashMap::new();\nmap.entry(\"key\")\n   .or_insert_with(|| {\n       println!(\"Computing value\");\n       42\n   });\nprintln!(\"{:?}\", map); // \u8f38\u51fa: {\"key\": 42}\n</code></pre></li> <li>\u6548\u80fd\u8003\u91cf\uff1a<code>HashMap</code> \u7684\u8ca0\u8f09\u56e0\u5b50\u8207\u91cd\u65b0\u5206\u914d\u7b56\u7565\u53ef\u80fd\u5f71\u97ff\u6548\u80fd\uff0c\u5efa\u8b70\u9810\u5206\u914d\u5bb9\u91cf\u6216\u4f7f\u7528\u66ff\u4ee3\u7d50\u69cb\u5982 <code>BTreeMap</code>\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u6839\u64da\u6578\u64da\u5206\u4f48\u8207\u64cd\u4f5c\u6a21\u5f0f\u9078\u64c7\u5408\u9069\u96c6\u5408\uff0c\u5206\u6790\u5176\u5e95\u5c64\u8a18\u61b6\u9ad4\u5e03\u5c40\u8207\u6642\u9593\u8907\u96dc\u5ea6\u3002</p>"},{"location":"standard-library-usage/data-processing/#3-stdslice","title":"3. \u5207\u7247\u64cd\u4f5c\u9032\u968e (<code>std::slice</code>)","text":"<p>\u5207\u7247\u63d0\u4f9b\u4e86\u5c0d\u6578\u64da\u7684\u9ad8\u6548\u8a2a\u554f\u8207\u64cd\u4f5c\uff0c\u7279\u5225\u9069\u5408\u96f6\u8907\u88fd\u5834\u666f\uff1a</p> <ul> <li>\u5e95\u5c64\u6a5f\u5236\uff1a\u5207\u7247\u662f\u80d6\u6307\u91dd\uff0c\u5305\u542b\u6578\u64da\u6307\u91dd\u8207\u9577\u5ea6\uff0c\u4fdd\u8b49\u908a\u754c\u6aa2\u67e5\u7684\u5b89\u5168\u6027\u3002</li> <li>\u9032\u968e\u7528\u6cd5\uff1a\u4f7f\u7528 <code>windows</code> \u8207 <code>chunks_exact</code> \u8655\u7406\u6ed1\u52d5\u7a97\u53e3\u8207\u6279\u91cf\u64cd\u4f5c\u3002   <pre><code>let arr = [1, 2, 3, 4, 5];\nlet windows: Vec&lt;&amp;[i32]&gt; = arr.windows(3).collect();\nprintln!(\"{:?}\", windows); // \u8f38\u51fa: [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nlet chunks: Vec&lt;&amp;[i32]&gt; = arr.chunks_exact(2).collect();\nprintln!(\"{:?}\", chunks); // \u8f38\u51fa: [[1, 2], [3, 4]]\n</code></pre></li> <li>\u6548\u80fd\u8003\u91cf\uff1a\u5207\u7247\u64cd\u4f5c\u907f\u514d\u6578\u64da\u8907\u88fd\uff0c\u4f46\u983b\u7e41\u5207\u7247\u53ef\u80fd\u5c0e\u81f4\u7de9\u5b58\u672a\u547d\u4e2d\uff0c\u5f71\u97ff\u6548\u80fd\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u5728\u8655\u7406\u5927\u6578\u64da\u6642\uff0c\u512a\u5148\u4f7f\u7528\u5207\u7247\u64cd\u4f5c\uff0c\u7d50\u5408 <code>unsafe</code> \u4ee3\u78bc\u9032\u884c\u6975\u81f4\u512a\u5316 (\u9700\u8b39\u614e)\u3002</p>"},{"location":"standard-library-usage/data-processing/#4","title":"4. \u8cc7\u6599\u8f49\u63db\u8207\u5e8f\u5217\u5316","text":"<p>Rust \u6a19\u6e96\u51fd\u6578\u5eab\u652f\u63f4\u9ad8\u6548\u7684\u8cc7\u6599\u8f49\u63db\u8207\u683c\u5f0f\u5316\uff0c\u9032\u968e\u61c9\u7528\u6d89\u53ca\u5e8f\u5217\u5316\u8207\u81ea\u5b9a\u7fa9\u8f49\u63db\uff1a</p> <ul> <li>\u9032\u968e\u7528\u6cd5\uff1a\u4f7f\u7528 <code>std::mem</code> \u9032\u884c\u4f4e\u5c64\u8a18\u61b6\u9ad4\u64cd\u4f5c\u8207\u578b\u5225\u8f49\u63db\u3002   <pre><code>use std::mem;\nlet num: i32 = 42;\nlet bytes: [u8; 4] = unsafe { mem::transmute(num.to_le()) };\nprintln!(\"{:?}\", bytes); // \u8f38\u51fa: \u5c0f\u7aef\u5e8f\u7684\u4f4d\u5143\u7d44\u8868\u793a\n</code></pre></li> <li>\u5e8f\u5217\u5316\u57fa\u790e\uff1a\u96d6\u7136\u6a19\u6e96\u51fd\u6578\u5eab\u4e0d\u76f4\u63a5\u63d0\u4f9b\u5e8f\u5217\u5316\uff0c\u4f46\u53ef\u7d50\u5408 <code>std::fmt</code> \u8207\u5916\u90e8\u5eab\u3002</li> <li>\u6548\u80fd\u8003\u91cf\uff1a\u907f\u514d\u983b\u7e41\u578b\u5225\u8f49\u63db\u5c0e\u81f4\u8a18\u61b6\u9ad4\u5c0d\u9f4a\u554f\u984c\uff0c\u512a\u5148\u4f7f\u7528\u5b89\u5168 API\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u5b78\u7fd2 <code>serde</code> \u7b49\u5916\u90e8\u5eab\uff0c\u7d50\u5408\u6a19\u6e96\u51fd\u6578\u5eab\u5be6\u73fe\u9ad8\u6548\u5e8f\u5217\u5316\u8207\u53cd\u5e8f\u5217\u5316\u3002</p>"},{"location":"standard-library-usage/data-processing/#_4","title":"\u6280\u8853\u6311\u6230\u8207\u89e3\u6c7a\u65b9\u6848","text":"<ul> <li>\u60f0\u6027\u6c42\u503c\u8907\u96dc\u6027\uff1a\u8fed\u4ee3\u5668\u7684\u60f0\u6027\u6c42\u503c\u53ef\u80fd\u5c0e\u81f4\u908f\u8f2f\u96e3\u4ee5\u8abf\u8a66\uff1b\u89e3\u6c7a\u65b9\u6848\u662f\u4f7f\u7528 <code>dbg!</code> \u5b8f\u6216\u4e2d\u9593 <code>collect()</code> \u6aa2\u67e5\u72c0\u614b\u3002</li> <li>\u8a18\u61b6\u9ad4\u5206\u914d\u554f\u984c\uff1a\u5927\u898f\u6a21\u8cc7\u6599\u8655\u7406\u53ef\u80fd\u5c0e\u81f4\u983b\u7e41\u5206\u914d\uff1b\u5efa\u8b70\u4f7f\u7528\u9810\u5206\u914d\u8207\u6d41\u5f0f\u8655\u7406\u3002</li> <li>\u4e26\u767c\u8cc7\u6599\u8655\u7406\uff1a\u6a19\u6e96\u51fd\u6578\u5eab\u8fed\u4ee3\u5668\u4e0d\u76f4\u63a5\u652f\u63f4\u4e26\u884c\uff1b\u53ef\u7d50\u5408 <code>rayon</code> \u5eab\u5be6\u73fe\u4e26\u884c\u8fed\u4ee3\u3002</li> </ul>"},{"location":"standard-library-usage/data-processing/#_5","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u57fa\u6e96\u6e2c\u8a66\uff1a\u4f7f\u7528 <code>criterion</code> \u5eab\u5c0d\u4e0d\u540c\u8cc7\u6599\u8655\u7406\u7b56\u7565\u9032\u884c\u6548\u80fd\u6bd4\u8f03\u3002</li> <li>\u6e90\u78bc\u5206\u6790\uff1a\u95b1\u8b80 <code>std::iter</code> \u8207 <code>std::collections</code> \u6e90\u78bc\uff0c\u7406\u89e3\u5176\u512a\u5316\u7b56\u7565\u3002</li> <li>\u9032\u968e\u5be6\u8e10\uff1a\u5be6\u73fe\u81ea\u5b9a\u7fa9\u8fed\u4ee3\u5668\u8207\u96c6\u5408\uff0c\u61c9\u7528\u65bc\u5be6\u969b\u5c08\u6848\uff0c\u89e3\u6c7a\u5927\u898f\u6a21\u6578\u64da\u554f\u984c\u3002</li> </ul> <p>\u76f8\u95dc\u8cc7\u6e90\uff1a</p> <ul> <li>Rust \u6a19\u6e96\u51fd\u6578\u5eab\u6e90\u78bc (<code>https://github.com/rust-lang/rust/tree/master/library/std/src/iter</code>)\uff0c\u6df1\u5165\u8fed\u4ee3\u5668\u5be6\u73fe\u3002</li> <li><code>rayon</code> \u5eab\u6587\u6a94\uff0c\u7528\u65bc\u4e26\u884c\u8cc7\u6599\u8655\u7406\u3002</li> </ul>"},{"location":"standard-library-usage/file-io-operations/","title":"\u6a19\u6e96\u51fd\u6578\u5eab\u7684\u4f7f\u7528\uff1a\u6a94\u6848\u8207 I/O \u64cd\u4f5c (\u9032\u968e)","text":"<p>Rust \u7684\u6a19\u6e96\u51fd\u6578\u5eab\u63d0\u4f9b\u4e86\u5f37\u5927\u7684\u6a94\u6848\u8207\u8f38\u5165\u8f38\u51fa (I/O) \u64cd\u4f5c\u529f\u80fd\uff0c\u652f\u63f4\u5f9e\u57fa\u672c\u6a94\u6848\u8b80\u5beb\u5230\u8907\u96dc\u7684\u6d41\u5f0f\u8655\u7406\u3002</p>"},{"location":"standard-library-usage/file-io-operations/#io_1","title":"\u70ba\u4ec0\u9ebc\u6df1\u5165\u5b78\u7fd2\u6a94\u6848\u8207 I/O \u64cd\u4f5c\uff1f","text":"<p>\u6a94\u6848\u8207 I/O \u64cd\u4f5c\u662f\u7cfb\u7d71\u7d1a\u7a0b\u5f0f\u8a2d\u8a08\u7684\u57fa\u77f3\uff0c\u6df1\u5165\u638c\u63e1\u5b83\u5011\u6709\u4ee5\u4e0b\u597d\u8655\uff1a</p> <ul> <li>\u9ad8\u6548\u8655\u7406\uff1a\u7406\u89e3\u5e95\u5c64\u6a5f\u5236\u8207\u512a\u5316\u6280\u8853\uff0c\u5be6\u73fe\u5927\u898f\u6a21\u6578\u64da\u7684\u9ad8\u6548\u8b80\u5beb\u3002</li> <li>\u8cc7\u6e90\u7ba1\u7406\uff1a\u7cbe\u78ba\u63a7\u5236\u6a94\u6848\u8207 I/O \u8cc7\u6e90\uff0c\u907f\u514d\u8a18\u61b6\u9ad4\u6d29\u6f0f\u8207\u6548\u80fd\u74f6\u9838\u3002</li> <li>\u8de8\u5e73\u53f0\u80fd\u529b\uff1a\u638c\u63e1\u8de8\u5e73\u53f0\u5dee\u7570\u8207\u89e3\u6c7a\u65b9\u6848\uff0c\u69cb\u5efa\u53ef\u9760\u7684\u61c9\u7528\u7a0b\u5f0f\u3002</li> </ul> <p>\u672c\u7ae0\u5c07\u805a\u7126\u65bc\u9032\u968e\u6280\u8853\u8207\u5e95\u5c64\u7d30\u7bc0\uff0c\u8d85\u8d8a\u57fa\u672c\u8b80\u5beb\u64cd\u4f5c\u3002</p>"},{"location":"standard-library-usage/file-io-operations/#io_2","title":"\u6a94\u6848\u8207 I/O \u64cd\u4f5c\u7684\u9032\u968e\u6280\u8853","text":""},{"location":"standard-library-usage/file-io-operations/#1-stdfs","title":"1. \u6a94\u6848\u64cd\u4f5c\u9032\u968e (<code>std::fs</code>)","text":"<p><code>std::fs</code> \u6a21\u7d44\u63d0\u4f9b\u4e86\u6a94\u6848\u7cfb\u7d71\u64cd\u4f5c\u7684\u57fa\u790e\uff0c\u5176\u8a2d\u8a08\u8003\u616e\u4e86\u5b89\u5168\u8207\u8de8\u5e73\u53f0\u6027\uff1a</p> <ul> <li>\u5e95\u5c64\u6a5f\u5236\uff1a<code>std::fs</code> \u4f9d\u8cf4\u64cd\u4f5c\u7cfb\u7d71\u7684\u6a94\u6848\u7cfb\u7d71 API\uff0cRust \u901a\u904e\u62bd\u8c61\u5c64\u4fdd\u8b49\u8de8\u5e73\u53f0\u4e00\u81f4\u6027\u3002</li> <li>\u9032\u968e\u7528\u6cd5\uff1a\u4f7f\u7528 <code>OpenOptions</code> \u81ea\u5b9a\u7fa9\u6a94\u6848\u6253\u958b\u6a21\u5f0f\uff0c\u652f\u63f4\u9032\u968e\u63a7\u5236\u3002   <pre><code>use std::fs::{File, OpenOptions};\nuse std::io::Write;\nlet mut file = OpenOptions::new()\n    .write(true)\n    .create(true)\n    .append(true) // \u8ffd\u52a0\u6a21\u5f0f\n    .open(\"log.txt\")\n    .unwrap();\nfile.write_all(b\"Appending new log\\n\").unwrap();\nprintln!(\"Data appended to log.txt\");\n</code></pre></li> <li>\u6a94\u6848\u9396\u5b9a\uff1a\u96d6\u7136\u6a19\u6e96\u51fd\u6578\u5eab\u672a\u76f4\u63a5\u63d0\u4f9b\u6a94\u6848\u9396\u5b9a\uff0c\u4f46\u53ef\u901a\u904e\u5e73\u53f0\u7279\u5b9a\u64f4\u5c55\u5be6\u73fe\u3002</li> <li>\u6548\u80fd\u8003\u91cf\uff1a\u907f\u514d\u983b\u7e41\u958b\u95dc\u6a94\u6848\uff0c\u512a\u5148\u4f7f\u7528\u7de9\u885d I/O \u6e1b\u5c11\u7cfb\u7d71\u8abf\u7528\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u5c0d\u65bc\u5927\u898f\u6a21\u6a94\u6848\u64cd\u4f5c\uff0c\u7d50\u5408 <code>std::fs::File</code> \u8207\u7de9\u885d\u5c64\uff0c\u6e1b\u5c11\u7cfb\u7d71\u8abf\u7528\u958b\u92b7\u3002</p>"},{"location":"standard-library-usage/file-io-operations/#2-stdio","title":"2. \u8f38\u5165\u8f38\u51fa\u6d41\u9032\u968e (<code>std::io</code>)","text":"<p><code>std::io</code> \u6a21\u7d44\u63d0\u4f9b\u4e86\u901a\u7528\u7684 I/O \u62bd\u8c61\uff0c\u652f\u63f4\u6a94\u6848\u3001\u6a19\u6e96\u8f38\u5165\u8f38\u51fa\u8207\u81ea\u5b9a\u7fa9\u6d41\uff1a</p> <ul> <li>\u5e95\u5c64\u6a5f\u5236\uff1a<code>std::io</code> \u57fa\u65bc\u7279\u5fb5 (<code>Read</code>\u3001<code>Write</code>\u3001<code>Seek</code>)\uff0c\u5141\u8a31\u81ea\u5b9a\u7fa9\u5be6\u73fe\uff0c\u5167\u90e8\u4f7f\u7528\u64cd\u4f5c\u7cfb\u7d71\u7684\u975e\u963b\u585e\u8207\u963b\u585e\u6a21\u5f0f\u3002</li> <li>\u9032\u968e\u7528\u6cd5\uff1a\u4f7f\u7528 <code>BufReader</code> \u8207 <code>BufWriter</code> \u512a\u5316\u5927\u898f\u6a21\u6578\u64da\u8655\u7406\u3002   <pre><code>use std::fs::File;\nuse std::io::{BufReader, BufWriter, Read, Write};\n// \u8b80\u53d6\u5927\u6a94\u6848\nlet file = File::open(\"large_file.txt\").unwrap();\nlet mut reader = BufReader::with_capacity(1024 * 1024, file); // 1MB \u7de9\u885d\nlet mut contents = Vec::new();\nreader.read_to_end(&amp;mut contents).unwrap();\n// \u5beb\u5165\u5927\u6a94\u6848\nlet file = File::create(\"output.txt\").unwrap();\nlet mut writer = BufWriter::with_capacity(1024 * 1024, file);\nwriter.write_all(&amp;contents).unwrap();\nwriter.flush().unwrap();\nprintln!(\"Data written with buffered I/O\");\n</code></pre></li> <li>\u81ea\u5b9a\u7fa9\u6d41\uff1a\u5be6\u73fe <code>Read</code> \u8207 <code>Write</code> \u7279\u5fb5\uff0c\u5275\u5efa\u81ea\u5b9a\u7fa9 I/O \u6d41\u3002   <pre><code>use std::io::{Read, Result};\nstruct CustomReader {\n    data: Vec&lt;u8&gt;,\n    pos: usize,\n}\nimpl Read for CustomReader {\n    fn read(&amp;mut self, buf: &amp;mut [u8]) -&gt; Result&lt;usize&gt; {\n        let bytes_to_read = buf.len().min(self.data.len() - self.pos);\n        buf[..bytes_to_read].copy_from_slice(&amp;self.data[self.pos..self.pos + bytes_to_read]);\n        self.pos += bytes_to_read;\n        Ok(bytes_to_read)\n    }\n}\nlet mut reader = CustomReader { data: vec![1, 2, 3], pos: 0 };\nlet mut buffer = [0; 2];\nreader.read(&amp;mut buffer).unwrap();\nprintln!(\"Read: {:?}\", buffer); // \u8f38\u51fa: [1, 2]\n</code></pre></li> <li>\u6548\u80fd\u8003\u91cf\uff1a\u7de9\u885d\u5927\u5c0f\u9700\u6839\u64da\u786c\u9ad4\u8207\u61c9\u7528\u5834\u666f\u8abf\u6574\uff0c\u904e\u5927\u53ef\u80fd\u5c0e\u81f4\u8a18\u61b6\u9ad4\u6d6a\u8cbb\uff0c\u904e\u5c0f\u5247\u589e\u52a0\u7cfb\u7d71\u8abf\u7528\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u6df1\u5165\u7814\u7a76 <code>std::io</code> \u7684\u7279\u5fb5\u7cfb\u7d71\uff0c\u7d50\u5408\u81ea\u5b9a\u7fa9\u6d41\u5be6\u73fe\u7279\u5b9a\u5834\u666f\u7684 I/O \u9700\u6c42\u3002</p>"},{"location":"standard-library-usage/file-io-operations/#3-stdpath","title":"3. \u8def\u5f91\u8655\u7406\u9032\u968e (<code>std::path</code>)","text":"<p><code>std::path</code> \u6a21\u7d44\u63d0\u4f9b\u4e86\u8de8\u5e73\u53f0\u7684\u8def\u5f91\u64cd\u4f5c\uff0c\u8a2d\u8a08\u8003\u616e\u4e86\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7d71\u7684\u8def\u5f91\u8a9e\u6cd5\uff1a</p> <ul> <li>\u5e95\u5c64\u6a5f\u5236\uff1a<code>Path</code> \u8207 <code>PathBuf</code> \u5167\u90e8\u8655\u7406\u64cd\u4f5c\u7cfb\u7d71\u7279\u5b9a\u7684\u5206\u9694\u7b26\u8207\u7de8\u78bc\uff0c\u4fdd\u8b49\u4e00\u81f4\u6027\u3002</li> <li>\u9032\u968e\u7528\u6cd5\uff1a\u8655\u7406\u76f8\u5c0d\u8def\u5f91\u8207\u898f\u7bc4\u5316\uff0c\u907f\u514d\u8def\u5f91\u904d\u6b77\u6f0f\u6d1e\u3002   <pre><code>use std::path::{Path, PathBuf};\nlet path = Path::new(\"../dir/./file.txt\");\nlet canonical = path.canonicalize().unwrap_or_else(|_| PathBuf::from(\"Invalid path\"));\nprintln!(\"Canonical path: {:?}\", canonical);\n</code></pre></li> <li>\u6548\u80fd\u8003\u91cf\uff1a\u8def\u5f91\u64cd\u4f5c\u6d89\u53ca\u5b57\u4e32\u8655\u7406\u8207\u7cfb\u7d71\u8abf\u7528\uff0c\u907f\u514d\u983b\u7e41\u8abf\u7528 <code>canonicalize</code> \u7b49\u9ad8\u6210\u672c\u65b9\u6cd5\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u5728\u8655\u7406\u7528\u6236\u8f38\u5165\u8def\u5f91\u6642\uff0c\u59cb\u7d42\u9032\u884c\u898f\u7bc4\u5316\u8207\u5b89\u5168\u6027\u6aa2\u67e5\uff0c\u9632\u6b62\u8def\u5f91\u904d\u6b77\u653b\u64ca\u3002</p>"},{"location":"standard-library-usage/file-io-operations/#4","title":"4. \u932f\u8aa4\u8655\u7406\u8207\u8cc7\u6e90\u7ba1\u7406","text":"<p>\u6a94\u6848\u8207 I/O \u64cd\u4f5c\u6d89\u53ca\u5927\u91cf\u6f5b\u5728\u932f\u8aa4\uff0cRust \u63d0\u4f9b\u4e86\u5f37\u5927\u7684\u932f\u8aa4\u8655\u7406\u5de5\u5177\uff1a</p> <ul> <li>\u9032\u968e\u7528\u6cd5\uff1a\u4f7f\u7528 <code>std::io::Error</code> \u8207\u81ea\u5b9a\u7fa9\u932f\u8aa4\u985e\u578b\u9032\u884c\u7d30\u7c92\u5ea6\u932f\u8aa4\u8655\u7406\u3002   <pre><code>use std::fs::File;\nuse std::io::{self, Read};\nfn read_file(path: &amp;str) -&gt; io::Result&lt;Vec&lt;u8&gt;&gt; {\n    let mut file = File::open(path)?;\n    let mut contents = Vec::new();\n    file.read_to_end(&amp;mut contents)?;\n    Ok(contents)\n}\nmatch read_file(\"nonexistent.txt\") {\n    Ok(data) =&gt; println!(\"Read: {:?}\", data),\n    Err(e) =&gt; println!(\"Error: {:?}\", e),\n}\n</code></pre></li> <li>\u8cc7\u6e90\u7ba1\u7406\uff1a\u5229\u7528 Rust \u7684 RAII \u7279\u6027\uff0c\u78ba\u4fdd\u6a94\u6848\u53e5\u67c4\u81ea\u52d5\u95dc\u9589\uff0c\u907f\u514d\u8cc7\u6e90\u6d29\u6f0f\u3002</li> <li>\u6548\u80fd\u8003\u91cf\uff1a\u907f\u514d\u904e\u5ea6\u5de2\u72c0\u932f\u8aa4\u8655\u7406\uff0c\u4f7f\u7528 <code>?</code> \u904b\u7b97\u5b50\u7c21\u5316\u4ee3\u78bc\u3002</li> </ul> <p>\u5efa\u8b70\uff1a\u81ea\u5b9a\u7fa9\u932f\u8aa4\u985e\u578b\u4e26\u5be6\u73fe <code>std::error::Error</code> \u7279\u5fb5\uff0c\u69cb\u5efa\u8907\u96dc\u61c9\u7528\u7684\u932f\u8aa4\u8655\u7406\u5c64\u6b21\u3002</p>"},{"location":"standard-library-usage/file-io-operations/#_1","title":"\u6280\u8853\u6311\u6230\u8207\u89e3\u6c7a\u65b9\u6848","text":"<ul> <li>\u8de8\u5e73\u53f0\u5dee\u7570\uff1a\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7d71\u5c0d\u6a94\u6848\u8207 I/O \u64cd\u4f5c\u7684\u884c\u70ba\u4e0d\u4e00\u81f4\uff1b\u89e3\u6c7a\u65b9\u6848\u662f\u4f7f\u7528\u689d\u4ef6\u7de8\u8b6f\u8207 <code>std::path</code> \u62bd\u8c61\u3002</li> <li>\u975e\u963b\u585e I/O\uff1a\u6a19\u6e96\u51fd\u6578\u5eab\u4e0d\u76f4\u63a5\u652f\u63f4\u975e\u963b\u585e I/O\uff1b\u53ef\u7d50\u5408 <code>mio</code> \u6216 <code>tokio</code> \u5eab\u5be6\u73fe\u7570\u6b65\u64cd\u4f5c\u3002</li> <li>\u5927\u6a94\u6848\u8655\u7406\uff1a\u8655\u7406\u8d85\u5927\u6a94\u6848\u53ef\u80fd\u5c0e\u81f4\u8a18\u61b6\u9ad4\u554f\u984c\uff1b\u5efa\u8b70\u4f7f\u7528\u6d41\u5f0f\u8655\u7406\u8207\u8a18\u61b6\u9ad4\u6620\u5c04 (mmap)\u3002</li> </ul>"},{"location":"standard-library-usage/file-io-operations/#_2","title":"\u5b78\u7fd2\u5efa\u8b70","text":"<ul> <li>\u6548\u80fd\u6e2c\u8a66\uff1a\u4f7f\u7528 <code>criterion</code> \u5c0d\u4e0d\u540c\u7de9\u885d\u5927\u5c0f\u8207 I/O \u7b56\u7565\u9032\u884c\u57fa\u6e96\u6e2c\u8a66\u3002</li> <li>\u6e90\u78bc\u5206\u6790\uff1a\u95b1\u8b80 <code>std::fs</code> \u8207 <code>std::io</code> \u6e90\u78bc\uff0c\u7406\u89e3\u5176\u8207\u64cd\u4f5c\u7cfb\u7d71\u7684\u4ea4\u4e92\u3002</li> <li>\u9032\u968e\u5be6\u8e10\uff1a\u5be6\u73fe\u81ea\u5b9a\u7fa9 I/O \u6d41\uff0c\u61c9\u7528\u65bc\u5be6\u969b\u5c08\u6848\uff0c\u5982\u65e5\u8a8c\u7cfb\u7d71\u6216\u6578\u64da\u6d41\u8655\u7406\u3002</li> </ul> <p>\u76f8\u95dc\u8cc7\u6e90\uff1a</p> <ul> <li>Rust \u6a19\u6e96\u51fd\u6578\u5eab\u6e90\u78bc (<code>https://github.com/rust-lang/rust/tree/master/library/std/src/io</code>)\uff0c\u6df1\u5165 I/O \u5be6\u73fe\u3002</li> <li><code>tokio</code> \u5eab\u6587\u6a94\uff0c\u7528\u65bc\u7570\u6b65 I/O \u64cd\u4f5c\u3002</li> </ul>"},{"location":"technical-reference/concurrency-async-implementation/","title":"\u4e26\u767c\u8207\u7570\u6b65\u5be6\u73fe\uff1aRust \u7684\u9ad8\u6548\u4e26\u884c\u8a2d\u8a08","text":"<p>\u4e26\u767c (Concurrency) \u8207\u7570\u6b65 (Asynchronous) \u7de8\u7a0b\u662f\u73fe\u4ee3\u7a0b\u5f0f\u8a2d\u8a08\u7684\u91cd\u8981\u6280\u8853\uff0c\u7528\u65bc\u8655\u7406\u591a\u4efb\u52d9\u8207\u9ad8\u4f75\u767c\u5834\u666f\u3002</p> <p>Rust \u901a\u904e\u5176\u6240\u6709\u6b0a\u7cfb\u7d71\u8207\u7570\u6b65\u904b\u884c\u6642\uff0c\u63d0\u4f9b\u4e86\u5b89\u5168\u4e14\u9ad8\u6548\u7684\u4e26\u767c\u8207\u7570\u6b65\u5be6\u73fe\u3002</p> <p>\u5c0d\u65bc\u5e0c\u671b\u6df1\u5165\u4e86\u89e3 Rust \u6280\u8853\u7d30\u7bc0\u7684\u5b78\u7fd2\u8005\u8207\u958b\u767c\u8005\u4f86\u8aaa\uff0c\u7406\u89e3\u4e26\u767c\u8207\u7570\u6b65\u7684\u5e95\u5c64\u6a5f\u5236\u662f\u638c\u63e1 Rust \u9ad8\u6027\u80fd\u8a2d\u8a08\u7684\u95dc\u9375\u4e00\u6b65\u3002</p>"},{"location":"technical-reference/concurrency-async-implementation/#_1","title":"\u4ec0\u9ebc\u662f\u4e26\u767c\u8207\u7570\u6b65\uff1f","text":"<p>\u4e26\u767c\u662f\u6307\u7a0b\u5f0f\u80fd\u5920\u540c\u6642\u8655\u7406\u591a\u500b\u4efb\u52d9\uff0c\u9019\u4e9b\u4efb\u52d9\u53ef\u80fd\u4ea4\u932f\u57f7\u884c\uff0c\u800c\u7570\u6b65\u7de8\u7a0b\u5247\u5141\u8a31\u4efb\u52d9\u5728\u7b49\u5f85 I/O \u6216\u5176\u4ed6\u64cd\u4f5c\u6642\u4e0d\u963b\u585e\u4e3b\u7dda\u7a0b\u3002</p> <p>Rust \u7684\u4e26\u767c\u8207\u7570\u6b65\u6a5f\u5236\u65e8\u5728\u78ba\u4fdd\u8a18\u61b6\u9ad4\u5b89\u5168\u8207\u7dda\u7a0b\u5b89\u5168\uff0c\u540c\u6642\u63d0\u4f9b\u9ad8\u6548\u7684\u57f7\u884c\u6a21\u578b\u3002</p> <p>Rust \u4e26\u767c\u8207\u7570\u6b65\u7684\u6838\u5fc3\u7406\u5ff5\u662f\uff1a\u901a\u904e\u6240\u6709\u6b0a\u8207\u501f\u7528\u7cfb\u7d71\u78ba\u4fdd\u7dda\u7a0b\u5b89\u5168\uff0c\u7d50\u5408\u8f15\u91cf\u7d1a\u7570\u6b65\u904b\u884c\u6642\u5be6\u73fe\u9ad8\u6548\u4e26\u884c\u3002</p>"},{"location":"technical-reference/concurrency-async-implementation/#_2","title":"\u70ba\u4ec0\u9ebc\u9700\u8981\u4e26\u767c\u8207\u7570\u6b65\uff1f","text":"<p>\u5728\u73fe\u4ee3\u61c9\u7528\u4e2d\uff0c\u7f3a\u4e4f\u4e26\u767c\u8207\u7570\u6b65\u652f\u63f4\u53ef\u80fd\u5c0e\u81f4\u554f\u984c\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u6027\u80fd\u74f6\u9838\uff1a\u55ae\u7dda\u7a0b\u57f7\u884c\u7121\u6cd5\u5145\u5206\u5229\u7528\u591a\u6838 CPU \u6216\u8655\u7406\u9ad8\u4f75\u767c\u8acb\u6c42\u3002</li> <li>\u963b\u585e\u64cd\u4f5c\uff1a\u540c\u6b65 I/O \u64cd\u4f5c\u5c0e\u81f4\u7a0b\u5f0f\u7b49\u5f85\uff0c\u964d\u4f4e\u97ff\u61c9\u6027\u3002</li> <li>\u7dda\u7a0b\u5b89\u5168\u554f\u984c\uff1a\u50b3\u7d71\u4e26\u767c\u6a21\u578b\u4e2d\uff0c\u5171\u4eab\u72c0\u614b\u6613\u5c0e\u81f4\u6578\u64da\u7af6\u8cfd\u8207\u672a\u5b9a\u7fa9\u884c\u70ba\u3002</li> </ul> <p>Rust \u7684\u4e26\u767c\u8207\u7570\u6b65\u6a5f\u5236\u901a\u904e\u7de8\u8b6f\u6642\u6aa2\u67e5\u8207\u8f15\u91cf\u7d1a\u904b\u884c\u6642\uff0c\u89e3\u6c7a\u9019\u4e9b\u554f\u984c\uff0c\u7279\u5225\u9069\u7528\u65bc\u9ad8\u6027\u80fd\u4f3a\u670d\u5668\u8207\u5d4c\u5165\u5f0f\u7cfb\u7d71\u3002</p>"},{"location":"technical-reference/concurrency-async-implementation/#_3","title":"\u4e26\u767c\u8207\u7570\u6b65\u7684\u5be6\u73fe\u6a5f\u5236","text":""},{"location":"technical-reference/concurrency-async-implementation/#stdthread","title":"\u7dda\u7a0b\u8207\u4e26\u767c\uff1astd::thread","text":"<p>Rust \u4f7f\u7528 <code>std::thread</code> \u6a21\u7d44\u63d0\u4f9b\u7dda\u7a0b\u652f\u63f4\uff0c\u901a\u904e\u6240\u6709\u6b0a\u8207\u501f\u7528\u898f\u5247\u78ba\u4fdd\u7dda\u7a0b\u5b89\u5168\uff1a</p> <pre><code>use std::thread;\nuse std::time::Duration;\n\nfn main() {\n    let handle = thread::spawn(|| {\n        for i in 1..5 {\n            println!(\"Thread: {}\", i);\n            thread::sleep(Duration::from_millis(1));\n        }\n    });\n\n    for i in 1..3 {\n        println!(\"Main: {}\", i);\n        thread::sleep(Duration::from_millis(1));\n    }\n\n    handle.join().unwrap(); // \u7b49\u5f85\u7dda\u7a0b\u5b8c\u6210\n}\n</code></pre> <p>Rust \u7684\u7de8\u8b6f\u5668\u78ba\u4fdd\u6578\u64da\u5728\u7dda\u7a0b\u9593\u8f49\u79fb\u6642\u7b26\u5408\u6240\u6709\u6b0a\u898f\u5247\uff0c\u9632\u6b62\u6578\u64da\u7af6\u8cfd\u3002</p>"},{"location":"technical-reference/concurrency-async-implementation/#mutex-rwlock","title":"\u540c\u6b65\u539f\u8a9e\uff1aMutex \u8207 RwLock","text":"<p>Rust \u63d0\u4f9b <code>Mutex</code> (\u4e92\u65a5\u9396) \u8207 <code>RwLock</code> (\u8b80\u5beb\u9396) \u7ba1\u7406\u5171\u4eab\u72c0\u614b\uff1a</p> <pre><code>use std::sync::Mutex;\nuse std::thread;\n\nfn main() {\n    let counter = Mutex::new(0);\n    let mut handles = vec![];\n\n    for _ in 0..10 {\n        let counter = Mutex::clone(&amp;counter);\n        let handle = thread::spawn(move || {\n            let mut num = counter.lock().unwrap();\n            *num += 1;\n        });\n        handles.push(handle);\n    }\n\n    for handle in handles {\n        handle.join().unwrap();\n    }\n\n    println!(\"Result: {}\", *counter.lock().unwrap());\n}\n</code></pre> <p>\u9019\u4e9b\u540c\u6b65\u539f\u8a9e\u78ba\u4fdd\u7dda\u7a0b\u5b89\u5168\u8a2a\u554f\u5171\u4eab\u6578\u64da\u3002</p>"},{"location":"technical-reference/concurrency-async-implementation/#channels","title":"\u901a\u9053 (Channels)\uff1a\u7dda\u7a0b\u9593\u901a\u4fe1","text":"<p>Rust \u7684 <code>std::sync::mpsc</code> \u6a21\u7d44\u63d0\u4f9b\u901a\u9053\uff0c\u652f\u63f4\u7dda\u7a0b\u9593\u5b89\u5168\u901a\u4fe1\uff1a</p> <pre><code>use std::sync::mpsc;\nuse std::thread;\n\nfn main() {\n    let (tx, rx) = mpsc::channel();\n\n    thread::spawn(move || {\n        let val = String::from(\"hi\");\n        tx.send(val).unwrap();\n    });\n\n    let received = rx.recv().unwrap();\n    println!(\"Got: {}\", received);\n}\n</code></pre> <p>\u901a\u9053\u901a\u904e\u6240\u6709\u6b0a\u8f49\u79fb\u78ba\u4fdd\u6578\u64da\u5b89\u5168\u50b3\u905e\u3002</p>"},{"location":"technical-reference/concurrency-async-implementation/#asyncawait-tokio","title":"\u7570\u6b65\u7de8\u7a0b\uff1aasync/await \u8207 Tokio","text":"<p>Rust \u4f7f\u7528 <code>async/await</code> \u8a9e\u6cd5\u652f\u63f4\u7570\u6b65\u7de8\u7a0b\uff0c\u7d50\u5408 <code>Tokio</code> \u7b49\u904b\u884c\u6642\u5be6\u73fe\u9ad8\u6548 I/O \u64cd\u4f5c\uff1a</p> <pre><code>use tokio::time::{sleep, Duration};\n\nasync fn say_hello() {\n    sleep(Duration::from_millis(100)).await;\n    println!(\"Hello, world!\");\n}\n\n#[tokio::main]\nasync fn main() {\n    say_hello().await;\n}\n</code></pre> <p><code>async/await</code> \u57fa\u65bc\u72c0\u614b\u6a5f\u5be6\u73fe\uff0c\u7de8\u8b6f\u5668\u5c07\u7570\u6b65\u4ee3\u78bc\u8f49\u63db\u70ba\u9ad8\u6548\u7684\u975e\u963b\u585e\u57f7\u884c\u6a21\u578b\u3002</p>"},{"location":"technical-reference/concurrency-async-implementation/#future","title":"\u5e95\u5c64\u6a5f\u5236\uff1aFuture \u8207\u57f7\u884c\u5668","text":"<p>Rust \u7684\u7570\u6b65\u7cfb\u7d71\u57fa\u65bc <code>Future</code> \u7279\u5fb5\uff0c\u57f7\u884c\u5668 (Executor) \u8ca0\u8cac\u8abf\u5ea6 <code>Future</code>\uff1a</p> <pre><code>use std::future::Future;\nuse std::pin::Pin;\nuse std::task::{Context, Poll};\n\nstruct MyFuture;\n\nimpl Future for MyFuture {\n    type Output = i32;\n\n    fn poll(self: Pin&lt;&amp;mut Self&gt;, _cx: &amp;mut Context&lt;'_&gt;) -&gt; Poll&lt;Self::Output&gt; {\n        Poll::Ready(42)\n    }\n}\n</code></pre> <p>\u9019\u7a2e\u6a5f\u5236\u5141\u8a31\u81ea\u5b9a\u7fa9\u7570\u6b65\u884c\u70ba\uff0c\u63d0\u4f9b\u6975\u9ad8\u7684\u9748\u6d3b\u6027\u3002</p>"},{"location":"technical-reference/concurrency-async-implementation/#_4","title":"\u6280\u8853\u7d30\u7bc0\u8207\u6311\u6230","text":"<ul> <li>\u7de8\u8b6f\u6642\u5b89\u5168\u6aa2\u67e5\uff1aRust \u7684\u7dda\u7a0b\u5b89\u5168\u4f9d\u8cf4\u6240\u6709\u6b0a\u7cfb\u7d71\uff0c\u53ef\u80fd\u589e\u52a0\u7de8\u8b6f\u8907\u96dc\u6027\u3002</li> <li>\u7570\u6b65\u904b\u884c\u6642\u958b\u92b7\uff1a\u9078\u64c7\u5408\u9069\u7684\u904b\u884c\u6642\uff08\u5982 <code>Tokio</code> \u6216 <code>async-std</code>\uff09\u5c0d\u6027\u80fd\u81f3\u95dc\u91cd\u8981\u3002</li> <li>\u4e26\u767c\u8abf\u8a66\u96e3\u5ea6\uff1a\u591a\u7dda\u7a0b\u8207\u7570\u6b65\u4ee3\u78bc\u53ef\u80fd\u5f15\u5165\u8907\u96dc\u7684\u8abf\u8a66\u554f\u984c\uff0c\u9700\u4f7f\u7528\u5de5\u5177\u5b9a\u4f4d\u3002</li> </ul>"},{"location":"technical-reference/cross-domain-use-cases/","title":"\u8de8\u9818\u57df\u61c9\u7528\u6848\u4f8b\uff1aRust \u7684\u591a\u6a23\u5316\u5be6\u8e10","text":"<p>Rust \u4f5c\u70ba\u4e00\u9580\u7cfb\u7d71\u7de8\u7a0b\u8a9e\u8a00\uff0c\u56e0\u5176\u8a18\u61b6\u9ad4\u5b89\u5168\u8207\u9ad8\u6027\u80fd\u7279\u6027\uff0c\u5728\u591a\u500b\u9818\u57df\u4e2d\u5f97\u5230\u4e86\u5ee3\u6cdb\u61c9\u7528\u3002</p> <p>\u5c0d\u65bc\u5e0c\u671b\u6df1\u5165\u4e86\u89e3 Rust \u6280\u8853\u7d30\u7bc0\u7684\u5b78\u7fd2\u8005\u8207\u958b\u767c\u8005\u4f86\u8aaa\uff0c\u63a2\u7d22 Rust \u7684\u8de8\u9818\u57df\u61c9\u7528\u6848\u4f8b\u662f\u7406\u89e3\u5176\u5be6\u969b\u50f9\u503c\u7684\u95dc\u9375\u4e00\u6b65\u3002</p>"},{"location":"technical-reference/cross-domain-use-cases/#_1","title":"\u4ec0\u9ebc\u662f\u8de8\u9818\u57df\u61c9\u7528\uff1f","text":"<p>\u8de8\u9818\u57df\u61c9\u7528\u662f\u6307 Rust \u8a9e\u8a00\u5728\u7cfb\u7d71\u7de8\u7a0b\u4ee5\u5916\u7684\u5404\u7a2e\u5834\u666f\u4e2d\u7684\u4f7f\u7528\uff0c\u5305\u62ec Web \u958b\u767c\u3001\u8cc7\u6599\u79d1\u5b78\u3001\u5d4c\u5165\u5f0f\u7cfb\u7d71\u3001\u5340\u584a\u93c8\u7b49\u3002</p> <p>Rust \u7684\u591a\u529f\u80fd\u6027\u4f7f\u5176\u80fd\u5920\u9069\u61c9\u4e0d\u540c\u9700\u6c42\uff0c\u63d0\u4f9b\u5b89\u5168\u8207\u6027\u80fd\u7684\u96d9\u91cd\u4fdd\u969c\u3002</p> <p>Rust \u8de8\u9818\u57df\u61c9\u7528\u7684\u6838\u5fc3\u7406\u5ff5\u662f\uff1a\u901a\u904e\u8a18\u61b6\u9ad4\u5b89\u5168\u8207\u96f6\u6210\u672c\u62bd\u8c61\uff0c\u9069\u61c9\u591a\u6a23\u5316\u9700\u6c42\uff0c\u89e3\u6c7a\u7279\u5b9a\u9818\u57df\u7684\u6280\u8853\u6311\u6230\u3002</p>"},{"location":"technical-reference/cross-domain-use-cases/#_2","title":"\u70ba\u4ec0\u9ebc\u9700\u8981\u8de8\u9818\u57df\u61c9\u7528\uff1f","text":"<p>\u5728\u73fe\u4ee3\u6280\u8853\u74b0\u5883\u4e2d\uff0c\u55ae\u4e00\u8a9e\u8a00\u6216\u5de5\u5177\u53ef\u80fd\u7121\u6cd5\u6eff\u8db3\u6240\u6709\u9700\u6c42\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u9818\u57df\u7279\u5b9a\u9700\u6c42\uff1a\u4e0d\u540c\u9818\u57df\u6709\u4e0d\u540c\u7684\u6027\u80fd\u3001\u5b89\u5168\u8207\u958b\u767c\u6548\u7387\u8981\u6c42\u3002</li> <li>\u6280\u8853\u68e7\u8907\u96dc\u6027\uff1a\u591a\u8a9e\u8a00\u74b0\u5883\u589e\u52a0\u4e86\u6574\u5408\u8207\u7dad\u8b77\u6210\u672c\u3002</li> <li>\u5275\u65b0\u9700\u6c42\uff1a\u65b0\u8208\u9818\u57df\u9700\u8981\u9ad8\u6548\u4e14\u5b89\u5168\u7684\u89e3\u6c7a\u65b9\u6848\u3002</li> </ul> <p>Rust \u7684\u8de8\u9818\u57df\u61c9\u7528\u901a\u904e\u5176\u7368\u7279\u7279\u6027\uff0c\u63d0\u4f9b\u4e86\u7d71\u4e00\u4e14\u9ad8\u6548\u7684\u89e3\u6c7a\u65b9\u6848\u3002</p>"},{"location":"technical-reference/cross-domain-use-cases/#_3","title":"\u8de8\u9818\u57df\u61c9\u7528\u6848\u4f8b","text":""},{"location":"technical-reference/cross-domain-use-cases/#1-web-actix-rocket","title":"1. Web \u5f8c\u7aef\u958b\u767c\uff1aActix \u8207 Rocket","text":"<p>Rust \u5728 Web \u5f8c\u7aef\u958b\u767c\u4e2d\u8868\u73fe\u51fa\u8272\uff0c<code>Actix</code> \u8207 <code>Rocket</code> \u7b49\u6846\u67b6\u63d0\u4f9b\u4e86\u9ad8\u6027\u80fd\u8207\u5b89\u5168\u7684\u4f3a\u670d\u5668\u89e3\u6c7a\u65b9\u6848\uff1a</p> <pre><code>use actix_web::{web, App, HttpServer, Responder, get};\n\n#[get(\"/hello\")]\nasync fn greet() -&gt; impl Responder {\n    format!(\"Hello, World!\")\n}\n\n#[actix_web::main]\nasync fn main() -&gt; std::io::Result&lt;()&gt; {\n    HttpServer::new(|| {\n        App::new()\n            .service(greet)\n    })\n    .bind((\"127.0.0.1\", 8080))?\n    .run()\n    .await\n}\n</code></pre> <p>Rust \u7684\u8a18\u61b6\u9ad4\u5b89\u5168\u7279\u6027\u4f7f Web \u61c9\u7528\u66f4\u4e0d\u5bb9\u6613\u53d7\u5230\u7de9\u885d\u5340\u6ea2\u51fa\u7b49\u653b\u64ca\uff0c\u7279\u5225\u9069\u5408\u9ad8\u4f75\u767c\u5834\u666f\u3002</p>"},{"location":"technical-reference/cross-domain-use-cases/#2-rust","title":"2. \u5d4c\u5165\u5f0f\u7cfb\u7d71\uff1aRust \u5728\u5fae\u63a7\u5236\u5668\u4e0a\u7684\u61c9\u7528","text":"<p>Rust \u652f\u63f4 <code>no_std</code> \u74b0\u5883\uff0c\u9069\u7528\u65bc\u8cc7\u6e90\u53d7\u9650\u7684\u5d4c\u5165\u5f0f\u7cfb\u7d71\uff0c\u5982\u7269\u806f\u7db2\u8a2d\u5099\uff1a</p> <pre><code>#![no_std]\n\nuse cortex_m_rt::entry;\nuse panic_halt as _;\n\n#[entry]\nfn main() -&gt; ! {\n    loop {\n        // \u5d4c\u5165\u5f0f\u8a2d\u5099\u63a7\u5236\u908f\u8f2f\n    }\n}\n</code></pre> <p>Rust \u7684\u7de8\u8b6f\u6642\u6aa2\u67e5\u78ba\u4fdd\u5d4c\u5165\u5f0f\u7a0b\u5f0f\u53ef\u9760\u6027\uff0c\u6e1b\u5c11\u904b\u884c\u6642\u932f\u8aa4\u3002</p>"},{"location":"technical-reference/cross-domain-use-cases/#3-ndarray-tract","title":"3. \u8cc7\u6599\u79d1\u5b78\u8207\u6a5f\u5668\u5b78\u7fd2\uff1andarray \u8207 tract","text":"<p>Rust \u5728\u8cc7\u6599\u79d1\u5b78\u9818\u57df\u9010\u6f38\u53d7\u5230\u95dc\u6ce8\uff0c<code>ndarray</code> \u63d0\u4f9b\u9ad8\u6548\u9663\u5217\u64cd\u4f5c\uff0c<code>tract</code> \u652f\u63f4\u6a5f\u5668\u5b78\u7fd2\u6a21\u578b\u63a8\u7406\uff1a</p> <pre><code>use ndarray::{array1, Array1};\n\nfn main() {\n    let a: Array1&lt;f64&gt; = array1(&amp;[1.0, 2.0, 3.0]);\n    let b: Array1&lt;f64&gt; = array1(&amp;[4.0, 5.0, 6.0]);\n    let result = a + b;\n    println!(\"Result: {:?}\", result);\n}\n</code></pre> <p>Rust \u7684\u6027\u80fd\u512a\u52e2\u4f7f\u8cc7\u6599\u8655\u7406\u901f\u5ea6\u66f4\u5feb\uff0c\u7279\u5225\u9069\u5408\u5927\u898f\u6a21\u6578\u64da\u5206\u6790\u3002</p>"},{"location":"technical-reference/cross-domain-use-cases/#4-solana-parity","title":"4. \u5340\u584a\u93c8\u8207\u52a0\u5bc6\u6280\u8853\uff1aSolana \u8207 parity","text":"<p>Rust \u5728\u5340\u584a\u93c8\u9818\u57df\u6709\u5ee3\u6cdb\u61c9\u7528\uff0c<code>Solana</code> \u5340\u584a\u93c8\u8207 <code>Parity</code> Ethereum \u5ba2\u6236\u7aef\u5747\u4f7f\u7528 Rust \u958b\u767c\uff1a</p> <ul> <li>Solana \u4f7f\u7528 Rust \u5be6\u73fe\u9ad8\u6548\u80fd\u667a\u80fd\u5408\u7d04\u57f7\u884c\u74b0\u5883\u3002</li> <li>Parity \u5229\u7528 Rust \u7684\u5b89\u5168\u7279\u6027\u6e1b\u5c11\u6f0f\u6d1e\u98a8\u96aa\u3002</li> </ul> <p>\u9019\u4e9b\u61c9\u7528\u5c55\u793a\u4e86 Rust \u5728\u9ad8\u5b89\u5168\u6027\u8207\u6027\u80fd\u9700\u6c42\u9818\u57df\u7684\u50f9\u503c\u3002</p>"},{"location":"technical-reference/cross-domain-use-cases/#5-amethyst-bevy","title":"5. \u904a\u6232\u958b\u767c\uff1aAmethyst \u8207 Bevy","text":"<p>Rust \u5728\u904a\u6232\u958b\u767c\u4e2d\u4e5f\u5360\u6709\u4e00\u5e2d\u4e4b\u5730\uff0c<code>Amethyst</code> \u8207 <code>Bevy</code> \u662f\u6d41\u884c\u7684\u904a\u6232\u5f15\u64ce\uff1a</p> <ul> <li><code>Bevy</code> \u63d0\u4f9b\u57fa\u65bc ECS (Entity-Component-System) \u7684\u67b6\u69cb\uff0c\u652f\u63f4\u9ad8\u6548\u904a\u6232\u908f\u8f2f\u3002</li> <li>Rust \u7684\u6027\u80fd\u78ba\u4fdd\u904a\u6232\u904b\u884c\u6d41\u66a2\uff0c\u7279\u5225\u9069\u5408\u8907\u96dc 3D \u904a\u6232\u3002</li> </ul> <p>\u7c21\u55ae <code>Bevy</code> \u793a\u4f8b\uff1a</p> <pre><code>use bevy::prelude::*;\n\nfn main() {\n    App::new()\n        .add_plugins(DefaultPlugins)\n        .run();\n}\n</code></pre>"},{"location":"technical-reference/cross-domain-use-cases/#_4","title":"\u6280\u8853\u7d30\u7bc0\u8207\u6311\u6230","text":"<ul> <li>\u5b78\u7fd2\u66f2\u7dda\uff1a\u4e0d\u540c\u9818\u57df\u7684 Rust \u61c9\u7528\u53ef\u80fd\u9700\u8981\u5b78\u7fd2\u7279\u5b9a\u6846\u67b6\u8207\u5de5\u5177\u3002</li> <li>\u751f\u614b\u6210\u719f\u5ea6\uff1a\u76f8\u8f03\u65bc Python \u6216 JavaScript\uff0cRust \u5728\u67d0\u4e9b\u9818\u57df\u7684\u751f\u614b\u4ecd\u8655\u65bc\u767c\u5c55\u968e\u6bb5\u3002</li> <li>\u6574\u5408\u6210\u672c\uff1aRust \u8207\u5176\u4ed6\u8a9e\u8a00\u6216\u7cfb\u7d71\u6574\u5408\u53ef\u80fd\u9700\u8981\u984d\u5916\u5de5\u4f5c\uff0c\u5982 FFI\u3002</li> </ul>"},{"location":"technical-reference/error-handling-mechanisms-reliability/","title":"\u932f\u8aa4\u8655\u7406\u6a5f\u5236\u8207\u53ef\u9760\u6027\uff1aRust \u7684\u5065\u58ef\u6027\u4fdd\u969c","text":"<p>\u932f\u8aa4\u8655\u7406\u662f\u7a0b\u5f0f\u53ef\u9760\u6027\u7684\u91cd\u8981\u7d44\u6210\u90e8\u5206\uff0cRust \u901a\u904e\u5176\u7368\u7279\u7684\u932f\u8aa4\u8655\u7406\u6a5f\u5236\u78ba\u4fdd\u7a0b\u5f0f\u5728\u9762\u5c0d\u7570\u5e38\u6642\u4ecd\u80fd\u4fdd\u6301\u7a69\u5b9a\u8207\u53ef\u9810\u6e2c\u3002</p> <p>\u5c0d\u65bc\u5e0c\u671b\u6df1\u5165\u4e86\u89e3 Rust \u6280\u8853\u7d30\u7bc0\u7684\u5b78\u7fd2\u8005\u8207\u958b\u767c\u8005\u4f86\u8aaa\uff0c\u7406\u89e3\u932f\u8aa4\u8655\u7406\u6a5f\u5236\u8207\u5176\u5c0d\u53ef\u9760\u6027\u7684\u5f71\u97ff\u662f\u638c\u63e1 Rust \u8a2d\u8a08\u54f2\u5b78\u7684\u95dc\u9375\u4e00\u6b65\u3002</p>"},{"location":"technical-reference/error-handling-mechanisms-reliability/#_1","title":"\u4ec0\u9ebc\u662f\u932f\u8aa4\u8655\u7406\u6a5f\u5236\uff1f","text":"<p>Rust \u7684\u932f\u8aa4\u8655\u7406\u6a5f\u5236\u4e3b\u8981\u57fa\u65bc <code>Result</code> \u8207 <code>Option</code> \u578b\u5225\uff0c\u7d50\u5408 <code>panic!</code> \u5b8f\u8207\u81ea\u5b9a\u7fa9\u932f\u8aa4\u8655\u7406\uff0c\u78ba\u4fdd\u7a0b\u5f0f\u80fd\u986f\u5f0f\u8655\u7406\u932f\u8aa4\uff0c\u907f\u514d\u672a\u5b9a\u7fa9\u884c\u70ba\u3002</p> <p>\u9019\u4e9b\u6a5f\u5236\u65e8\u5728\u63d0\u5347\u7a0b\u5f0f\u53ef\u9760\u6027\uff0c\u9632\u6b62\u672a\u6355\u7372\u7684\u932f\u8aa4\u5c0e\u81f4\u7a0b\u5f0f\u5d29\u6f70\u3002</p> <p>Rust \u932f\u8aa4\u8655\u7406\u7684\u6838\u5fc3\u7406\u5ff5\u662f\uff1a\u901a\u904e\u986f\u5f0f\u932f\u8aa4\u8655\u7406\u8207\u7de8\u8b6f\u6642\u6aa2\u67e5\uff0c\u78ba\u4fdd\u7a0b\u5f0f\u884c\u70ba\u53ef\u9810\u6e2c\uff0c\u63d0\u5347\u53ef\u9760\u6027\u3002</p>"},{"location":"technical-reference/error-handling-mechanisms-reliability/#_2","title":"\u70ba\u4ec0\u9ebc\u9700\u8981\u932f\u8aa4\u8655\u7406\u6a5f\u5236\uff1f","text":"<p>\u5728\u7a0b\u5f0f\u8a2d\u8a08\u4e2d\uff0c\u932f\u8aa4\u8655\u7406\u4e0d\u7576\u53ef\u80fd\u5c0e\u81f4\u554f\u984c\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u672a\u6355\u7372\u7570\u5e38\uff1a\u904b\u884c\u6642\u932f\u8aa4\u672a\u8655\u7406\uff0c\u5c0e\u81f4\u7a0b\u5f0f\u5d29\u6f70\u3002</li> <li>\u96b1\u85cf\u932f\u8aa4\uff1a\u932f\u8aa4\u88ab\u5ffd\u7565\u6216\u63a9\u84cb\uff0c\u5c0e\u81f4\u96e3\u4ee5\u8a3a\u65b7\u7684\u554f\u984c\u3002</li> <li>\u4ee3\u78bc\u8907\u96dc\u6027\uff1a\u932f\u8aa4\u8655\u7406\u908f\u8f2f\u5206\u6563\uff0c\u964d\u4f4e\u4ee3\u78bc\u53ef\u8b80\u6027\u3002</li> </ul> <p>Rust \u7684\u932f\u8aa4\u8655\u7406\u6a5f\u5236\u901a\u904e\u5f37\u5236\u986f\u5f0f\u8655\u7406\u8207\u7d50\u69cb\u5316\u8a2d\u8a08\uff0c\u89e3\u6c7a\u9019\u4e9b\u554f\u984c\uff0c\u7279\u5225\u9069\u7528\u65bc\u9ad8\u53ef\u9760\u6027\u61c9\u7528\u3002</p>"},{"location":"technical-reference/error-handling-mechanisms-reliability/#_3","title":"\u932f\u8aa4\u8655\u7406\u6a5f\u5236\u7684\u5be6\u73fe\u7d30\u7bc0","text":""},{"location":"technical-reference/error-handling-mechanisms-reliability/#result-option","title":"Result \u8207 Option\uff1a\u986f\u5f0f\u932f\u8aa4\u8655\u7406","text":"<p>Rust \u4f7f\u7528 <code>Result</code> \u8655\u7406\u53ef\u80fd\u5931\u6557\u7684\u64cd\u4f5c\uff0c\u4f7f\u7528 <code>Option</code> \u8655\u7406\u53ef\u80fd\u70ba\u7a7a\u7684\u503c\uff1a</p> <pre><code>fn divide(a: i32, b: i32) -&gt; Result&lt;i32, String&gt; {\n    if b == 0 {\n        Err(String::from(\"Division by zero\"))\n    } else {\n        Ok(a / b)\n    }\n}\n\nfn main() {\n    match divide(10, 2) {\n        Ok(result) =&gt; println!(\"Result: {}\", result),\n        Err(e) =&gt; println!(\"Error: {}\", e),\n    }\n}\n</code></pre> <p>\u9019\u4e9b\u578b\u5225\u5f37\u5236\u958b\u767c\u8005\u5728\u7de8\u8b6f\u6642\u8655\u7406\u6240\u6709\u53ef\u80fd\u7d50\u679c\u3002</p>"},{"location":"technical-reference/error-handling-mechanisms-reliability/#_4","title":"\u932f\u8aa4\u50b3\u64ad\uff1a? \u904b\u7b97\u5b50","text":"<p>Rust \u63d0\u4f9b <code>?</code> \u904b\u7b97\u5b50\u7c21\u5316\u932f\u8aa4\u50b3\u64ad\uff0c\u7279\u5225\u662f\u5728\u51fd\u6578\u4e2d\u8655\u7406\u591a\u500b <code>Result</code>\uff1a</p> <pre><code>fn process_data() -&gt; Result&lt;String, String&gt; {\n    let data = divide(10, 2)?;\n    Ok(format!(\"Processed: {}\", data))\n}\n\nfn main() {\n    match process_data() {\n        Ok(result) =&gt; println!(\"{}\", result),\n        Err(e) =&gt; println!(\"Error: {}\", e),\n    }\n}\n</code></pre> <p><code>?</code> \u904b\u7b97\u5b50\u81ea\u52d5\u50b3\u64ad\u932f\u8aa4\uff0c\u6e1b\u5c11\u5de2\u72c0\u5339\u914d\u3002</p>"},{"location":"technical-reference/error-handling-mechanisms-reliability/#panic","title":"panic! \u8207\u4e0d\u53ef\u6062\u5fa9\u932f\u8aa4","text":"<p>\u5c0d\u65bc\u4e0d\u53ef\u6062\u5fa9\u7684\u932f\u8aa4\uff0cRust \u63d0\u4f9b <code>panic!</code> \u5b8f\u7d42\u6b62\u7a0b\u5f0f\u57f7\u884c\uff1a</p> <pre><code>fn main() {\n    panic!(\"This is an unrecoverable error!\");\n}\n</code></pre> <p><code>panic!</code> \u9069\u5408\u7528\u65bc\u7a0b\u5f0f\u7121\u6cd5\u7e7c\u7e8c\u7684\u60c5\u6cc1\uff0c\u4f46\u61c9\u8b39\u614e\u4f7f\u7528\u3002</p>"},{"location":"technical-reference/error-handling-mechanisms-reliability/#_5","title":"\u81ea\u5b9a\u7fa9\u932f\u8aa4\u578b\u5225","text":"<p>Rust \u652f\u63f4\u901a\u904e <code>thiserror</code> \u6216\u624b\u52d5\u5be6\u73fe\u81ea\u5b9a\u7fa9\u932f\u8aa4\u578b\u5225\uff0c\u63d0\u5347\u932f\u8aa4\u8655\u7406\u7684\u8868\u9054\u529b\uff1a</p> <pre><code>use std::error::Error;\nuse std::fmt;\n\n#[derive(Debug)]\nenum MyError {\n    IoError(String),\n    ParseError(String),\n}\n\nimpl fmt::Display for MyError {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        match self {\n            MyError::IoError(msg) =&gt; write!(f, \"IO Error: {}\", msg),\n            MyError::ParseError(msg) =&gt; write!(f, \"Parse Error: {}\", msg),\n        }\n    }\n}\n\nimpl Error for MyError {}\n</code></pre> <p>\u81ea\u5b9a\u7fa9\u932f\u8aa4\u578b\u5225\u5e6b\u52a9\u7d50\u69cb\u5316\u932f\u8aa4\u8655\u7406\u908f\u8f2f\u3002</p>"},{"location":"technical-reference/error-handling-mechanisms-reliability/#_6","title":"\u6280\u8853\u7d30\u7bc0\u8207\u6311\u6230","text":"<ul> <li>\u7de8\u8b6f\u6642\u5f37\u5236\uff1aRust \u5f37\u5236\u8655\u7406 <code>Result</code> \u8207 <code>Option</code>\uff0c\u53ef\u80fd\u589e\u52a0\u521d\u671f\u5b78\u7fd2\u96e3\u5ea6\u3002</li> <li>\u932f\u8aa4\u50b3\u64ad\u8907\u96dc\u6027\uff1a\u5927\u578b\u5c08\u6848\u4e2d\uff0c\u932f\u8aa4\u578b\u5225\u53ef\u80fd\u904e\u591a\uff0c\u9700\u7d71\u4e00\u932f\u8aa4\u8655\u7406\u7b56\u7565\u3002</li> <li>panic! \u958b\u92b7\uff1a\u904e\u5ea6\u4f7f\u7528 <code>panic!</code> \u53ef\u80fd\u5c0e\u81f4\u7a0b\u5f0f\u4e0d\u5fc5\u8981\u7d42\u6b62\uff0c\u9700\u5e73\u8861\u4f7f\u7528\u3002</li> </ul>"},{"location":"technical-reference/memory-safety-ownership-implementation/","title":"\u8a18\u61b6\u9ad4\u5b89\u5168\u8207\u6240\u6709\u6b0a\u5be6\u73fe\uff1aRust \u7684\u6838\u5fc3\u4fdd\u969c","text":"<p>\u8a18\u61b6\u9ad4\u5b89\u5168\u662f Rust \u8a9e\u8a00\u7684\u57fa\u77f3\uff0c\u901a\u904e\u5176\u7368\u7279\u7684\u6240\u6709\u6b0a (Ownership) \u7cfb\u7d71\u5728\u7de8\u8b6f\u6642\u9632\u6b62\u6578\u64da\u7af6\u8cfd\u8207\u8a18\u61b6\u9ad4\u932f\u8aa4\u3002</p> <p>\u5c0d\u65bc\u5e0c\u671b\u6df1\u5165\u4e86\u89e3 Rust \u6280\u8853\u7d30\u7bc0\u7684\u5b78\u7fd2\u8005\u8207\u958b\u767c\u8005\u4f86\u8aaa\uff0c\u7406\u89e3\u8a18\u61b6\u9ad4\u5b89\u5168\u8207\u6240\u6709\u6b0a\u7684\u5be6\u73fe\u6a5f\u5236\u662f\u638c\u63e1 Rust \u5e95\u5c64\u539f\u7406\u7684\u95dc\u9375\u4e00\u6b65\u3002</p>"},{"location":"technical-reference/memory-safety-ownership-implementation/#_1","title":"\u4ec0\u9ebc\u662f\u8a18\u61b6\u9ad4\u5b89\u5168\u8207\u6240\u6709\u6b0a\uff1f","text":"<p>\u8a18\u61b6\u9ad4\u5b89\u5168\u662f\u6307\u7a0b\u5f0f\u5728\u904b\u884c\u6642\u4e0d\u6703\u51fa\u73fe\u672a\u5b9a\u7fa9\u884c\u70ba\uff0c\u5982\u61f8\u5782\u6307\u91dd\u3001\u7de9\u885d\u5340\u6ea2\u51fa\u6216\u6578\u64da\u7af6\u8cfd\u3002</p> <p>Rust \u901a\u904e\u6240\u6709\u6b0a\u7cfb\u7d71\u5be6\u73fe\u8a18\u61b6\u9ad4\u5b89\u5168\uff0c\u78ba\u4fdd\u6bcf\u500b\u503c\u6709\u4e14\u50c5\u6709\u4e00\u500b\u53ef\u8b8a\u5f15\u7528\u6216\u591a\u500b\u4e0d\u53ef\u8b8a\u5f15\u7528\uff0c\u4e26\u5728\u7de8\u8b6f\u6642\u6aa2\u67e5\u9019\u4e9b\u898f\u5247\u3002</p> <p>Rust \u8a18\u61b6\u9ad4\u5b89\u5168\u7684\u6838\u5fc3\u7406\u5ff5\u662f\uff1a\u901a\u904e\u7de8\u8b6f\u6642\u7684\u6240\u6709\u6b0a\u8207\u501f\u7528\u6aa2\u67e5\uff0c\u6d88\u9664\u904b\u884c\u6642\u8a18\u61b6\u9ad4\u932f\u8aa4\uff0c\u540c\u6642\u4fdd\u6301\u9ad8\u6548\u80fd\u3002</p>"},{"location":"technical-reference/memory-safety-ownership-implementation/#_2","title":"\u70ba\u4ec0\u9ebc\u9700\u8981\u8a18\u61b6\u9ad4\u5b89\u5168\u8207\u6240\u6709\u6b0a\uff1f","text":"<p>\u5728\u50b3\u7d71\u7cfb\u7d71\u7de8\u7a0b\u8a9e\u8a00\uff08\u5982 C/C++\uff09\u4e2d\uff0c\u8a18\u61b6\u9ad4\u7ba1\u7406\u5e38\u5c0e\u81f4\u554f\u984c\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u61f8\u5782\u6307\u91dd\uff1a\u8a2a\u554f\u5df2\u91cb\u653e\u7684\u8a18\u61b6\u9ad4\uff0c\u5c0e\u81f4\u672a\u5b9a\u7fa9\u884c\u70ba\u3002</li> <li>\u6578\u64da\u7af6\u8cfd\uff1a\u591a\u7dda\u7a0b\u8a2a\u554f\u5171\u4eab\u6578\u64da\u6642\u672a\u540c\u6b65\uff0c\u5c0e\u81f4\u4e0d\u53ef\u9810\u6e2c\u7d50\u679c\u3002</li> <li>\u8a18\u61b6\u9ad4\u6d29\u6f0f\uff1a\u672a\u91cb\u653e\u8a18\u61b6\u9ad4\uff0c\u6d6a\u8cbb\u7cfb\u7d71\u8cc7\u6e90\u3002</li> </ul> <p>Rust \u7684\u6240\u6709\u6b0a\u7cfb\u7d71\u901a\u904e\u7de8\u8b6f\u6642\u6aa2\u67e5\u89e3\u6c7a\u9019\u4e9b\u554f\u984c\uff0c\u7121\u9700\u5783\u573e\u56de\u6536\u5373\u53ef\u78ba\u4fdd\u5b89\u5168\u8207\u6027\u80fd\u3002</p>"},{"location":"technical-reference/memory-safety-ownership-implementation/#_3","title":"\u8a18\u61b6\u9ad4\u5b89\u5168\u8207\u6240\u6709\u6b0a\u7684\u5be6\u73fe\u6a5f\u5236","text":""},{"location":"technical-reference/memory-safety-ownership-implementation/#_4","title":"\u6240\u6709\u6b0a\u898f\u5247","text":"<p>Rust \u7684\u6240\u6709\u6b0a\u7cfb\u7d71\u57fa\u65bc\u4e09\u689d\u6838\u5fc3\u898f\u5247\uff1a</p> <ol> <li>\u6bcf\u500b\u503c\u90fd\u6709\u552f\u4e00\u7684\u6240\u6709\u8005 (Owner)\u3002</li> <li>\u5728\u4efb\u610f\u6642\u523b\uff0c\u4e00\u500b\u503c\u53ea\u80fd\u6709\u4e00\u500b\u53ef\u8b8a\u5f15\u7528 (<code>&amp;mut T</code>) \u6216\u591a\u500b\u4e0d\u53ef\u8b8a\u5f15\u7528 (<code>&amp;T</code>)\u3002</li> <li>\u7576\u6240\u6709\u8005\u8d85\u51fa\u4f5c\u7528\u57df\u6642\uff0c\u503c\u6703\u88ab\u81ea\u52d5\u91cb\u653e (Drop)\u3002</li> </ol> <p>\u793a\u4f8b\uff1a</p> <pre><code>fn main() {\n    let s1 = String::from(\"hello\"); // s1 \u662f\u6240\u6709\u8005\n    let s2 = s1; // \u6240\u6709\u6b0a\u8f49\u79fb\uff0cs1 \u4e0d\u518d\u6709\u6548\n    // println!(\"s1 = {}\", s1); // \u932f\u8aa4\uff1as1 \u5df2\u5931\u53bb\u6240\u6709\u6b0a\n    println!(\"s2 = {}\", s2); // \u6b63\u78ba\uff1as2 \u662f\u65b0\u6240\u6709\u8005\n}\n</code></pre>"},{"location":"technical-reference/memory-safety-ownership-implementation/#borrow-checker","title":"\u501f\u7528\u6aa2\u67e5\u5668 (Borrow Checker)","text":"<p>Rust \u7684\u7de8\u8b6f\u5668\u4f7f\u7528\u501f\u7528\u6aa2\u67e5\u5668\u5728\u7de8\u8b6f\u6642\u9a57\u8b49\u6240\u6709\u6b0a\u8207\u501f\u7528\u898f\u5247\uff0c\u9632\u6b62\u4e0d\u5b89\u5168\u7684\u8a18\u61b6\u9ad4\u8a2a\u554f\uff1a</p> <pre><code>fn main() {\n    let mut s = String::from(\"hello\");\n    let r1 = &amp;s; // \u4e0d\u53ef\u8b8a\u501f\u7528\n    let r2 = &amp;s; // \u53e6\u4e00\u500b\u4e0d\u53ef\u8b8a\u501f\u7528\n    println!(\"r1 = {}, r2 = {}\", r1, r2); // \u6b63\u78ba\uff1a\u591a\u500b\u4e0d\u53ef\u8b8a\u501f\u7528\u5141\u8a31\n    // let r3 = &amp;mut s; // \u932f\u8aa4\uff1a\u4e0d\u53ef\u8b8a\u501f\u7528\u5b58\u5728\u6642\u4e0d\u80fd\u6709\u53ef\u8b8a\u501f\u7528\n}\n</code></pre>"},{"location":"technical-reference/memory-safety-ownership-implementation/#drop-raii","title":"Drop \u7279\u5fb5\u8207 RAII","text":"<p>Rust \u4f7f\u7528 RAII (Resource Acquisition Is Initialization) \u539f\u5247\uff0c\u7576\u503c\u8d85\u51fa\u4f5c\u7528\u57df\u6642\u81ea\u52d5\u8abf\u7528 <code>Drop</code> \u7279\u5fb5\u91cb\u653e\u8cc7\u6e90\uff1a</p> <pre><code>struct MyResource {\n    data: String,\n}\n\nimpl Drop for MyResource {\n    fn drop(&amp;mut self) {\n        println!(\"Dropping {}\", self.data);\n    }\n}\n\nfn main() {\n    let resource = MyResource { data: String::from(\"test\") };\n    // \u4f5c\u7528\u57df\u7d50\u675f\u6642\uff0cresource \u81ea\u52d5\u91cb\u653e\n}\n</code></pre>"},{"location":"technical-reference/memory-safety-ownership-implementation/#_5","title":"\u5e95\u5c64\u5be6\u73fe\uff1a\u8a18\u61b6\u9ad4\u5206\u914d\u8207\u91cb\u653e","text":"<p>Rust \u4f7f\u7528 <code>std::alloc</code> \u6a21\u7d44\u7ba1\u7406\u8a18\u61b6\u9ad4\u5206\u914d\uff0c\u9810\u8a2d\u4f9d\u8cf4\u7cfb\u7d71\u5206\u914d\u5668\uff08\u5982 <code>malloc</code> \u548c <code>free</code>\uff09\uff0c\u4f46\u5141\u8a31\u81ea\u5b9a\u7fa9\u5206\u914d\u5668\uff1a</p> <pre><code>use std::alloc::{alloc, dealloc, Layout};\n\nfn main() {\n    unsafe {\n        let layout = Layout::new::&lt;i32&gt;();\n        let ptr = alloc(layout) as *mut i32;\n        *ptr = 42;\n        println!(\"Value: {}\", *ptr);\n        dealloc(ptr as *mut u8, layout);\n    }\n}\n</code></pre> <p>\u9019\u7a2e\u6a5f\u5236\u78ba\u4fdd Rust \u5728\u5e95\u5c64\u4ecd\u80fd\u9ad8\u6548\u64cd\u4f5c\u8a18\u61b6\u9ad4\u3002</p>"},{"location":"technical-reference/memory-safety-ownership-implementation/#_6","title":"\u6280\u8853\u7d30\u7bc0\u8207\u6311\u6230","text":"<ul> <li>\u7de8\u8b6f\u6642\u958b\u92b7\uff1a\u501f\u7528\u6aa2\u67e5\u5668\u589e\u52a0\u4e86\u7de8\u8b6f\u6642\u9593\uff0c\u4f46\u6d88\u9664\u4e86\u904b\u884c\u6642\u932f\u8aa4\u3002</li> <li>\u5b78\u7fd2\u66f2\u7dda\uff1a\u6240\u6709\u6b0a\u898f\u5247\u5c0d\u65b0\u624b\u4f86\u8aaa\u8f03\u70ba\u8907\u96dc\uff0c\u4f46\u719f\u6089\u5f8c\u80fd\u986f\u8457\u63d0\u5347\u4ee3\u78bc\u53ef\u9760\u6027\u3002</li> <li>unsafe \u4ee3\u78bc\uff1a\u5728\u5fc5\u8981\u6642\uff0cRust \u5141\u8a31\u4f7f\u7528 <code>unsafe</code> \u7e5e\u904e\u501f\u7528\u6aa2\u67e5\uff0c\u4f46\u9700\u7531\u958b\u767c\u8005\u4fdd\u8b49\u5b89\u5168\u3002</li> </ul>"},{"location":"technical-reference/tooling-ecosystem-overview/","title":"\u5de5\u5177\u8207\u751f\u614b\u6982\u89bd\uff1aRust \u7684\u5c08\u696d\u958b\u767c\u74b0\u5883","text":"<p>Rust \u7684\u5de5\u5177\u8207\u751f\u614b\u7cfb\u7d71\u662f\u5176\u6210\u529f\u7684\u91cd\u8981\u56e0\u7d20\u4e4b\u4e00\uff0c\u63d0\u4f9b\u4e86\u5f9e\u7de8\u8b6f\u3001\u6e2c\u8a66\u5230\u90e8\u7f72\u7684\u5168\u65b9\u4f4d\u652f\u63f4\uff0c\u5e6b\u52a9\u958b\u767c\u8005\u69cb\u5efa\u9ad8\u6548\u4e14\u53ef\u9760\u7684\u5c08\u6848\u3002</p> <p>\u5c0d\u65bc\u5e0c\u671b\u6df1\u5165\u4e86\u89e3 Rust \u6280\u8853\u7d30\u7bc0\u7684\u5b78\u7fd2\u8005\u8207\u958b\u767c\u8005\u4f86\u8aaa\uff0c\u7406\u89e3\u5de5\u5177\u8207\u751f\u614b\u7684\u7d44\u6210\u8207\u61c9\u7528\u662f\u638c\u63e1 Rust \u5c08\u696d\u958b\u767c\u7684\u95dc\u9375\u4e00\u6b65\u3002</p>"},{"location":"technical-reference/tooling-ecosystem-overview/#_1","title":"\u4ec0\u9ebc\u662f\u5de5\u5177\u8207\u751f\u614b\uff1f","text":"<p>Rust \u7684\u5de5\u5177\u8207\u751f\u614b\u5305\u62ec\u5b98\u65b9\u5de5\u5177\uff08\u5982 <code>Cargo</code>\u3001<code>rustc</code>\uff09\u3001\u793e\u7fa4 crate \u4ee5\u53ca\u6574\u5408\u958b\u767c\u74b0\u5883\uff0c\u65e8\u5728\u7c21\u5316\u958b\u767c\u6d41\u7a0b\u3001\u63d0\u5347\u4ee3\u78bc\u54c1\u8cea\u8207\u5c08\u6848\u7ba1\u7406\u6548\u7387\u3002</p> <p>\u9019\u4e9b\u5de5\u5177\u8207\u8cc7\u6e90\u8986\u84cb\u4e86\u5f9e\u4ee3\u78bc\u7de8\u5beb\u3001\u6e2c\u8a66\u5230\u6027\u80fd\u512a\u5316\u7684\u5404\u500b\u74b0\u7bc0\u3002</p> <p>Rust \u5de5\u5177\u8207\u751f\u614b\u7684\u6838\u5fc3\u7406\u5ff5\u662f\uff1a\u901a\u904e\u81ea\u52d5\u5316\u8207\u6574\u5408\u5de5\u5177\uff0c\u63d0\u5347\u958b\u767c\u6548\u7387\uff0c\u78ba\u4fdd\u4ee3\u78bc\u54c1\u8cea\u8207\u5c08\u6848\u53ef\u6301\u7e8c\u6027\u3002</p>"},{"location":"technical-reference/tooling-ecosystem-overview/#_2","title":"\u70ba\u4ec0\u9ebc\u9700\u8981\u5de5\u5177\u8207\u751f\u614b\uff1f","text":"<p>\u5728\u5927\u578b\u5c08\u6848\u8207\u5c08\u696d\u958b\u767c\u4e2d\uff0c\u7f3a\u4e4f\u5de5\u5177\u652f\u63f4\u53ef\u80fd\u5c0e\u81f4\u554f\u984c\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u6d41\u7a0b\u4f4e\u6548\uff1a\u624b\u52d5\u7ba1\u7406\u4f9d\u8cf4\u3001\u5efa\u7f6e\u8207\u6e2c\u8a66\uff0c\u6d6a\u8cbb\u6642\u9593\u3002</li> <li>\u54c1\u8cea\u96e3\u4fdd\u8b49\uff1a\u7f3a\u4e4f\u975c\u614b\u5206\u6790\u8207\u6e2c\u8a66\u5de5\u5177\uff0c\u6613\u5f15\u5165\u932f\u8aa4\u3002</li> <li>\u5718\u968a\u5354\u4f5c\u56f0\u96e3\uff1a\u7f3a\u4e4f\u6a19\u6e96\u5316\u5de5\u5177\u6642\uff0c\u5718\u968a\u6210\u54e1\u96e3\u4ee5\u7d71\u4e00\u6d41\u7a0b\u3002</li> </ul> <p>Rust \u7684\u5de5\u5177\u8207\u751f\u614b\u63d0\u4f9b\u4e86\u5168\u9762\u89e3\u6c7a\u65b9\u6848\uff0c\u7279\u5225\u9069\u7528\u65bc\u5c08\u696d\u5718\u968a\u8207\u8907\u96dc\u5c08\u6848\u3002</p>"},{"location":"technical-reference/tooling-ecosystem-overview/#_3","title":"\u5de5\u5177\u8207\u751f\u614b\u7684\u6838\u5fc3\u7d44\u6210","text":""},{"location":"technical-reference/tooling-ecosystem-overview/#cargo-rustc","title":"\u6838\u5fc3\u5de5\u5177\uff1aCargo \u8207 rustc","text":"<ul> <li><code>Cargo</code>\uff1aRust \u7684\u5b98\u65b9\u5efa\u7f6e\u5de5\u5177\u8207\u5305\u7ba1\u7406\u5668\uff0c\u652f\u63f4\u4f9d\u8cf4\u7ba1\u7406\u3001\u5efa\u7f6e\u8a2d\u5b9a\u8207\u6e2c\u8a66\u57f7\u884c\u3002</li> <li><code>rustc</code>\uff1aRust \u7de8\u8b6f\u5668\uff0c\u8ca0\u8cac\u5c07 Rust \u4ee3\u78bc\u8f49\u63db\u70ba\u6a5f\u5668\u78bc\uff0c\u652f\u63f4\u591a\u7a2e\u5f8c\u7aef\u8207\u512a\u5316\u7d1a\u5225\u3002</li> </ul> <p>\u57fa\u672c\u7528\u6cd5\uff1a</p> <pre><code># \u4f7f\u7528 Cargo \u65b0\u5efa\u5c08\u6848\ncargo new my_project\n\n# \u5efa\u7f6e\u5c08\u6848\ncargo build\n\n# \u76f4\u63a5\u4f7f\u7528 rustc \u7de8\u8b6f\u55ae\u6587\u4ef6\nrustc main.rs\n</code></pre>"},{"location":"technical-reference/tooling-ecosystem-overview/#rustfmt-clippy","title":"\u4ee3\u78bc\u54c1\u8cea\u5de5\u5177\uff1arustfmt \u8207 clippy","text":"<ul> <li><code>rustfmt</code>\uff1a\u81ea\u52d5\u683c\u5f0f\u5316\u4ee3\u78bc\uff0c\u78ba\u4fdd\u98a8\u683c\u4e00\u81f4\u3002</li> <li><code>clippy</code>\uff1a\u63d0\u4f9b\u975c\u614b\u5206\u6790\uff0c\u6aa2\u6e2c\u6f5b\u5728\u932f\u8aa4\u8207\u4ee3\u78bc\u7570\u5473\u3002</li> </ul> <p>\u5b89\u88dd\u8207\u4f7f\u7528\uff1a</p> <pre><code># \u5b89\u88dd\u5de5\u5177\nrustup component add rustfmt\nrustup component add clippy\n\n# \u683c\u5f0f\u5316\u4ee3\u78bc\ncargo fmt\n\n# \u904b\u884c\u975c\u614b\u5206\u6790\ncargo clippy --all-features -- -D warnings\n</code></pre>"},{"location":"technical-reference/tooling-ecosystem-overview/#rust-analyzer","title":"\u958b\u767c\u74b0\u5883\uff1arust-analyzer","text":"<p><code>rust-analyzer</code> \u662f Rust \u7684\u8a9e\u8a00\u4f3a\u670d\u5668\uff0c\u70ba IDE \u63d0\u4f9b\u667a\u80fd\u88dc\u5168\u3001\u932f\u8aa4\u6aa2\u67e5\u8207\u91cd\u69cb\u652f\u63f4\uff0c\u7279\u5225\u9069\u5408\u5927\u578b\u5c08\u6848\uff1a</p> <ul> <li>\u5728 VS Code \u4e2d\u5b89\u88dd <code>rust-analyzer</code> \u63d2\u4ef6\u3002</li> <li>\u914d\u7f6e\u5c08\u6848\u7279\u5b9a\u8a2d\u5b9a\uff0c\u63d0\u5347\u5206\u6790\u6e96\u78ba\u6027\u3002</li> </ul>"},{"location":"technical-reference/tooling-ecosystem-overview/#criterion-gdb","title":"\u6027\u80fd\u8207\u8abf\u8a66\u5de5\u5177\uff1acriterion \u8207 gdb","text":"<ul> <li><code>criterion</code>\uff1a\u57fa\u6e96\u6e2c\u8a66\u5de5\u5177\uff0c\u7528\u65bc\u7cbe\u78ba\u6e2c\u91cf\u4ee3\u78bc\u6027\u80fd\u3002</li> <li><code>gdb</code> \u8207 <code>lldb</code>\uff1a\u652f\u63f4 Rust \u7a0b\u5f0f\u8abf\u8a66\uff0c\u5e6b\u52a9\u5b9a\u4f4d\u554f\u984c\u3002</li> </ul> <p>\u7c21\u55ae <code>criterion</code> \u793a\u4f8b\uff1a</p> <pre><code>use criterion::{black_box, criterion_group, criterion_main, Criterion};\n\nfn fibonacci(n: u64) -&gt; u64 {\n    if n &lt;= 1 {\n        n\n    } else {\n        fibonacci(n - 1) + fibonacci(n - 2)\n    }\n}\n\nfn criterion_benchmark(c: &amp;mut Criterion) {\n    c.bench_function(\"fib 20\", |b| b.iter(|| fibonacci(black_box(20))));\n}\n\ncriterion_group!(benches, criterion_benchmark);\ncriterion_main!(benches);\n</code></pre>"},{"location":"technical-reference/tooling-ecosystem-overview/#cratesio-crate","title":"\u793e\u7fa4\u751f\u614b\uff1acrates.io \u8207\u5e38\u7528 crate","text":"<p>Rust \u7684\u793e\u7fa4\u751f\u614b\u4ee5 <code>crates.io</code> \u70ba\u4e2d\u5fc3\uff0c\u63d0\u4f9b\u4e86\u5927\u91cf\u958b\u6e90 crate\uff0c\u6db5\u84cb\u5404\u7a2e\u529f\u80fd\uff1a</p> <ul> <li><code>serde</code>\uff1a\u5e8f\u5217\u5316\u8207\u53cd\u5e8f\u5217\u5316\u6846\u67b6\u3002</li> <li><code>tokio</code>\uff1a\u7570\u6b65\u904b\u884c\u6642\uff0c\u7528\u65bc\u9ad8\u6548 I/O\u3002</li> <li><code>diesel</code>\uff1aORM \u8207\u8cc7\u6599\u5eab\u67e5\u8a62\u6846\u67b6\u3002</li> </ul> <p>\u4f9d\u8cf4\u7ba1\u7406\u793a\u4f8b\uff1a</p> <pre><code>[dependencies]\nserde = { version = \"1.0\", features = [\"derive\"] }\ntokio = { version = \"1.0\", features = [\"full\"] }\n</code></pre>"},{"location":"technical-reference/tooling-ecosystem-overview/#cicd-github-actions-docker","title":"CI/CD \u8207\u90e8\u7f72\uff1aGitHub Actions \u8207 Docker","text":"<p>Rust \u5c08\u6848\u5e38\u8207 CI/CD \u5de5\u5177\u6574\u5408\uff0c\u81ea\u52d5\u5316\u6e2c\u8a66\u8207\u90e8\u7f72\uff1a</p> <ul> <li>\u4f7f\u7528 GitHub Actions \u904b\u884c\u6e2c\u8a66\u8207\u5efa\u7f6e\u3002</li> <li>\u4f7f\u7528 Docker \u5bb9\u5668\u5316 Rust \u61c9\u7528\uff0c\u78ba\u4fdd\u74b0\u5883\u4e00\u81f4\u6027\u3002</li> </ul> <p>\u7c21\u55ae GitHub Actions \u914d\u7f6e (<code>rust-ci.yml</code>)\uff1a</p> <pre><code>name: Rust CI\non: [push, pull_request]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Build\n        run: cargo build --verbose\n      - name: Run tests\n        run: cargo test --verbose\n</code></pre>"},{"location":"technical-reference/tooling-ecosystem-overview/#_4","title":"\u6280\u8853\u7d30\u7bc0\u8207\u6311\u6230","text":"<ul> <li>\u5de5\u5177\u6574\u5408\u6027\uff1a\u4e0d\u540c\u5de5\u5177\u9593\u53ef\u80fd\u5b58\u5728\u76f8\u5bb9\u6027\u554f\u984c\uff0c\u9700\u9078\u64c7\u5408\u9069\u7248\u672c\u3002</li> <li>\u5b78\u7fd2\u6210\u672c\uff1a\u521d\u5b78\u8005\u53ef\u80fd\u5c0d\u5de5\u5177\u591a\u6a23\u6027\u611f\u5230\u56f0\u60d1\uff0c\u5efa\u8b70\u5f9e\u6838\u5fc3\u5de5\u5177\u958b\u59cb\u3002</li> <li>\u6027\u80fd\u8003\u91cf\uff1a\u67d0\u4e9b\u5de5\u5177\uff08\u5982 <code>clippy</code>\uff09\u53ef\u80fd\u589e\u52a0\u5efa\u7f6e\u6642\u9593\uff0c\u9700\u5e73\u8861\u4f7f\u7528\u3002</li> </ul>"},{"location":"technical-reference/type-system-abstraction-applications/","title":"\u578b\u5225\u7cfb\u7d71\u8207\u62bd\u8c61\u61c9\u7528\uff1aRust \u7684\u5f37\u5927\u8868\u9054\u529b","text":"<p>Rust \u7684\u578b\u5225\u7cfb\u7d71\u662f\u5176\u8a2d\u8a08\u4e2d\u7684\u4e00\u5927\u4eae\u9ede\uff0c\u7d50\u5408\u975c\u614b\u578b\u5225\u8207\u96f6\u6210\u672c\u62bd\u8c61\uff0c\u63d0\u4f9b\u4e86\u5f37\u5927\u7684\u8868\u9054\u529b\u8207\u6027\u80fd\u4fdd\u8b49\u3002</p> <p>\u5c0d\u65bc\u5e0c\u671b\u6df1\u5165\u4e86\u89e3 Rust \u6280\u8853\u7d30\u7bc0\u7684\u5b78\u7fd2\u8005\u8207\u958b\u767c\u8005\u4f86\u8aaa\uff0c\u7406\u89e3\u578b\u5225\u7cfb\u7d71\u7684\u5be6\u73fe\u8207\u62bd\u8c61\u61c9\u7528\u662f\u638c\u63e1 Rust \u9032\u968e\u958b\u767c\u7684\u95dc\u9375\u4e00\u6b65\u3002</p>"},{"location":"technical-reference/type-system-abstraction-applications/#_1","title":"\u4ec0\u9ebc\u662f\u578b\u5225\u7cfb\u7d71\u8207\u62bd\u8c61\uff1f","text":"<p>Rust \u7684\u578b\u5225\u7cfb\u7d71\u662f\u4e00\u5957\u975c\u614b\u578b\u5225\u6a5f\u5236\uff0c\u78ba\u4fdd\u7a0b\u5f0f\u5728\u7de8\u8b6f\u6642\u6355\u7372\u578b\u5225\u76f8\u95dc\u932f\u8aa4\uff0c\u540c\u6642\u652f\u63f4\u6cdb\u578b\u3001\u7279\u5fb5 (Trait) \u7b49\u9ad8\u7d1a\u62bd\u8c61\u5de5\u5177\u3002</p> <p>\u62bd\u8c61\u5247\u662f\u6307\u901a\u904e\u9019\u4e9b\u5de5\u5177\u96b1\u85cf\u5be6\u73fe\u7d30\u7bc0\uff0c\u63d0\u5347\u4ee3\u78bc\u7684\u53ef\u91cd\u7528\u6027\u8207\u53ef\u8b80\u6027\u3002</p> <p>Rust \u578b\u5225\u7cfb\u7d71\u7684\u6838\u5fc3\u7406\u5ff5\u662f\uff1a\u901a\u904e\u975c\u614b\u578b\u5225\u8207\u96f6\u6210\u672c\u62bd\u8c61\uff0c\u78ba\u4fdd\u5b89\u5168\u8207\u6027\u80fd\uff0c\u540c\u6642\u63d0\u4f9b\u9748\u6d3b\u7684\u7a0b\u5f0f\u8a2d\u8a08\u80fd\u529b\u3002</p>"},{"location":"technical-reference/type-system-abstraction-applications/#_2","title":"\u70ba\u4ec0\u9ebc\u9700\u8981\u578b\u5225\u7cfb\u7d71\u8207\u62bd\u8c61\uff1f","text":"<p>\u5728\u8907\u96dc\u7a0b\u5f0f\u8a2d\u8a08\u4e2d\uff0c\u7f3a\u4e4f\u5f37\u5927\u7684\u578b\u5225\u7cfb\u7d71\u8207\u62bd\u8c61\u53ef\u80fd\u5c0e\u81f4\u554f\u984c\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u578b\u5225\u932f\u8aa4\uff1a\u904b\u884c\u6642\u578b\u5225\u4e0d\u5339\u914d\u5c0e\u81f4\u7a0b\u5f0f\u5d29\u6f70\u3002</li> <li>\u4ee3\u78bc\u91cd\u8907\uff1a\u7f3a\u4e4f\u62bd\u8c61\u5de5\u5177\u6642\uff0c\u985e\u4f3c\u529f\u80fd\u9700\u591a\u6b21\u5be6\u73fe\u3002</li> <li>\u7dad\u8b77\u56f0\u96e3\uff1a\u4ee3\u78bc\u7f3a\u4e4f\u7d50\u69cb\u5316\u62bd\u8c61\uff0c\u96e3\u4ee5\u64f4\u5c55\u8207\u4fee\u6539\u3002</li> </ul> <p>Rust \u7684\u578b\u5225\u7cfb\u7d71\u8207\u62bd\u8c61\u5de5\u5177\u901a\u904e\u7de8\u8b6f\u6642\u6aa2\u67e5\u8207\u6cdb\u578b\u8a2d\u8a08\uff0c\u89e3\u6c7a\u9019\u4e9b\u554f\u984c\uff0c\u7279\u5225\u9069\u7528\u65bc\u5927\u578b\u5c08\u6848\u3002</p>"},{"location":"technical-reference/type-system-abstraction-applications/#_3","title":"\u578b\u5225\u7cfb\u7d71\u8207\u62bd\u8c61\u7684\u5be6\u73fe\u6a5f\u5236","text":""},{"location":"technical-reference/type-system-abstraction-applications/#_4","title":"\u975c\u614b\u578b\u5225\u8207\u63a8\u65b7","text":"<p>Rust \u662f\u975c\u614b\u578b\u5225\u8a9e\u8a00\uff0c\u8b8a\u6578\u578b\u5225\u5728\u7de8\u8b6f\u6642\u78ba\u5b9a\uff0c\u4f46\u652f\u63f4\u578b\u5225\u63a8\u65b7\u6e1b\u5c11\u986f\u5f0f\u8a3b\u91cb\uff1a</p> <pre><code>fn main() {\n    let x = 42; // \u63a8\u65b7\u70ba i32\n    let y: f64 = 3.14; // \u986f\u5f0f\u6307\u5b9a\u578b\u5225\n    println!(\"x = {}, y = {}\", x, y);\n}\n</code></pre> <p>\u578b\u5225\u63a8\u65b7\u63d0\u5347\u4e86\u4ee3\u78bc\u53ef\u8b80\u6027\uff0c\u540c\u6642\u4fdd\u6301\u7de8\u8b6f\u6642\u5b89\u5168\u3002</p>"},{"location":"technical-reference/type-system-abstraction-applications/#generics","title":"\u6cdb\u578b (Generics)\uff1a\u578b\u5225\u53c3\u6578\u5316","text":"<p>Rust \u7684\u6cdb\u578b\u5141\u8a31\u51fd\u6578\u8207\u7d50\u69cb\u9ad4\u9069\u7528\u65bc\u591a\u7a2e\u578b\u5225\uff0c\u5be6\u73fe\u4ee3\u78bc\u91cd\u7528\uff1a</p> <pre><code>fn print_value&lt;T: std::fmt::Display&gt;(value: T) {\n    println!(\"Value: {}\", value);\n}\n\nfn main() {\n    print_value(42); // \u9069\u7528\u65bc i32\n    print_value(\"Hello\"); // \u9069\u7528\u65bc &amp;str\n}\n</code></pre> <p>\u6cdb\u578b\u5728\u7de8\u8b6f\u6642\u751f\u6210\u5177\u9ad4\u5be6\u73fe\uff0c\u78ba\u4fdd\u96f6\u6210\u672c\u62bd\u8c61\u3002</p>"},{"location":"technical-reference/type-system-abstraction-applications/#traits","title":"\u7279\u5fb5 (Traits)\uff1a\u884c\u70ba\u62bd\u8c61","text":"<p>\u7279\u5fb5\u5b9a\u7fa9\u4e86\u578b\u5225\u61c9\u5be6\u73fe\u7684\u884c\u70ba\uff0c\u985e\u4f3c\u65bc\u4ecb\u9762\uff0c\u4f46\u652f\u63f4\u9810\u8a2d\u5be6\u73fe\u8207\u7279\u5fb5\u754c\u9650\uff1a</p> <pre><code>trait Printable {\n    fn print(&amp;self);\n}\n\nimpl Printable for i32 {\n    fn print(&amp;self) {\n        println!(\"Number: {}\", self);\n    }\n}\n\nfn main() {\n    let num = 42;\n    num.print(); // \u8f38\u51fa Number: 42\n}\n</code></pre> <p>\u7279\u5fb5\u652f\u63f4\u52d5\u614b\u5206\u6d3e (Dynamic Dispatch) \u8207\u975c\u614b\u5206\u6d3e (Static Dispatch)\uff0c\u63d0\u4f9b\u9748\u6d3b\u7684\u62bd\u8c61\u65b9\u5f0f\u3002</p>"},{"location":"technical-reference/type-system-abstraction-applications/#_5","title":"\u578b\u5225\u5225\u540d\u8207\u95dc\u806f\u578b\u5225","text":"<p>Rust \u652f\u63f4\u578b\u5225\u5225\u540d\u8207\u95dc\u806f\u578b\u5225\uff0c\u63d0\u5347\u62bd\u8c61\u8868\u9054\u529b\uff1a</p> <pre><code>type Point = (i32, i32);\n\ntrait Graph {\n    type Node;\n    fn get_node(&amp;self) -&gt; Self::Node;\n}\n\nstruct SimpleGraph {\n    node: i32,\n}\n\nimpl Graph for SimpleGraph {\n    type Node = i32;\n    fn get_node(&amp;self) -&gt; Self::Node {\n        self.node\n    }\n}\n</code></pre> <p>\u9019\u4e9b\u6a5f\u5236\u5e6b\u52a9\u8a2d\u8a08\u66f4\u8907\u96dc\u7684\u62bd\u8c61\u7d50\u69cb\u3002</p>"},{"location":"technical-reference/type-system-abstraction-applications/#_6","title":"\u6280\u8853\u7d30\u7bc0\u8207\u6311\u6230","text":"<ul> <li>\u7de8\u8b6f\u6642\u55ae\u614b\u5316 (Monomorphization)\uff1a\u6cdb\u578b\u4ee3\u78bc\u5728\u7de8\u8b6f\u6642\u751f\u6210\u5177\u9ad4\u5be6\u73fe\uff0c\u589e\u52a0\u7de8\u8b6f\u6642\u9593\u4f46\u78ba\u4fdd\u904b\u884c\u6642\u6027\u80fd\u3002</li> <li>\u52d5\u614b\u5206\u6d3e\u958b\u92b7\uff1a\u4f7f\u7528\u7279\u5fb5\u7269\u4ef6 (Trait Object) \u6642\u6703\u5f15\u5165\u865b\u8868 (vtable) \u67e5\u8a62\uff0c\u9700\u8b39\u614e\u4f7f\u7528\u3002</li> <li>\u578b\u5225\u8907\u96dc\u6027\uff1a\u904e\u5ea6\u4f7f\u7528\u6cdb\u578b\u8207\u7279\u5fb5\u53ef\u80fd\u5c0e\u81f4\u4ee3\u78bc\u96e3\u4ee5\u7406\u89e3\uff0c\u9700\u5e73\u8861\u62bd\u8c61\u8207\u6e05\u6670\u5ea6\u3002</li> </ul>"}]}